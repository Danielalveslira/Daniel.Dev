import { FocusEvent } from "react";
export interface ICheckbox {
    readonly id: string;
    readonly label: string | JSX.Element;
    readonly description?: string | JSX.Element;
    readonly value?:
        | boolean
        | {
              value: boolean;
              readonly isLocked: boolean;
              readonly isFrozen: boolean;
              readonly confirm: () => void;
          };
    readonly required?: boolean;
    readonly disabled?: boolean;
    readonly readOnly?: boolean;
    readonly tabIndex?: number;
    readonly error?: boolean;
    readonly onChange?: (value: boolean) => void;
}
export declare const CheckboxesFabric: (props: {
    readonly styles: {
        readonly backgroundColor: string;
        readonly borderColor: string;
        readonly borderSize?: number;
        readonly roundness?: number;
        readonly textColor: string;
        readonly errorColor: string;
        readonly scale?: number;
    };
    readonly checkboxes: ICheckbox[];
    readonly tabIndex?: number | undefined;
    readonly ariaDescribedBy?: string | undefined;
    readonly view?: "live" | "test" | "preview" | undefined;
    readonly onFocus?: ((e: FocusEvent) => void) | undefined;
    readonly onBlur?: ((e: FocusEvent) => void) | undefined;
    readonly onAutoFocus?: ((el: HTMLInputElement | null) => void) | undefined;
    readonly onSubmit?: (() => void) | undefined;
    readonly onCancel?: (() => void) | undefined;
}) => import("react/jsx-runtime").JSX.Element;
