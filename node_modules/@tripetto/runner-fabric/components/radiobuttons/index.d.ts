import { FocusEvent } from "react";
import { TSerializeTypes } from "@tripetto/runner";
export interface IRadiobutton {
    readonly id: string;
    readonly name: string;
    readonly label?: string | JSX.Element;
    readonly description?: string | JSX.Element;
    readonly value?: string;
    readonly tabIndex?: number;
}
export declare const RadiobuttonElement: import("styled-components").IStyledComponent<
    "web",
    import("styled-components/dist/types").FastOmit<
        import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>,
        never
    >
>;
export declare const RadiobuttonLabelElement: import("styled-components").IStyledComponent<
    "web",
    import("styled-components/dist/types").Substitute<
        import("react").DetailedHTMLProps<import("react").LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>,
        {
            $backgroundColor: string;
            $borderColor: string;
            $borderSize: number;
            $textColor: string;
            $scale: number;
            $disabled: boolean;
            $label: boolean;
        }
    >
>;
export declare const RadiobuttonsFabric: (props: {
    readonly styles: {
        readonly backgroundColor: string;
        readonly borderColor: string;
        readonly borderSize?: number;
        readonly textColor: string;
        readonly scale?: number;
    };
    readonly buttons: IRadiobutton[];
    readonly tabIndex?: number | undefined;
    readonly ariaDescribedBy?: string | undefined;
    readonly disabled?: boolean | undefined;
    readonly readOnly?: boolean | undefined;
    readonly allowUnselect?: boolean | undefined;
    readonly value?:
        | string
        | {
              reference?: string | undefined;
              readonly isLocked: boolean;
              readonly isFrozen: boolean;
              readonly set: (value: TSerializeTypes, reference?: string, display?: string) => void;
          }
        | undefined;
    readonly view?: "live" | "test" | "preview" | undefined;
    readonly onChange?: ((value: string) => void) | undefined;
    readonly onFocus?: ((e: FocusEvent) => void) | undefined;
    readonly onBlur?: ((e: FocusEvent) => void) | undefined;
    readonly onAutoFocus?: ((el: HTMLInputElement | null) => void) | undefined;
    readonly onSubmit?: (() => void) | undefined;
    readonly onCancel?: (() => void) | undefined;
}) => import("react/jsx-runtime").JSX.Element;
