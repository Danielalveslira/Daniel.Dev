import { FocusEvent } from "react";
import { TOverlayContext } from "../../overlay";
export interface IMultiSelectOption {
    readonly id: string;
    readonly name: string;
    readonly label?: string | JSX.Element;
    readonly description?: string | JSX.Element;
    readonly disabled?: boolean;
    readonly value?: {
        value: boolean;
        readonly isLocked: boolean;
        readonly isFrozen: boolean;
        readonly confirm: () => void;
    };
}
export declare const MultiSelectFabric: (props: {
    readonly styles: {
        readonly backgroundColor: string;
        readonly borderColor: string;
        readonly borderSize?: number;
        readonly roundness?: number;
        readonly textColor?: string;
        readonly errorColor: string;
        readonly scale?: number;
        readonly pills?: "filled" | "outline";
        readonly overlayWidth?: "auto" | "full";
    };
    readonly overlay: TOverlayContext;
    readonly id: string;
    readonly options: IMultiSelectOption[];
    readonly placeholder?: string | undefined;
    readonly required?: boolean | undefined;
    readonly error?: boolean | undefined;
    readonly tabIndex?: number | undefined;
    readonly maxSelected?: number | undefined;
    readonly ariaDescribedBy?: string | undefined;
    readonly onChange?: ((value: string) => void) | undefined;
    readonly onFocus?: ((e: FocusEvent) => void) | undefined;
    readonly onBlur?: ((e: FocusEvent) => void) | undefined;
    readonly onAutoFocus?: ((el: HTMLInputElement | null) => void) | undefined;
    readonly onSubmit?: (() => void) | undefined;
    readonly onCancel?: (() => void) | undefined;
}) => import("react/jsx-runtime").JSX.Element;
