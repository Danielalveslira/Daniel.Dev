import { FocusEvent } from "react";
import { TSerializeTypes } from "@tripetto/runner";
export interface IMatrixColumn {
    readonly id: string;
    readonly name: string;
    readonly label?: string | JSX.Element;
    readonly value?: string;
}
export interface IMatrixRow {
    readonly id: string;
    readonly label: string | JSX.Element;
    readonly alias?: string;
    readonly explanation?: string | JSX.Element;
    readonly required?: boolean;
    readonly tabIndex?: number;
    readonly value?:
        | string
        | {
              reference?: string;
              readonly isLocked: boolean;
              readonly isFrozen: boolean;
              readonly set: (value: TSerializeTypes, reference?: string, display?: string) => void;
          };
    readonly onChange?: (id: string) => void;
}
export declare const MatrixFabric: (props: {
    readonly styles: {
        readonly backgroundColor: string;
        readonly borderColor: string;
        readonly borderSize?: number;
        readonly textColor: string;
        readonly errorColor: string;
        readonly scale?: number;
        readonly hideRequiredIndicator?: boolean;
    };
    readonly columns: IMatrixColumn[];
    readonly rows: IMatrixRow[];
    readonly disabled?: boolean | undefined;
    readonly readOnly?: boolean | undefined;
    readonly allowUnselect?: boolean | undefined;
    readonly ariaDescribedBy?: string | undefined;
    readonly tabIndex?: number | undefined;
    readonly required?: boolean | undefined;
    readonly onFocus?: ((e: FocusEvent) => void) | undefined;
    readonly onBlur?: ((e: FocusEvent) => void) | undefined;
    readonly onAutoFocus?: ((el: HTMLInputElement | null) => void) | undefined;
    readonly onSubmit?: (() => void) | undefined;
    readonly onCancel?: (() => void) | undefined;
}) => import("react/jsx-runtime").JSX.Element;
