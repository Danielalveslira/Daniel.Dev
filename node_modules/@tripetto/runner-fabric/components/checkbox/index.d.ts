import { FocusEvent } from "react";
export declare const CheckboxElement: import("styled-components").IStyledComponent<
    "web",
    import("styled-components/dist/types").FastOmit<
        import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>,
        never
    >
>;
export declare const CheckboxFabric: (props: {
    readonly styles: {
        readonly backgroundColor: string;
        readonly borderColor: string;
        readonly borderSize?: number;
        readonly roundness?: number;
        readonly textColor: string;
        readonly errorColor: string;
        readonly scale?: number;
        readonly hideRequiredIndicator?: boolean;
    };
    readonly label?: string | JSX.Element | undefined;
    readonly description?: string | JSX.Element | undefined;
    readonly required?: boolean | undefined;
    readonly disabled?: boolean | undefined;
    readonly readOnly?: boolean | undefined;
    readonly error?: boolean | undefined;
    readonly tabIndex?: number | undefined;
    readonly tabSubmit?: boolean | undefined;
    readonly value?:
        | boolean
        | {
              value: boolean;
              readonly isLocked: boolean;
              readonly isFrozen: boolean;
              readonly confirm: () => void;
          }
        | undefined;
    readonly ariaDescribedBy?: string | undefined;
    readonly onChange?: ((value: boolean) => void) | undefined;
    readonly onFocus?: ((e: FocusEvent) => void) | undefined;
    readonly onBlur?: ((e: FocusEvent) => void) | undefined;
    readonly onAutoFocus?: ((el: HTMLInputElement | null) => void) | undefined;
    readonly onSubmit?: (() => void) | undefined;
    readonly onCancel?: (() => void) | undefined;
}) => import("react/jsx-runtime").JSX.Element;
