import { FocusEvent, KeyboardEvent } from "react";
export declare const ButtonFabric: (props: {
    readonly styles: {
        readonly baseColor: string;
        readonly textColor?: string;
        readonly outlineSize?: number;
        readonly roundness?: number;
        readonly mode?: "fill" | "outline";
        readonly hover?: "fill" | "outline";
        readonly scale?: number;
        readonly group?: "start" | "middle" | "end";
    };
    readonly label?: string | JSX.Element | undefined;
    readonly description?: string | JSX.Element | undefined;
    readonly icon?: JSX.Element | undefined;
    readonly iconPosition?: "left" | "right" | undefined;
    readonly image?: string | undefined;
    readonly emoji?: string | undefined;
    readonly size?: "small" | "medium" | "large" | undefined;
    readonly disabled?: boolean | undefined;
    readonly tabIndex?: number | undefined;
    readonly ariaDescribedBy?: string | undefined;
    readonly hyperlink?:
        | {
              readonly url: string;
              readonly target?: "self" | "blank" | undefined;
          }
        | undefined;
    readonly onClick?: (() => void) | undefined;
    readonly onFocus?: ((e: FocusEvent) => void) | undefined;
    readonly onBlur?: ((e: FocusEvent) => void) | undefined;
    readonly onAutoFocus?: ((el: HTMLButtonElement | null) => void) | undefined;
    readonly onKeyDown?: ((e: KeyboardEvent<HTMLButtonElement>) => void) | undefined;
    readonly onTab?: (() => void) | undefined;
    readonly onCancel?: (() => void) | undefined;
}) => import("react/jsx-runtime").JSX.Element;
