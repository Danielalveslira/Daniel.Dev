import { FocusEvent } from "react";
import { TSerializeTypes } from "@tripetto/runner";
import { IInputFabricStyles } from "./styles";
export declare const InputElement: import("styled-components").IStyledComponent<
    "web",
    import("styled-components/dist/types").Substitute<
        import("react").DetailedHTMLProps<import("react").InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>,
        {
            $backgroundColor: string;
            $borderColor: string;
            $borderSize: number;
            $roundness: number | undefined;
            $textColor: string | undefined;
            $errorColor: string;
            $errorVisible: boolean;
            $error: boolean;
            $scale: number;
        }
    >
>;
export declare const InputFabric: (props: {
    readonly type: "text" | "email" | "url" | "password" | "tel" | "number";
    readonly styles: IInputFabricStyles;
    readonly id?: string | undefined;
    readonly placeholder?: string | undefined;
    readonly required?: boolean | undefined;
    readonly disabled?: boolean | undefined;
    readonly readOnly?: boolean | undefined;
    readonly error?: boolean | undefined;
    readonly tabIndex?: number | undefined;
    readonly maxLength?: number | undefined;
    readonly value?:
        | string
        | {
              pristine: TSerializeTypes;
              readonly string: string;
              readonly isLocked: boolean;
              readonly isFrozen: boolean;
          }
        | undefined;
    readonly ariaDescribedBy?: string | undefined;
    /**
     * https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode
     */
    readonly inputMode?: "url" | "search" | "text" | "email" | "tel" | "numeric" | "decimal" | undefined;
    /**
     * https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete
     */
    readonly autoComplete?: string | undefined;
    readonly list?: string | undefined;
    readonly onChange?: ((value: string) => string | void) | undefined;
    readonly onFocus?: ((e: FocusEvent) => string | void) | undefined;
    readonly onBlur?: ((e: FocusEvent) => string | void) | undefined;
    readonly onAutoFocus?: ((el: HTMLInputElement | null) => void) | undefined;
    readonly onSubmit?: (() => void) | undefined;
    readonly onCancel?: (() => void) | undefined;
}) => import("react/jsx-runtime").JSX.Element;
