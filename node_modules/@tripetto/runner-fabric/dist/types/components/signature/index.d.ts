import { FocusEvent, ReactNode } from "react";
import { L10n } from "@tripetto/runner";
import { color } from "../../color";
export interface ISignatureController {
    readonly upload: (files: FileList, service: ISignatureService | undefined, onProgress: (percent: number) => void) => Promise<void>;
    readonly download: (service?: ISignatureService) => Promise<string>;
    readonly delete: (service?: ISignatureService) => Promise<void>;
    readonly signatureSlot: {
        readonly hasValue: boolean;
        readonly string: string;
        readonly reference: string | undefined;
        readonly isLocked: boolean;
        readonly isFrozen: boolean;
        readonly time: number | undefined;
    };
}
export interface ISignatureService {
    readonly get: (signature: string) => Promise<Blob>;
    readonly put: (signature: File, onProgress?: (percentage: number) => void) => Promise<string>;
    readonly delete: (signature: string) => Promise<void>;
}
export declare const SignatureSignedElement: import("styled-components").IStyledComponent<
    "web",
    import("styled-components/dist/types").FastOmit<
        import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>,
        never
    >
>;
export declare const SignatureViewFabric: (props: {
    readonly controller: ISignatureController;
    readonly service?: ISignatureService | undefined;
    readonly host?: ((props: { children: ReactNode }) => JSX.Element) | undefined;
    readonly error?: ReactNode;
    readonly loading?: ReactNode;
}) => import("react/jsx-runtime").JSX.Element;
export declare const SignatureFabric: (props: {
    readonly styles: {
        readonly backgroundColor: string;
        readonly borderColor: string;
        readonly borderSize?: number;
        readonly roundness?: number;
        readonly textColor?: string;
        readonly errorColor: string;
        readonly scale?: number;
    };
    readonly l10n?: L10n.Namespace | undefined;
    readonly labels: (id: "clear" | "processing" | "signed", message: string) => string;
    readonly controller: ISignatureController;
    readonly service?: ISignatureService | undefined;
    readonly disabled?: boolean | undefined;
    readonly readOnly?: boolean | undefined;
    readonly error?: boolean | undefined;
    readonly tabIndex?: number | undefined;
    readonly ariaDescribedBy?: string | undefined;
    readonly size?: "sm" | "md" | "lg" | undefined;
    readonly color?: string | undefined;
    readonly onFocus?: ((e: FocusEvent) => void) | undefined;
    readonly onBlur?: ((e: FocusEvent) => void) | undefined;
    readonly onAutoFocus?: ((el: HTMLDivElement | null) => void) | undefined;
    readonly onSubmit?: (() => void) | undefined;
    readonly onCancel?: (() => void) | undefined;
}) => import("react/jsx-runtime").JSX.Element;
