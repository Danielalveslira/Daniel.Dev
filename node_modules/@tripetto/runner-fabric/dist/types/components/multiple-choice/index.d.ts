import { FocusEvent } from "react";
import { TSerializeTypes } from "@tripetto/runner";
export interface IMultipleChoiceButton {
    readonly id: string;
    readonly name: string;
    readonly value?: string;
    readonly label?: string | JSX.Element;
    readonly description?: string | JSX.Element;
    readonly url?: string;
    readonly target?: "self" | "blank";
    readonly disabled?: boolean;
    readonly slot?: {
        value: boolean;
        readonly isLocked: boolean;
        readonly isFrozen: boolean;
        readonly confirm: () => void;
    };
    readonly tabIndex?: number;
    readonly color?: string;
    readonly onChange?: (selected: boolean) => void;
}
export declare const MultipleChoiceFabric: (props: {
    readonly styles: {
        readonly color: string;
        readonly outlineSize?: number;
        readonly roundness?: number;
        readonly scale?: number;
        readonly margin?: number;
    };
    readonly buttons: IMultipleChoiceButton[];
    readonly alignment?: "horizontal" | "vertical" | "full" | "equal" | "columns" | undefined;
    readonly required?: boolean | undefined;
    readonly disabled?: boolean | undefined;
    readonly readOnly?: boolean | undefined;
    readonly ariaDescribedBy?: string | undefined;
    readonly tabIndex?: number | undefined;
    readonly value?:
        | string
        | {
              reference?: string | undefined;
              readonly isLocked: boolean;
              readonly isFrozen: boolean;
              readonly set: (value: TSerializeTypes, reference?: string, display?: string) => void;
          }
        | undefined;
    readonly autoSubmit?: boolean | undefined;
    readonly view?: "live" | "test" | "preview" | undefined;
    readonly onChange?: ((value: string) => void) | undefined;
    readonly onFocus?: ((e: FocusEvent) => void) | undefined;
    readonly onBlur?: ((e: FocusEvent) => void) | undefined;
    readonly onAutoFocus?: ((el: HTMLButtonElement | null) => void) | undefined;
    readonly onSubmit?: (() => void) | undefined;
    readonly onCancel?: (() => void) | undefined;
}) => import("react/jsx-runtime").JSX.Element;
