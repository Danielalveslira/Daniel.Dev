import { FocusEvent } from "react";
import { TSerializeTypes } from "@tripetto/runner";
export interface IYesNo {
    readonly label: string;
    readonly icon?: "yes" | "no";
    readonly color?: string;
}
export declare const YesNoFabric: (props: {
    readonly styles: {
        readonly yesColor: string;
        readonly noColor: string;
        readonly outlineSize?: number;
        readonly roundness?: number;
        readonly scale?: number;
        readonly margin?: number;
        readonly alignment?: "horizontal" | "vertical";
    };
    readonly yes: IYesNo;
    readonly no: IYesNo;
    readonly required?: boolean | undefined;
    readonly disabled?: boolean | undefined;
    readonly readOnly?: boolean | undefined;
    readonly ariaDescribedBy?: string | undefined;
    readonly tabIndex?: number | undefined;
    readonly value?:
        | ""
        | "yes"
        | "no"
        | {
              reference?: string | undefined;
              readonly isLocked: boolean;
              readonly isFrozen: boolean;
              readonly set: (value: TSerializeTypes, reference?: string, display?: string) => void;
              readonly clear: () => void;
          }
        | undefined;
    readonly autoSubmit?: boolean | undefined;
    readonly onChange?: ((value: "" | "yes" | "no") => void) | undefined;
    readonly onFocus?: ((e: FocusEvent) => void) | undefined;
    readonly onBlur?: ((e: FocusEvent) => void) | undefined;
    readonly onAutoFocus?: ((el: HTMLButtonElement | null) => void) | undefined;
    readonly onSubmit?: (() => void) | undefined;
    readonly onCancel?: (() => void) | undefined;
}) => import("react/jsx-runtime").JSX.Element;
