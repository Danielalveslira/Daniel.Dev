"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SignatureFabric = exports.SignatureViewFabric = exports.SignatureSignedElement = void 0;
var tslib_1 = require("tslib");
var jsx_runtime_1 = require("react/jsx-runtime");
var styled_components_1 = require("styled-components");
var react_1 = require("react");
var runner_1 = require("@tripetto/runner");
var color_1 = require("../../color");
var pen_1 = require("../../icons/pen");
var warning_1 = require("../../icons/warning");
var clear_1 = require("../../icons/clear");
var button_1 = require("../button");
var SignatureElement = styled_components_1.styled.div(
    templateObject_1 ||
        (templateObject_1 = tslib_1.__makeTemplateObject(
            [
                "\n    outline: none;\n    box-sizing: border-box;\n    display: block;\n    width: 100%;\n    height: ",
                ";\n    position: relative;\n    overflow: hidden;\n    font-size: 1em;\n    line-height: 1.5em;\n    background-color: ",
                ";\n    background-image: ",
                ";\n    background-repeat: no-repeat;\n    background-size: ",
                "em;\n    background-position: right 0.375em top 0.375em;\n    border: ",
                ";\n    color: ",
                ";\n    border-radius: ",
                ";\n    margin: 0;\n    opacity: ",
                ";\n    transition:\n        color 0.15s ease-in-out,\n        background-color 0.15s ease-in-out,\n        border-color 0.15s ease-in-out,\n        box-shadow 0.15s ease-in-out,\n        opacity 0.15s ease-in-out;\n    cursor: default;\n\n    &:hover {\n        box-shadow: ",
                ";\n    }\n\n    &:focus {\n        background-color: ",
                ";\n        border-color: ",
                ";\n        color: ",
                ";\n        box-shadow: ",
                ";\n    }\n\n    > canvas {\n        position: absolute;\n        left: 0;\n        top: 0;\n        width: 1px;\n        height: 1px;\n        touch-action: none;\n\n        &:first-of-type {\n            pointer-events: none;\n            opacity: 0;\n        }\n\n        &:last-of-type {\n            cursor: ",
                ";\n            pointer-events: ",
                ";\n            opacity: ",
                ";\n            transition: opacity 0.3s;\n            filter: blur(0.5px);\n        }\n    }\n\n    > div {\n        position: absolute;\n        left: 0;\n        right: 0;\n        top: 0;\n        bottom: 0;\n        opacity: ",
                ";\n        pointer-events: ",
                ";\n        transition: opacity 0.3s;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n    }\n",
            ],
            [
                "\n    outline: none;\n    box-sizing: border-box;\n    display: block;\n    width: 100%;\n    height: ",
                ";\n    position: relative;\n    overflow: hidden;\n    font-size: 1em;\n    line-height: 1.5em;\n    background-color: ",
                ";\n    background-image: ",
                ";\n    background-repeat: no-repeat;\n    background-size: ",
                "em;\n    background-position: right 0.375em top 0.375em;\n    border: ",
                ";\n    color: ",
                ";\n    border-radius: ",
                ";\n    margin: 0;\n    opacity: ",
                ";\n    transition:\n        color 0.15s ease-in-out,\n        background-color 0.15s ease-in-out,\n        border-color 0.15s ease-in-out,\n        box-shadow 0.15s ease-in-out,\n        opacity 0.15s ease-in-out;\n    cursor: default;\n\n    &:hover {\n        box-shadow: ",
                ";\n    }\n\n    &:focus {\n        background-color: ",
                ";\n        border-color: ",
                ";\n        color: ",
                ";\n        box-shadow: ",
                ";\n    }\n\n    > canvas {\n        position: absolute;\n        left: 0;\n        top: 0;\n        width: 1px;\n        height: 1px;\n        touch-action: none;\n\n        &:first-of-type {\n            pointer-events: none;\n            opacity: 0;\n        }\n\n        &:last-of-type {\n            cursor: ",
                ";\n            pointer-events: ",
                ";\n            opacity: ",
                ";\n            transition: opacity 0.3s;\n            filter: blur(0.5px);\n        }\n    }\n\n    > div {\n        position: absolute;\n        left: 0;\n        right: 0;\n        top: 0;\n        bottom: 0;\n        opacity: ",
                ";\n        pointer-events: ",
                ";\n        transition: opacity 0.3s;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n    }\n",
            ]
        )),
    function (props) {
        return "".concat((props.$size === "sm" ? 9 : props.$size === "lg" ? 19 : 14) * props.$scale, "em");
    },
    function (props) {
        return (0, color_1.color)(props.$backgroundColor);
    },
    function (props) {
        return props.$error
            ? 'url("data:image/svg+xml;base64,'.concat(
                  (0, warning_1.warningIcon)(
                      (0, color_1.color)(props.$errorColor, function (o) {
                          return o.makeBlackOrWhite(props.$backgroundColor !== "transparent" && props.$borderColor === "transparent");
                      })
                  ),
                  '")'
              )
            : undefined;
    },
    8 / 7,
    function (props) {
        return ""
            .concat(props.$backgroundColor === "transparent" && props.$borderColor === "transparent" ? 0 : props.$borderSize, "px solid ")
            .concat(
                (0, color_1.color)(props.$borderColor && props.$borderColor !== "transparent" ? props.$borderColor : props.$backgroundColor)
            );
    },
    function (props) {
        return (0, color_1.color)(
            props.$textColor
                ? props.$textColor
                : props.$borderColor && props.$borderColor !== "transparent"
                ? props.$borderColor
                : (0, color_1.color)(props.$backgroundColor, function (o) {
                      return o.makeBlackOrWhite();
                  })
        );
    },
    function (props) {
        return (0, runner_1.isNumberFinite)(props.$roundness) ? "".concat(props.$roundness, "px") : "0.5em";
    },
    function (props) {
        return props.$disabled ? 0.65 : 1;
    },
    function (props) {
        return (
            (!props.$disabled &&
                (props.$backgroundColor !== "transparent" || props.$borderColor !== "transparent") &&
                "0 0 0 0.2rem ".concat(
                    (0, color_1.color)(
                        props.$borderColor && props.$borderColor !== "transparent" ? props.$borderColor : props.$backgroundColor,
                        function (o) {
                            return o.manipulate(function (m) {
                                return m.alpha(0.2);
                            });
                        }
                    )
                )) ||
            undefined
        );
    },
    function (props) {
        return (!props.$disabled && (0, color_1.color)(props.$backgroundColor)) || undefined;
    },
    function (props) {
        return (
            (!props.$disabled &&
                (0, color_1.color)(
                    props.$borderColor && props.$borderColor !== "transparent" ? props.$borderColor : props.$backgroundColor
                )) ||
            undefined
        );
    },
    function (props) {
        return (
            (!props.$disabled &&
                (0, color_1.color)(
                    props.$textColor
                        ? props.$textColor
                        : props.$borderColor && props.$borderColor !== "transparent"
                        ? props.$borderColor
                        : (0, color_1.color)(props.$backgroundColor, function (o) {
                              return o.makeBlackOrWhite();
                          })
                )) ||
            undefined
        );
    },
    function (props) {
        return (
            (!props.$disabled &&
                (props.$backgroundColor !== "transparent" || props.$borderColor !== "transparent") &&
                "0 0 0 0.2rem ".concat(
                    (0, color_1.color)(
                        props.$borderColor && props.$borderColor !== "transparent" ? props.$borderColor : props.$backgroundColor,
                        function (o) {
                            return o.manipulate(function (m) {
                                return m.alpha(0.5);
                            });
                        }
                    )
                )) ||
            undefined
        );
    },
    function (props) {
        return 'url("data:image/svg+xml;base64,'.concat(
            (0, pen_1.penIcon)(
                (0, color_1.color)(
                    props.$textColor
                        ? props.$textColor
                        : props.$borderColor && props.$borderColor !== "transparent"
                        ? props.$borderColor
                        : (0, color_1.color)(props.$backgroundColor, function (o) {
                              return o.makeBlackOrWhite();
                          })
                )
            ),
            '") 1 32, auto'
        );
    },
    function (props) {
        return !props.$disabled && props.$allowSign ? "auto" : "none";
    },
    function (props) {
        return props.$disabled || props.$processing ? 0.3 : 1;
    },
    function (props) {
        return !props.$disabled && !props.$allowSign ? 1 : 0;
    },
    function (props) {
        return props.$disabled || props.$allowSign ? "none" : "auto";
    }
);
var SignatureProgressElement = styled_components_1.styled.div(
    templateObject_2 ||
        (templateObject_2 = tslib_1.__makeTemplateObject(
            [
                "\n    position: absolute;\n    left: 0;\n    right: 0;\n    top: 0;\n    bottom: 0;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n\n    > div {\n        display: inline-block;\n        width: 80%;\n        max-width: 300px;\n        height: 16px;\n        background-color: ",
                ";\n        border-radius: 4px;\n        overflow: hidden;\n        margin-bottom: 0.375em;\n\n        > div {\n            width: 0%;\n            height: 16px;\n            background-color: ",
                ";\n            background-image: linear-gradient(\n                45deg,\n                ",
                " 25%,\n                transparent 25%,\n                transparent 50%,\n                ",
                " 50%,\n                ",
                " 75%,\n                transparent 75%,\n                transparent\n            );\n            background-size: 1rem 1rem;\n            transition: width 0.5s ease-out;\n        }\n    }\n\n    > span {\n        display: block;\n        text-align: center;\n        white-space: nowrap;\n    }\n",
            ],
            [
                "\n    position: absolute;\n    left: 0;\n    right: 0;\n    top: 0;\n    bottom: 0;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n\n    > div {\n        display: inline-block;\n        width: 80%;\n        max-width: 300px;\n        height: 16px;\n        background-color: ",
                ";\n        border-radius: 4px;\n        overflow: hidden;\n        margin-bottom: 0.375em;\n\n        > div {\n            width: 0%;\n            height: 16px;\n            background-color: ",
                ";\n            background-image: linear-gradient(\n                45deg,\n                ",
                " 25%,\n                transparent 25%,\n                transparent 50%,\n                ",
                " 50%,\n                ",
                " 75%,\n                transparent 75%,\n                transparent\n            );\n            background-size: 1rem 1rem;\n            transition: width 0.5s ease-out;\n        }\n    }\n\n    > span {\n        display: block;\n        text-align: center;\n        white-space: nowrap;\n    }\n",
            ]
        )),
    function (props) {
        return (0, color_1.color)(props.$color, function (o) {
            return o.manipulate(function (m) {
                return m.alpha(0.25);
            });
        });
    },
    function (props) {
        return (0, color_1.color)(props.$color);
    },
    function (props) {
        return (0, color_1.color)(props.$color, function (o) {
            return o.makeBlackOrWhite().manipulate(function (m) {
                return m.alpha(0.25);
            });
        });
    },
    function (props) {
        return (0, color_1.color)(props.$color, function (o) {
            return o.makeBlackOrWhite().manipulate(function (m) {
                return m.alpha(0.25);
            });
        });
    },
    function (props) {
        return (0, color_1.color)(props.$color, function (o) {
            return o.makeBlackOrWhite().manipulate(function (m) {
                return m.alpha(0.25);
            });
        });
    }
);
exports.SignatureSignedElement = styled_components_1.styled.div(
    templateObject_3 ||
        (templateObject_3 = tslib_1.__makeTemplateObject(
            [
                "\n    position: absolute;\n    right: 10px;\n    top: 10px;\n    display: flex;\n    align-items: center;\n\n    > span {\n        display: block;\n        margin-right: 10px;\n        white-space: nowrap;\n    }\n",
            ],
            [
                "\n    position: absolute;\n    right: 10px;\n    top: 10px;\n    display: flex;\n    align-items: center;\n\n    > span {\n        display: block;\n        margin-right: 10px;\n        white-space: nowrap;\n    }\n",
            ]
        ))
);
var SignatureViewFabric = function (props) {
    var _a = (0, react_1.useState)({
            loading: true,
            base64data: "",
        }),
        data = _a[0],
        setData = _a[1];
    (0, react_1.useEffect)(
        function () {
            if (!data.loading) {
                setData({
                    loading: true,
                    base64data: "",
                });
            }
            props.controller
                .download(props.service)
                .then(function (base64data) {
                    return setData({
                        loading: false,
                        base64data: base64data,
                    });
                })
                .catch(function () {
                    return setData({
                        loading: false,
                        base64data: "",
                    });
                });
        },
        [props.controller.signatureSlot.reference]
    );
    if (data.loading) {
        return (0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: props.loading });
    }
    return (
        (data.base64data &&
            (props.host
                ? (0, jsx_runtime_1.jsx)(props.host, { children: (0, jsx_runtime_1.jsx)("img", { src: data.base64data }) })
                : (0, jsx_runtime_1.jsx)("img", { src: data.base64data }))) ||
        (0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: props.error })
    );
};
exports.SignatureViewFabric = SignatureViewFabric;
var SignatureFabric = function (props) {
    var _a;
    var canvasRef = (0, react_1.useRef)();
    var bufferRef = (0, react_1.useRef)();
    var _b = (0, react_1.useState)(-1),
        progress = _b[0],
        setProgress = _b[1];
    var _c = (0, react_1.useState)(false),
        reset = _c[0],
        setReset = _c[1];
    var _d = (0, react_1.useState)(false),
        loading = _d[0],
        setLoading = _d[1];
    var propsRef = (0, react_1.useRef)();
    var allowSign = (0, react_1.useRef)(false);
    var signedRef = (0, react_1.useRef)(false);
    var colorRef = (0, react_1.useRef)("");
    var disabled = props.disabled || props.controller.signatureSlot.isFrozen || props.controller.signatureSlot.isLocked || false;
    var baseColor = props.styles.textColor
        ? props.styles.textColor
        : props.styles.borderColor && props.styles.borderColor !== "transparent"
        ? props.styles.borderColor
        : (0, color_1.color)(props.styles.backgroundColor || "transparent", function (o) {
              return o.makeBlackOrWhite();
          });
    colorRef.current = props.color || baseColor;
    var updateColor = function () {
        var canvas = canvasRef.current;
        if (canvas && canvas.width > 0 && canvas.height > 0) {
            var canvasCtx = canvas.getContext("2d");
            if (canvasCtx) {
                var signatureData = canvasCtx.getImageData(0, 0, canvas.width, canvas.height);
                var color_2 = (0, color_1.getColor)(colorRef.current);
                for (var i = 0; i < signatureData.data.length; i += 4) {
                    if (signatureData.data[i + 3] !== 0) {
                        signatureData.data[i] = color_2.red();
                        signatureData.data[i + 1] = color_2.green();
                        signatureData.data[i + 2] = color_2.blue();
                    }
                }
                canvasCtx.putImageData(signatureData, 0, 0);
            }
        }
    };
    var handleReset = function () {
        if (props.controller.signatureSlot.hasValue && progress === -1) {
            setReset(true);
            props.controller
                .delete(props.service)
                .then(function () {
                    var _a;
                    var canvas = canvasRef.current;
                    if (canvas) {
                        (_a = canvas.getContext("2d")) === null || _a === void 0 ? void 0 : _a.clearRect(0, 0, canvas.width, canvas.height);
                    }
                    setReset(false);
                })
                .catch(function () {
                    return setReset(false);
                });
        }
    };
    (0, react_1.useEffect)(function () {
        var _a;
        if (!canvasRef.current) {
            return;
        }
        var parentRect = (_a = canvasRef.current.parentElement) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect();
        if (!parentRect) {
            return;
        }
        var drawing = false;
        var waiting = 0;
        var canvas = canvasRef.current;
        var canvasCtx = canvas.getContext("2d", { willReadFrequently: true });
        var scale = 2;
        var resizeObserver =
            "ResizeObserver" in window &&
            new ResizeObserver(function () {
                var computedStyles = getComputedStyle(canvas.parentElement);
                var width = (0, runner_1.castToNumber)(computedStyles.width);
                var height = (0, runner_1.castToNumber)(computedStyles.height);
                if (width > 0 && height > 0 && (width * scale !== canvas.width || height * scale !== canvas.height)) {
                    var buffer =
                        (canvas.width > 0 &&
                            canvas.height > 0 &&
                            (canvasCtx === null || canvasCtx === void 0
                                ? void 0
                                : canvasCtx.getImageData(0, 0, canvas.width, canvas.height))) ||
                        undefined;
                    canvas.style.width = "".concat(width, "px");
                    canvas.style.height = "".concat(height, "px");
                    canvas.width = width * scale;
                    canvas.height = height * scale;
                    if (buffer) {
                        canvasCtx === null || canvasCtx === void 0 ? void 0 : canvasCtx.putImageData(buffer, 0, 0);
                    }
                }
            });
        canvas.style.width = "".concat(parentRect.width, "px");
        canvas.style.height = "".concat(parentRect.height, "px");
        canvas.width = parentRect.width * scale;
        canvas.height = parentRect.height * scale;
        if (!canvasCtx) {
            return;
        }
        var startSignature = function (event) {
            var _a;
            var rect = event.target.getBoundingClientRect();
            if (waiting) {
                clearTimeout(waiting);
                waiting = 0;
            }
            if (!allowSign.current || canvas.width < 1 || canvas.height < 1) {
                drawing = false;
                return;
            }
            canvasCtx.lineWidth = 3 * scale;
            canvasCtx.lineJoin = canvasCtx.lineCap = "round";
            canvasCtx.imageSmoothingQuality = "high";
            canvasCtx.strokeStyle = (0, color_1.color)(colorRef.current);
            canvasCtx.beginPath();
            canvasCtx.moveTo((event.clientX - rect.x) * scale, (event.clientY - rect.y) * scale);
            drawing = true;
            (_a = canvas.parentElement) === null || _a === void 0 ? void 0 : _a.focus();
        };
        var drawSignature = function (event) {
            if (event.target && drawing && allowSign.current) {
                var rect = event.target.getBoundingClientRect();
                if (waiting) {
                    clearTimeout(waiting);
                    waiting = 0;
                }
                var x = (event.clientX - rect.x) * scale;
                var y = (event.clientY - rect.y) * scale;
                canvasCtx.lineTo(x, y);
                canvasCtx.stroke();
            }
            event.preventDefault();
            event.stopPropagation();
        };
        var endSignature = function () {
            drawing = false;
            if (waiting) {
                clearTimeout(waiting);
            }
            waiting = setTimeout(function () {
                var buffer = bufferRef.current;
                setProgress(0);
                if (buffer && canvas.width > 0 && canvas.height > 0) {
                    var bufferCtx = buffer.getContext("2d");
                    if (bufferCtx) {
                        var signatureData = canvasCtx.getImageData(0, 0, canvas.width, canvas.height);
                        var x1 = -1;
                        var y1 = -1;
                        var x2 = 0;
                        var y2 = 0;
                        for (var i = 0; i < signatureData.data.length; i += 4) {
                            if (signatureData.data[i + 3] !== 0) {
                                var x = (i / 4) % canvas.width;
                                var y = runner_1.Num.floor(i / 4 / canvas.width);
                                signatureData.data[i] = 0;
                                signatureData.data[i + 1] = 0;
                                signatureData.data[i + 2] = 0;
                                if (x1 === -1 || x < x1) {
                                    x1 = x;
                                }
                                if (y1 === -1 || y < y1) {
                                    y1 = y;
                                }
                                if (x > x2) {
                                    x2 = x;
                                }
                                if (y > y2) {
                                    y2 = y;
                                }
                            }
                        }
                        var width = x2 - x1;
                        var height = y2 - y1;
                        if (x1 >= 0 && y1 >= 0 && width > 0 && height > 0) {
                            var bufferData = canvasCtx.getImageData(x1, y1, width, height);
                            for (var i = 0; i < bufferData.data.length; i += 4) {
                                if (bufferData.data[i + 3] !== 0) {
                                    bufferData.data[i] = 0;
                                    bufferData.data[i + 1] = 0;
                                    bufferData.data[i + 2] = 0;
                                }
                            }
                            buffer.width = runner_1.Num.min(width + 50, canvas.width);
                            buffer.height = runner_1.Num.min(height + 50, canvas.height);
                            bufferCtx.clearRect(0, 0, buffer.width, buffer.height);
                            bufferCtx.putImageData(bufferData, (buffer.width - width) / 2, (buffer.height - height) / 2);
                            signedRef.current = true;
                            buffer.toBlob(function (blob) {
                                if (blob && propsRef.current) {
                                    var dataTransfer = new DataTransfer();
                                    dataTransfer.items.add(
                                        new File([blob], "signature-".concat(runner_1.DateTime.format("yyyyMMddHHmmss"), ".png"), {
                                            type: "image/png",
                                            lastModified: new Date().getTime(),
                                        })
                                    );
                                    propsRef.current.controller
                                        .upload(dataTransfer.files, propsRef.current.service, function (percent) {
                                            return setProgress(runner_1.Num.floor(percent));
                                        })
                                        .then(function () {
                                            return setProgress(-1);
                                        })
                                        .catch(function () {
                                            return setProgress(-1);
                                        });
                                }
                            }, "image/png");
                        } else {
                            setProgress(-1);
                        }
                    }
                }
                waiting = 0;
            }, 1500);
        };
        canvas.addEventListener("pointerdown", startSignature);
        canvas.addEventListener("pointermove", drawSignature);
        canvas.addEventListener("pointerup", endSignature);
        if (resizeObserver && canvas.parentElement) {
            resizeObserver.observe(canvas.parentElement);
        }
        return function () {
            if (resizeObserver) {
                resizeObserver.disconnect();
            }
            canvas.removeEventListener("pointerdown", startSignature);
            canvas.removeEventListener("pointermove", drawSignature);
            canvas.removeEventListener("pointerup", endSignature);
        };
    }, []);
    (0, react_1.useEffect)(
        function () {
            if (props.controller.signatureSlot.hasValue && progress === -1 && !loading && !signedRef.current) {
                setLoading(true);
                props.controller
                    .download(props.service)
                    .then(function (base64data) {
                        if (base64data) {
                            var buffer_1 = new Image();
                            buffer_1.onload = function () {
                                var canvas = canvasRef.current;
                                if (canvas) {
                                    var ctx = canvas.getContext("2d");
                                    if (ctx) {
                                        ctx.clearRect(0, 0, canvas.width, canvas.height);
                                        ctx.drawImage(
                                            buffer_1,
                                            runner_1.Num.min(50, runner_1.Num.max(canvas.width - buffer_1.width, 0)),
                                            runner_1.Num.max(canvas.height - buffer_1.height, 0) / 2
                                        );
                                        updateColor();
                                    }
                                }
                            };
                            buffer_1.src = base64data;
                        }
                        setLoading(false);
                    })
                    .catch(function () {
                        return setLoading(false);
                    });
            }
        },
        [props.controller.signatureSlot.reference]
    );
    (0, react_1.useEffect)(
        function () {
            return updateColor();
        },
        [colorRef.current]
    );
    propsRef.current = props;
    allowSign.current = !loading && !reset && progress === -1 && !props.controller.signatureSlot.hasValue;
    return (0, jsx_runtime_1.jsxs)(SignatureElement, {
        ref: props.onAutoFocus,
        tabIndex: props.tabIndex || 0,
        onFocus: props.onFocus,
        onBlur: props.onBlur,
        $backgroundColor: props.styles.backgroundColor || "transparent",
        $borderColor: props.styles.borderColor || "transparent",
        $borderSize: props.styles.borderSize || 1,
        $roundness: props.styles.roundness,
        $textColor: props.styles.textColor,
        $errorColor: props.styles.errorColor,
        $error: props.error || false,
        $scale: props.styles.scale || 1,
        $disabled: disabled,
        $allowSign: allowSign.current,
        $size: props.size || "md",
        $processing: progress !== -1,
        children: [
            (0, jsx_runtime_1.jsx)("canvas", {
                ref: function (c) {
                    return (bufferRef.current = c);
                },
                width: "1",
                height: "1",
            }),
            (0, jsx_runtime_1.jsx)("canvas", {
                ref: function (c) {
                    return (canvasRef.current = c);
                },
                width: "1",
                height: "1",
            }),
            (0, jsx_runtime_1.jsx)("div", {
                children:
                    progress !== -1
                        ? (0, jsx_runtime_1.jsxs)(SignatureProgressElement, {
                              $color: baseColor,
                              children: [
                                  (0, jsx_runtime_1.jsx)("div", {
                                      children: (0, jsx_runtime_1.jsx)("div", {
                                          style: {
                                              width: "".concat(runner_1.Num.range(progress, 0, 100), "%"),
                                          },
                                      }),
                                  }),
                                  (0, jsx_runtime_1.jsx)("span", {
                                      children: props.labels("processing", "".concat(runner_1.Num.range(progress, 0, 100), "%")),
                                  }),
                              ],
                          })
                        : (0, jsx_runtime_1.jsxs)(exports.SignatureSignedElement, {
                              children: [
                                  (props.controller.signatureSlot.hasValue &&
                                      (props.controller.signatureSlot.time || 0) > 0 &&
                                      (0, jsx_runtime_1.jsx)("span", {
                                          children: props.labels(
                                              "signed",
                                              (
                                                  ((_a = props.l10n) === null || _a === void 0 ? void 0 : _a.locale) ||
                                                  runner_1.L10n.Locales
                                              ).dateLong(props.controller.signatureSlot.time)
                                          ),
                                      })) ||
                                      undefined,
                                  (0, jsx_runtime_1.jsx)(button_1.ButtonFabric, {
                                      styles: {
                                          baseColor: baseColor,
                                          mode: "outline",
                                      },
                                      tabIndex: props.tabIndex || 0,
                                      label: props.labels("clear", ""),
                                      icon: clear_1.clearIcon,
                                      disabled: reset,
                                      onClick: handleReset,
                                  }),
                              ],
                          }),
            }),
        ],
    });
};
exports.SignatureFabric = SignatureFabric;
var templateObject_1, templateObject_2, templateObject_3;
