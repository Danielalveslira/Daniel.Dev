"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ButtonFabric = void 0;
var tslib_1 = require("tslib");
var jsx_runtime_1 = require("react/jsx-runtime");
var styled_components_1 = require("styled-components");
var runner_1 = require("@tripetto/runner");
var color_1 = require("../../color");
var ButtonElement = styled_components_1.styled.button(
    templateObject_1 ||
        (templateObject_1 = tslib_1.__makeTemplateObject(
            [
                "\n    appearance: none;\n    font-size: 1em;\n    line-height: 1.5em;\n    outline: none;\n    user-select: none;\n    box-sizing: border-box;\n    background-color: ",
                ";\n    border: ",
                ";\n    border-left: ",
                ";\n    color: ",
                ";\n    text-align: left;\n    border-radius: ",
                ";\n    border-top-left-radius: ",
                ";\n    border-bottom-left-radius: ",
                ";\n    border-top-right-radius: ",
                ";\n    border-bottom-right-radius: ",
                ";\n    width: ",
                ";\n    overflow: ",
                ";\n    padding: ",
                ";\n    padding-top: ",
                ";\n    padding-bottom: ",
                ";\n    margin: 0;\n    opacity: ",
                ";\n    transition:\n        color 0.15s ease-in-out,\n        background-color 0.15s ease-in-out,\n        border-color 0.15s ease-in-out,\n        box-shadow 0.15s ease-in-out,\n        opacity 0.15s ease-in-out;\n\n    @media (max-device-width: 500px) {\n        width: ",
                ";\n    }\n\n    @media (max-width: 500px) {\n        width: ",
                ";\n    }\n\n    > div {\n        display: flex;\n        width: ",
                ";\n        height: ",
                ";\n        min-width: 100%;\n        background-repeat: no-repeat;\n        background-size: cover;\n        background-position: center center;\n        justify-content: center;\n        align-items: center;\n        overflow: hidden;\n        white-space: nowrap;\n\n        > span {\n            font-size: ",
                ";\n        }\n\n        @media (max-device-width: 500px) {\n            width: ",
                ";\n            height: ",
                ";\n\n            > span {\n                font-size: ",
                ";\n            }\n        }\n\n        @media (max-width: 500px) {\n            width: ",
                ";\n            height: ",
                ";\n\n            > span {\n                font-size: ",
                ";\n            }\n        }\n    }\n\n    > span {\n        display: block;\n\n        > span {\n            display: table-cell;\n\n            > small {\n                display: block;\n                font-size: 0.8em;\n                opacity: 0.8;\n            }\n\n            > svg {\n                width: 1em;\n                height: 1em;\n                position: relative;\n                top: ",
                ";\n                margin-left: ",
                ";\n                margin-right: ",
                ";\n                overflow: hidden;\n                vertical-align: middle;\n\n                path {\n                    fill: ",
                ";\n                    transition: fill 0.15s ease-in-out;\n                }\n            }\n        }\n    }\n\n    > div + span {\n        display: flex;\n        justify-content: center;\n        margin-top: ",
                ";\n        text-align: center;\n    }\n\n    &:not(:disabled) {\n        cursor: pointer;\n        opacity: 1;\n\n        &:hover {\n            background-color: ",
                ";\n            border-color: ",
                ";\n            color: ",
                ";\n            box-shadow: 0 0 0 0.2rem ",
                ";\n\n            svg {\n                path {\n                    fill: ",
                ";\n                }\n            }\n        }\n\n        &:focus {\n            box-shadow: 0 0 0 0.2rem ",
                ";\n        }\n\n        &:active {\n            box-shadow: 0 0 0 0.2rem ",
                ";\n            background-color: ",
                ";\n        }\n    }\n",
            ],
            [
                "\n    appearance: none;\n    font-size: 1em;\n    line-height: 1.5em;\n    outline: none;\n    user-select: none;\n    box-sizing: border-box;\n    background-color: ",
                ";\n    border: ",
                ";\n    border-left: ",
                ";\n    color: ",
                ";\n    text-align: left;\n    border-radius: ",
                ";\n    border-top-left-radius: ",
                ";\n    border-bottom-left-radius: ",
                ";\n    border-top-right-radius: ",
                ";\n    border-bottom-right-radius: ",
                ";\n    width: ",
                ";\n    overflow: ",
                ";\n    padding: ",
                ";\n    padding-top: ",
                ";\n    padding-bottom: ",
                ";\n    margin: 0;\n    opacity: ",
                ";\n    transition:\n        color 0.15s ease-in-out,\n        background-color 0.15s ease-in-out,\n        border-color 0.15s ease-in-out,\n        box-shadow 0.15s ease-in-out,\n        opacity 0.15s ease-in-out;\n\n    @media (max-device-width: 500px) {\n        width: ",
                ";\n    }\n\n    @media (max-width: 500px) {\n        width: ",
                ";\n    }\n\n    > div {\n        display: flex;\n        width: ",
                ";\n        height: ",
                ";\n        min-width: 100%;\n        background-repeat: no-repeat;\n        background-size: cover;\n        background-position: center center;\n        justify-content: center;\n        align-items: center;\n        overflow: hidden;\n        white-space: nowrap;\n\n        > span {\n            font-size: ",
                ";\n        }\n\n        @media (max-device-width: 500px) {\n            width: ",
                ";\n            height: ",
                ";\n\n            > span {\n                font-size: ",
                ";\n            }\n        }\n\n        @media (max-width: 500px) {\n            width: ",
                ";\n            height: ",
                ";\n\n            > span {\n                font-size: ",
                ";\n            }\n        }\n    }\n\n    > span {\n        display: block;\n\n        > span {\n            display: table-cell;\n\n            > small {\n                display: block;\n                font-size: 0.8em;\n                opacity: 0.8;\n            }\n\n            > svg {\n                width: 1em;\n                height: 1em;\n                position: relative;\n                top: ",
                ";\n                margin-left: ",
                ";\n                margin-right: ",
                ";\n                overflow: hidden;\n                vertical-align: middle;\n\n                path {\n                    fill: ",
                ";\n                    transition: fill 0.15s ease-in-out;\n                }\n            }\n        }\n    }\n\n    > div + span {\n        display: flex;\n        justify-content: center;\n        margin-top: ",
                ";\n        text-align: center;\n    }\n\n    &:not(:disabled) {\n        cursor: pointer;\n        opacity: 1;\n\n        &:hover {\n            background-color: ",
                ";\n            border-color: ",
                ";\n            color: ",
                ";\n            box-shadow: 0 0 0 0.2rem ",
                ";\n\n            svg {\n                path {\n                    fill: ",
                ";\n                }\n            }\n        }\n\n        &:focus {\n            box-shadow: 0 0 0 0.2rem ",
                ";\n        }\n\n        &:active {\n            box-shadow: 0 0 0 0.2rem ",
                ";\n            background-color: ",
                ";\n        }\n    }\n",
            ]
        )),
    function (props) {
        return (props.$mode === "fill" && (0, color_1.color)(props.$baseColor)) || "transparent";
    },
    function (props) {
        return "".concat(props.$outlineSize, "px solid ").concat(
            (0, color_1.color)(props.$baseColor, function (o) {
                return o.manipulate(function (m) {
                    return m.darken(0.1);
                }, props.$mode === "fill");
            })
        );
    },
    function (props) {
        return props.$group === "middle" || props.$group === "end" ? "none" : undefined;
    },
    function (props) {
        return (0, color_1.color)(props.$textColor || props.$baseColor, function (o) {
            return o.makeBlackOrWhite(!props.$textColor && props.$mode === "fill");
        });
    },
    function (props) {
        return (0, runner_1.isNumberFinite)(props.$roundness) ? "".concat(props.$roundness, "px") : "0.5em";
    },
    function (props) {
        return (props.$group && props.$group !== "start" && "0") || undefined;
    },
    function (props) {
        return (props.$group && props.$group !== "start" && "0") || undefined;
    },
    function (props) {
        return (props.$group && props.$group !== "end" && "0") || undefined;
    },
    function (props) {
        return (props.$group && props.$group !== "end" && "0") || undefined;
    },
    function (props) {
        return props.$isImage && "calc(".concat(props.$size === "small" ? 75 : props.$size === "large" ? 300 : 150, "px + 1.5em)");
    },
    function (props) {
        return (props.$isImage && "hidden") || undefined;
    },
    function (props) {
        return "".concat(0.375 * props.$scale, "em 0.75em");
    },
    function (props) {
        return (props.$isImage && "0.75em") || undefined;
    },
    function (props) {
        return (props.$isImage && !props.$hasLabel && "0.75em") || undefined;
    },
    function (props) {
        return props.$mode === "outline" ? 0.2 : 0.4;
    },
    function (props) {
        return props.$isImage && "calc(".concat(props.$size === "small" ? 75 : props.$size === "large" ? 280 : 120, "px + 1.5em)");
    },
    function (props) {
        return props.$isImage && "calc(".concat(props.$size === "small" ? 75 : props.$size === "large" ? 240 : 120, "px + 1.5em)");
    },
    function (props) {
        return "".concat(props.$size === "small" ? 75 : props.$size === "large" ? 300 : 150, "px");
    },
    function (props) {
        return "".concat(props.$size === "small" ? 75 : props.$size === "large" ? 300 : 150, "px");
    },
    function (props) {
        return "".concat(props.$size === "small" ? 40 : props.$size === "large" ? 160 : 80, "px");
    },
    function (props) {
        return "".concat(props.$size === "small" ? 75 : props.$size === "large" ? 240 : 120, "px");
    },
    function (props) {
        return "".concat(props.$size === "small" ? 75 : props.$size === "large" ? 240 : 120, "px");
    },
    function (props) {
        return "".concat(props.$size === "small" ? 40 : props.$size === "large" ? 136 : 68, "px");
    },
    function (props) {
        return "".concat(props.$size === "small" ? 75 : props.$size === "large" ? 240 : 120, "px");
    },
    function (props) {
        return "".concat(props.$size === "small" ? 75 : props.$size === "large" ? 240 : 120, "px");
    },
    function (props) {
        return "".concat(props.$size === "small" ? 40 : props.$size === "large" ? 136 : 68, "px");
    },
    function (props) {
        return props.$iconPosition !== "solo" && "-2px";
    },
    function (props) {
        return props.$iconPosition === "right" && "0.5em";
    },
    function (props) {
        return props.$iconPosition === "left" && "0.5em";
    },
    function (props) {
        return (0, color_1.color)(props.$textColor || props.$baseColor, function (o) {
            return o.makeBlackOrWhite(!props.$textColor && props.$mode === "fill");
        });
    },
    function (props) {
        return "".concat(0.375 * props.$scale, "em");
    },
    function (props) {
        return (
            (props.$hover === "fill" &&
                (0, color_1.color)(props.$baseColor, function (o) {
                    return o.manipulate(function (m) {
                        return m.darken(0.05);
                    }, props.$mode === "fill");
                })) ||
            undefined
        );
    },
    function (props) {
        return (
            (props.$hover === "fill" &&
                (0, color_1.color)(props.$baseColor, function (o) {
                    return o.manipulate(function (m) {
                        return m.darken(0.1);
                    }, props.$mode === "fill");
                })) ||
            undefined
        );
    },
    function (props) {
        return (
            (props.$mode === "outline" &&
                props.$hover === "fill" &&
                (0, color_1.color)(props.$baseColor, function (o) {
                    return o.makeBlackOrWhite();
                })) ||
            undefined
        );
    },
    function (props) {
        return (0, color_1.color)(props.$baseColor, function (o) {
            return o.manipulate(function (m) {
                return m.alpha(0.2);
            });
        });
    },
    function (props) {
        return (
            (props.$mode === "outline" &&
                props.$hover === "fill" &&
                (0, color_1.color)(props.$baseColor, function (o) {
                    return o.makeBlackOrWhite();
                })) ||
            undefined
        );
    },
    function (props) {
        return (0, color_1.color)(props.$baseColor, function (o) {
            return o.manipulate(function (m) {
                return m.alpha(0.5);
            });
        });
    },
    function (props) {
        return (0, color_1.color)(props.$baseColor, function (o) {
            return o.manipulate(function (m) {
                return m.alpha(0.5);
            });
        });
    },
    function (props) {
        return (
            props.$hover === "fill" &&
            (0, color_1.color)(props.$baseColor, function (o) {
                return o.manipulate(function (m) {
                    return m.darken(0.15);
                });
            })
        );
    }
);
var ButtonFabric = function (props) {
    var iconPosition = !props.label ? "solo" : props.iconPosition || "left";
    var disabled = props.disabled || (!props.onClick && !props.hyperlink);
    return (0, jsx_runtime_1.jsxs)(ButtonElement, {
        ref: props.onAutoFocus,
        type: "button",
        disabled: disabled,
        tabIndex: props.tabIndex,
        "aria-describedby": props.ariaDescribedBy,
        onFocus: props.onFocus,
        onBlur: props.onBlur,
        onKeyDown: function (e) {
            if (props.onTab && e.key === "Tab" && !e.shiftKey) {
                e.preventDefault();
                props.onTab();
                return;
            }
            if (props.onCancel && e.key === "Tab" && e.shiftKey) {
                e.preventDefault();
                props.onCancel();
                return;
            }
            if (props.onKeyDown) {
                props.onKeyDown(e);
            }
        },
        onClick: function (e) {
            e.stopPropagation();
            if (props.hyperlink) {
                window.open(props.hyperlink.url, "_".concat(props.hyperlink.target || "self"), "noopener");
            } else if (props.onClick) {
                props.onClick();
            }
        },
        $baseColor: props.styles.baseColor,
        $textColor: props.styles.textColor,
        $outlineSize: props.styles.outlineSize || 1,
        $roundness: props.styles.roundness,
        $mode: props.styles.mode || "fill",
        $hover: props.styles.hover || "fill",
        $iconPosition: iconPosition,
        $scale: props.styles.scale || 1,
        $group: props.styles.group,
        $hasLabel: props.icon || props.label ? true : false,
        $isImage: props.image || props.emoji ? true : false,
        $size: props.size || "medium",
        children: [
            (props.image || props.emoji) &&
                (0, jsx_runtime_1.jsx)("div", {
                    style: {
                        backgroundImage: (props.image && 'url("'.concat(props.image, '")')) || undefined,
                    },
                    children: props.emoji && (0, jsx_runtime_1.jsx)("span", { children: props.emoji }),
                }),
            (props.icon || props.label) &&
                (0, jsx_runtime_1.jsxs)("span", {
                    children: [
                        props.icon && iconPosition !== "right" && (0, jsx_runtime_1.jsx)("span", { children: props.icon }),
                        props.label &&
                            (0, jsx_runtime_1.jsxs)("span", {
                                children: [
                                    props.label,
                                    props.description && (0, jsx_runtime_1.jsx)("small", { children: props.description }),
                                ],
                            }),
                        props.icon && iconPosition === "right" && (0, jsx_runtime_1.jsx)("span", { children: props.icon }),
                    ],
                }),
        ],
    });
};
exports.ButtonFabric = ButtonFabric;
var templateObject_1;
