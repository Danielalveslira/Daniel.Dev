"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScaleFabric = void 0;
var tslib_1 = require("tslib");
var jsx_runtime_1 = require("react/jsx-runtime");
var styled_components_1 = require("styled-components");
var react_1 = require("react");
var runner_1 = require("@tripetto/runner");
var helpers_1 = require("../helpers");
var button_1 = require("../button");
var const_1 = require("../const");
var ScaleElement = styled_components_1.styled.div(
    templateObject_1 ||
        (templateObject_1 = tslib_1.__makeTemplateObject(
            [
                "\n    display: block;\n    width: 100%;\n\n    > div {\n        max-width: calc(100% + 0.4rem);\n        overflow-x: scroll;\n        -ms-overflow-style: none;\n        -webkit-overflow-scrolling: touch;\n        scrollbar-width: none;\n        padding: 0.2rem;\n        margin -0.2rem;\n\n        &::-webkit-scrollbar {\n            display: none;\n        }\n\n        > div {\n            display: inline-block;\n            white-space: nowrap;\n            min-width: ",
                ";\n\n            @media (max-device-width: 500px) {\n                min-width: 100%;\n            }\n\n            @media (max-width: 500px) {\n                min-width: 100%;\n            }\n\n            > div {\n                display: flex;\n                flex-wrap: nowrap;\n\n                > button {\n                    flex-grow: ",
                ";\n                    min-width: ",
                ";\n\n                    @media (max-device-width: 500px) {\n                        min-width: auto;\n                        flex-grow: 1;\n                        padding-left: 0.55em;\n                        padding-right: 0.55em;\n                    }\n\n                    @media (max-width: 500px) {\n                        min-width: auto;\n                        flex-grow: 1;\n                        padding-left: 0.55em;\n                        padding-right: 0.55em;\n                    }\n\n                    > span > span {\n                        display: flex;\n                        align-content: center;\n                        justify-content: center;\n                    }\n                }\n            }\n        }\n    }\n",
            ],
            [
                "\n    display: block;\n    width: 100%;\n\n    > div {\n        max-width: calc(100% + 0.4rem);\n        overflow-x: scroll;\n        -ms-overflow-style: none;\n        -webkit-overflow-scrolling: touch;\n        scrollbar-width: none;\n        padding: 0.2rem;\n        margin -0.2rem;\n\n        &::-webkit-scrollbar {\n            display: none;\n        }\n\n        > div {\n            display: inline-block;\n            white-space: nowrap;\n            min-width: ",
                ";\n\n            @media (max-device-width: 500px) {\n                min-width: 100%;\n            }\n\n            @media (max-width: 500px) {\n                min-width: 100%;\n            }\n\n            > div {\n                display: flex;\n                flex-wrap: nowrap;\n\n                > button {\n                    flex-grow: ",
                ";\n                    min-width: ",
                ";\n\n                    @media (max-device-width: 500px) {\n                        min-width: auto;\n                        flex-grow: 1;\n                        padding-left: 0.55em;\n                        padding-right: 0.55em;\n                    }\n\n                    @media (max-width: 500px) {\n                        min-width: auto;\n                        flex-grow: 1;\n                        padding-left: 0.55em;\n                        padding-right: 0.55em;\n                    }\n\n                    > span > span {\n                        display: flex;\n                        align-content: center;\n                        justify-content: center;\n                    }\n                }\n            }\n        }\n    }\n",
            ]
        )),
    function (props) {
        return (props.$justify && "100%") || undefined;
    },
    function (props) {
        return (props.$justify && "1") || undefined;
    },
    function (props) {
        return (!props.$justify && "3em") || undefined;
    }
);
var ScaleLabelsElement = styled_components_1.styled.div(
    templateObject_2 ||
        (templateObject_2 = tslib_1.__makeTemplateObject(
            [
                "\n    display: flex;\n    flex-direction: row;\n    padding-top: 0.1em;\n\n    > small {\n        flex: 1 1 0%;\n        font-size: 0.8em;\n        color: ",
                ";\n\n        &:first-child {\n            text-align: left;\n        }\n\n        &:nth-child(2) {\n            text-align: center;\n        }\n\n        &:last-child {\n            text-align: right;\n        }\n    }\n",
            ],
            [
                "\n    display: flex;\n    flex-direction: row;\n    padding-top: 0.1em;\n\n    > small {\n        flex: 1 1 0%;\n        font-size: 0.8em;\n        color: ",
                ";\n\n        &:first-child {\n            text-align: left;\n        }\n\n        &:nth-child(2) {\n            text-align: center;\n        }\n\n        &:last-child {\n            text-align: right;\n        }\n    }\n",
            ]
        )),
    function (props) {
        return props.$labelColor;
    }
);
var assertValue = function (valueRef, options, reference) {
    if ((0, runner_1.isArray)(options)) {
        var selected = (0, runner_1.findFirst)(options, function (option) {
            return option.id === reference;
        });
        if (valueRef.reference !== (selected === null || selected === void 0 ? void 0 : selected.id)) {
            valueRef.set(
                selected && (selected.value || selected.name),
                selected === null || selected === void 0 ? void 0 : selected.id,
                selected === null || selected === void 0 ? void 0 : selected.name
            );
        }
        return (selected && selected.id) || "";
    } else if ((0, runner_1.isNumberFinite)(reference) && options) {
        var value = runner_1.Num.range(reference, runner_1.Num.min(options.from, options.to), runner_1.Num.max(options.from, options.to));
        valueRef.set(value);
        return value;
    }
    valueRef.clear();
    return undefined;
};
var ScaleFabric = function (props) {
    var valueRef = props.value;
    var debounceRef = (0, react_1.useRef)(0);
    var _a = (0, react_1.useState)((typeof valueRef !== "object" && valueRef) || undefined),
        proxy = _a[0],
        setProxy = _a[1];
    var _b =
            typeof valueRef === "object"
                ? [
                      debounceRef.current !== 0
                          ? proxy
                          : assertValue(
                                valueRef,
                                props.options,
                                (0, runner_1.isArray)(props.options)
                                    ? valueRef.reference
                                    : (0, runner_1.isNumberFinite)(valueRef.pristine)
                                    ? valueRef.pristine
                                    : undefined
                            ),
                      function (val, submit) {
                          (0, runner_1.cancelUITimeout)(debounceRef.current);
                          setProxy(val);
                          debounceRef.current = (0, runner_1.scheduleUITimeout)(function () {
                              debounceRef.current = 0;
                              assertValue(valueRef, props.options, val);
                              if (submit && props.autoSubmit && val !== undefined) {
                                  (0, helpers_1.handleAutoSubmit)(autoSubmit);
                              }
                          }, const_1.DEBOUNCE_NORMAL);
                      },
                  ]
                : [proxy, setProxy],
        value = _b[0],
        setValue = _b[1];
    var autoSubmit = (0, react_1.useRef)({
        id: 0,
        cb: props.onSubmit,
    });
    var changeValue = function (val, submit) {
        if (autoSubmit.current.id) {
            clearTimeout(autoSubmit.current.id);
            autoSubmit.current.id = 0;
        }
        setValue(val, submit);
        if (props.onChange) {
            props.onChange(val);
        }
        if (submit && props.autoSubmit && val !== undefined) {
            (0, helpers_1.handleAutoSubmit)(autoSubmit);
        }
    };
    var buttons = [];
    var handleKeyDown = function (index, action) {
        return function (e) {
            if (e.shiftKey && e.key === "Enter" && props.onSubmit) {
                e.preventDefault();
                props.onSubmit();
            } else if (e.key === "Escape") {
                e.currentTarget.blur();
            } else if (e.key === "Tab") {
                if (e.shiftKey) {
                    if (props.onCancel && index === 0) {
                        e.preventDefault();
                        props.onCancel();
                    }
                } else if (props.onSubmit && index + 1 === buttons.length) {
                    e.preventDefault();
                    props.onSubmit();
                }
            } else if (action) {
                if (e.key === "-" || e.key === "+") {
                    action(e.key);
                } else {
                    var n = e.key.length === 1 ? e.key.charCodeAt(0) - 48 : -1;
                    if (n >= 0 && n <= 9) {
                        action(n);
                    }
                }
            }
        };
    };
    (0, react_1.useEffect)(function () {
        return function () {
            (0, runner_1.cancelUITimeout)(debounceRef.current);
        };
    }, []);
    autoSubmit.current.cb = props.onSubmit;
    if ((0, runner_1.isArray)(props.options)) {
        var options =
            props.view === "preview"
                ? props.options
                : props.options.filter(function (option) {
                      return option.name ? true : false;
                  });
        var count_1 = options.length;
        buttons = options.map(function (option, index) {
            return (0, jsx_runtime_1.jsx)(
                button_1.ButtonFabric,
                {
                    styles: {
                        baseColor: props.styles.color,
                        mode: value === option.id ? "fill" : "outline",
                        hover: "outline",
                        outlineSize: props.styles.outlineSize,
                        roundness: props.styles.roundness,
                        scale: props.styles.scale,
                        group: count_1 > 1 ? (index === 0 ? "start" : index + 1 === count_1 ? "end" : "middle") : undefined,
                    },
                    label: option.name || "...",
                    tabIndex: props.tabIndex,
                    ariaDescribedBy: props.ariaDescribedBy,
                    disabled:
                        props.disabled ||
                        props.readOnly ||
                        (typeof valueRef === "object" && (valueRef.isFrozen || valueRef.isLocked)) ||
                        false,
                    onAutoFocus: (((!value && index === 0) || value === option.id) && props.onAutoFocus) || undefined,
                    onFocus: props.onFocus,
                    onBlur: props.onBlur,
                    onKeyDown: handleKeyDown(index),
                    onClick: function () {
                        return changeValue(props.required || value !== option.id ? option.id : undefined, true);
                    },
                },
                index
            );
        });
    } else if (props.options) {
        var from_1 = runner_1.Num.min(props.options.from, props.options.to);
        var to_1 = runner_1.Num.max(props.options.from, props.options.to);
        var stepSize = runner_1.Num.max(props.options.stepSize || 0, 1);
        var _loop_1 = function (index) {
            buttons.push(
                (0, jsx_runtime_1.jsx)(
                    button_1.ButtonFabric,
                    {
                        styles: {
                            baseColor: props.styles.color,
                            mode: value === index ? "fill" : "outline",
                            hover: "outline",
                            outlineSize: props.styles.outlineSize,
                            roundness: props.styles.roundness,
                            scale: props.styles.scale,
                            group:
                                to_1 > from_1 && from_1 + stepSize <= to_1
                                    ? index === from_1
                                        ? "start"
                                        : index + stepSize > to_1
                                        ? "end"
                                        : "middle"
                                    : undefined,
                        },
                        label: (0, runner_1.castToString)(index),
                        tabIndex: props.tabIndex,
                        ariaDescribedBy: props.ariaDescribedBy,
                        disabled:
                            props.disabled ||
                            props.readOnly ||
                            (typeof valueRef === "object" && (valueRef.isFrozen || valueRef.isLocked)) ||
                            false,
                        onAutoFocus: (index === ((0, runner_1.isNumberFinite)(value) ? value : from_1) && props.onAutoFocus) || undefined,
                        onFocus: props.onFocus,
                        onBlur: props.onBlur,
                        onKeyDown: handleKeyDown(index - from_1, function (key) {
                            if (key === "-" || key === "+") {
                                if (!(0, runner_1.isNumberFinite)(value)) {
                                    changeValue(index, false);
                                } else if ((key === "-" && value > from_1) || (key === "+" && value < to_1)) {
                                    changeValue(value + (key === "-" ? -1 : 1), false);
                                }
                            } else if (key >= from_1 && key <= to_1) {
                                changeValue(value !== key ? key : undefined, true);
                            }
                        }),
                        onClick: function () {
                            return changeValue(props.required || value !== index ? index : undefined, true);
                        },
                    },
                    index
                )
            );
        };
        for (var index = from_1; index <= to_1; index += stepSize) {
            _loop_1(index);
        }
    }
    return (0, jsx_runtime_1.jsx)(ScaleElement, {
        $justify: props.justify,
        children: (0, jsx_runtime_1.jsx)("div", {
            children: (0, jsx_runtime_1.jsxs)("div", {
                children: [
                    (0, jsx_runtime_1.jsx)("div", { children: buttons }),
                    buttons.length > 0 &&
                        (props.labelLeft || (props.labelCenter && buttons.length > 2) || (props.labelRight && buttons.length > 1)) &&
                        (0, jsx_runtime_1.jsxs)(ScaleLabelsElement, {
                            $labelColor: props.styles.labelColor,
                            children: [
                                (0, jsx_runtime_1.jsx)("small", { children: props.labelLeft || "" }),
                                (0, jsx_runtime_1.jsx)("small", { children: (buttons.length > 2 && props.labelCenter) || "" }),
                                (0, jsx_runtime_1.jsx)("small", { children: (buttons.length > 1 && props.labelRight) || "" }),
                            ],
                        }),
                ],
            }),
        }),
    });
};
exports.ScaleFabric = ScaleFabric;
var templateObject_1, templateObject_2;
