"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MultipleChoiceFabric = void 0;
var tslib_1 = require("tslib");
var jsx_runtime_1 = require("react/jsx-runtime");
var styled_components_1 = require("styled-components");
var react_1 = require("react");
var runner_1 = require("@tripetto/runner");
var helpers_1 = require("../helpers");
var button_1 = require("../button");
var hyperlink_1 = require("../../icons/hyperlink");
var const_1 = require("../const");
var MultipleChoiceElement = styled_components_1.styled.div(
    templateObject_1 ||
        (templateObject_1 = tslib_1.__makeTemplateObject(
            [
                "\n    display: table;\n    width: ",
                ";\n\n    > * {\n        display: ",
                ";\n        width: ",
                ";\n        margin-top: 8px;\n        margin-right: ",
                ";\n\n        &:nth-child(even) {\n            margin-right: ",
                ";\n        }\n\n        &:last-child {\n            margin-right: ",
                ";\n        }\n\n        > span {\n            display: ",
                ";\n            justify-content: ",
                ";\n            text-align: ",
                ";\n            overflow: hidden;\n        }\n    }\n",
            ],
            [
                "\n    display: table;\n    width: ",
                ";\n\n    > * {\n        display: ",
                ";\n        width: ",
                ";\n        margin-top: 8px;\n        margin-right: ",
                ";\n\n        &:nth-child(even) {\n            margin-right: ",
                ";\n        }\n\n        &:last-child {\n            margin-right: ",
                ";\n        }\n\n        > span {\n            display: ",
                ";\n            justify-content: ",
                ";\n            text-align: ",
                ";\n            overflow: hidden;\n        }\n    }\n",
            ]
        )),
    function (props) {
        return (props.$alignment === "equal" && "auto") || "100%";
    },
    function (props) {
        return (
            ((props.$alignment === "vertical" || props.$alignment === "equal" || props.$alignment === "full") && "block") || "inline-block"
        );
    },
    function (props) {
        return (
            ((props.$alignment === "equal" || props.$alignment === "full") && "100%") ||
            (props.$alignment === "columns" && "calc(50% - 4px)") ||
            undefined
        );
    },
    function (props) {
        return ((props.$alignment === "columns" || props.$alignment === "horizontal") && "".concat(props.$margin || 8, "px")) || undefined;
    },
    function (props) {
        return (props.$alignment === "columns" && "0px") || undefined;
    },
    function (props) {
        return (props.$alignment === "horizontal" && "0px") || undefined;
    },
    function (props) {
        return (props.$alignment === "full" && "flex") || undefined;
    },
    function (props) {
        return (props.$alignment === "full" && "center") || undefined;
    },
    function (props) {
        return (props.$alignment === "full" && "center") || undefined;
    }
);
var assertValue = function (valueRef, buttons, reference) {
    var selected = (0, runner_1.findFirst)(buttons, function (button) {
        return button.id === reference;
    });
    if (valueRef.reference !== (selected === null || selected === void 0 ? void 0 : selected.id)) {
        valueRef.set(
            selected && (selected.value || selected.name),
            selected === null || selected === void 0 ? void 0 : selected.id,
            selected === null || selected === void 0 ? void 0 : selected.name
        );
    }
    return (selected && selected.id) || "";
};
var MultipleChoiceFabric = function (props) {
    var valueRef = props.value;
    var debounceRef = (0, react_1.useRef)(0);
    var buttonsRef = (0, react_1.useRef)({});
    var _a = (0, react_1.useState)((typeof valueRef !== "object" && valueRef) || ""),
        proxy = _a[0],
        setProxy = _a[1];
    var _b =
            typeof valueRef === "object"
                ? [
                      debounceRef.current !== 0 ? proxy : assertValue(valueRef, props.buttons, valueRef.reference),
                      function (reference) {
                          (0, runner_1.cancelUITimeout)(debounceRef.current);
                          setProxy(reference);
                          debounceRef.current = (0, runner_1.scheduleUITimeout)(function () {
                              debounceRef.current = 0;
                              assertValue(valueRef, props.buttons, reference);
                              if (props.autoSubmit && reference) {
                                  (0, helpers_1.handleAutoSubmit)(autoSubmit);
                              }
                          }, const_1.DEBOUNCE_NORMAL);
                      },
                  ]
                : [proxy, setProxy],
        value = _b[0],
        setValue = _b[1];
    var _c = (0, react_1.useState)({}),
        update = _c[1];
    var autoSubmit = (0, react_1.useRef)({
        id: 0,
        cb: props.onSubmit,
    });
    var toggle = function (button) {
        if (button.url) {
            return;
        }
        var isSelected = button.slot ? (0, runner_1.castToBoolean)(buttonsRef.current[button.id], button.slot.value) : value === button.id;
        if (button.slot) {
            (0, runner_1.cancelUITimeout)(debounceRef.current);
            buttonsRef.current[button.id] = !isSelected;
            update({});
            debounceRef.current = (0, runner_1.scheduleUITimeout)(function () {
                debounceRef.current = 0;
                (0, runner_1.each)(
                    buttonsRef.current,
                    function (val, id) {
                        var changedButton = (0, runner_1.findFirst)(props.buttons, function (ref) {
                            return ref.id === id;
                        });
                        delete buttonsRef.current[id];
                        if (changedButton && changedButton.slot) {
                            changedButton.slot.value = val;
                        }
                    },
                    {
                        keys: true,
                    }
                );
            }, const_1.DEBOUNCE_NORMAL);
        } else {
            var val = isSelected && !props.required ? "" : button.id;
            if (autoSubmit.current.id) {
                clearTimeout(autoSubmit.current.id);
                autoSubmit.current.id = 0;
            }
            setValue(val);
            if (props.onChange) {
                props.onChange(val);
            }
            if (typeof valueRef !== "object" && props.autoSubmit && val) {
                (0, helpers_1.handleAutoSubmit)(autoSubmit);
            }
        }
        if (button.onChange) {
            button.onChange(!button.slot && props.required ? true : !isSelected);
        }
    };
    (0, react_1.useEffect)(function () {
        return function () {
            (0, runner_1.cancelUITimeout)(debounceRef.current);
        };
    }, []);
    autoSubmit.current.cb = props.onSubmit;
    return (0, jsx_runtime_1.jsx)(MultipleChoiceElement, {
        $alignment: props.alignment || "vertical",
        $margin: props.styles.margin,
        children: props.buttons.map(function (button, index) {
            var isSelected = button.slot
                ? (0, runner_1.castToBoolean)(buttonsRef.current[button.id], button.slot.value)
                : value === button.id;
            if (button.slot) {
                button.slot.confirm();
            }
            return (
                (props.view === "preview" || button.name || button.description) &&
                (0, jsx_runtime_1.jsx)(
                    button_1.ButtonFabric,
                    {
                        styles: {
                            baseColor: button.color || props.styles.color,
                            mode: isSelected ? "fill" : "outline",
                            hover: "outline",
                            outlineSize: props.styles.outlineSize,
                            roundness: props.styles.roundness,
                            scale: props.styles.scale,
                        },
                        hyperlink:
                            (button.url && {
                                url: button.url,
                                target: button.target || "blank",
                            }) ||
                            undefined,
                        label: button.label || button.name || "...",
                        description: button.description,
                        icon: (button.url && button.target !== "self" && hyperlink_1.hyperlinkIcon) || undefined,
                        iconPosition: "right",
                        tabIndex: button.tabIndex || props.tabIndex,
                        ariaDescribedBy: props.ariaDescribedBy,
                        disabled:
                            button.disabled ||
                            props.disabled ||
                            props.readOnly ||
                            (typeof valueRef === "object" && (valueRef.isFrozen || valueRef.isLocked)) ||
                            (button.slot && (button.slot.isFrozen || button.slot.isLocked)) ||
                            false,
                        onAutoFocus: ((button.slot || !value ? index === 0 : isSelected) && props.onAutoFocus) || undefined,
                        onFocus: props.onFocus,
                        onBlur: props.onBlur,
                        onKeyDown: function (e) {
                            if (e.shiftKey && e.key === "Enter" && props.onSubmit) {
                                e.preventDefault();
                                props.onSubmit();
                            } else if (e.key === "Escape") {
                                e.currentTarget.blur();
                            } else if (e.key === "Tab") {
                                if (e.shiftKey) {
                                    if (props.onCancel && index === 0) {
                                        e.preventDefault();
                                        props.onCancel();
                                    }
                                } else if (props.onSubmit && index + 1 === props.buttons.length) {
                                    e.preventDefault();
                                    props.onSubmit();
                                }
                            } else {
                                var keyCode = (e.key.length === 1 && e.key.charCodeAt(0)) || 0;
                                var offset =
                                    (keyCode <= 57 ? keyCode - 48 : 0) ||
                                    (keyCode <= 90 ? keyCode - 64 : 0) ||
                                    (keyCode <= 122 ? keyCode - 96 : 0);
                                if (offset > 0 && offset <= 26) {
                                    var toggleButton = (0, runner_1.arrayItem)(props.buttons, offset - 1);
                                    if (toggleButton) {
                                        toggle(toggleButton);
                                    }
                                }
                            }
                        },
                        onClick: function () {
                            return toggle(button);
                        },
                    },
                    button.id || index
                )
            );
        }),
    });
};
exports.MultipleChoiceFabric = MultipleChoiceFabric;
var templateObject_1;
