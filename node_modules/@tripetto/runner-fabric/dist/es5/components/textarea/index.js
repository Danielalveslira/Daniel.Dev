"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TextareaFabric = void 0;
var tslib_1 = require("tslib");
var jsx_runtime_1 = require("react/jsx-runtime");
var styled_components_1 = require("styled-components");
var react_1 = require("react");
var runner_1 = require("@tripetto/runner");
var color_1 = require("../../color");
var helpers_1 = require("../helpers");
var warning_1 = require("../../icons/warning");
var const_1 = require("../const");
var TextareaElement = styled_components_1.styled.textarea(
    templateObject_1 ||
        (templateObject_1 = tslib_1.__makeTemplateObject(
            [
                "\n    appearance: none;\n    resize: none;\n    outline: none;\n    box-sizing: border-box;\n    display: block;\n    width: 100%;\n    font-size: 1em;\n    line-height: 1.5em;\n    background-color: ",
                ";\n    background-image: ",
                ";\n    background-repeat: no-repeat;\n    background-size: ",
                "em;\n    background-position: right 0.375em top 0.375em;\n    border: ",
                ";\n    color: ",
                ";\n    border-radius: ",
                ";\n    padding: ",
                ";\n    padding-right: ",
                ";\n    margin: 0;\n    opacity: 0.65;\n    transition:\n        color 0.15s ease-in-out,\n        background-color 0.15s ease-in-out,\n        border-color 0.15s ease-in-out,\n        box-shadow 0.15s ease-in-out,\n        opacity 0.15s ease-in-out;\n    overflow-y: auto;\n    overflow-x: hidden;\n    scroll-behavior: smooth;\n    -ms-overflow-style: none;\n    -webkit-overflow-scrolling: touch;\n    -webkit-tap-highlight-color: transparent;\n\n    &::-webkit-scrollbar {\n        display: none;\n    }\n\n    &::placeholder {\n        color: ",
                ";\n        opacity: 0.5;\n        transition: color 0.15s ease-in-out opacity 0.15s ease-in-out;\n    }\n\n    &:not(:disabled):not([readonly]) {\n        opacity: 1;\n\n        &:hover {\n            box-shadow: ",
                ";\n        }\n\n        &:focus {\n            background-color: ",
                ";\n            background-image: ",
                ";\n            border-color: ",
                ";\n            color: ",
                ";\n            box-shadow: ",
                ";\n            &::placeholder {\n                color: ",
                ";\n                opacity: 0.3;\n            }\n        }\n    }\n",
            ],
            [
                "\n    appearance: none;\n    resize: none;\n    outline: none;\n    box-sizing: border-box;\n    display: block;\n    width: 100%;\n    font-size: 1em;\n    line-height: 1.5em;\n    background-color: ",
                ";\n    background-image: ",
                ";\n    background-repeat: no-repeat;\n    background-size: ",
                "em;\n    background-position: right 0.375em top 0.375em;\n    border: ",
                ";\n    color: ",
                ";\n    border-radius: ",
                ";\n    padding: ",
                ";\n    padding-right: ",
                ";\n    margin: 0;\n    opacity: 0.65;\n    transition:\n        color 0.15s ease-in-out,\n        background-color 0.15s ease-in-out,\n        border-color 0.15s ease-in-out,\n        box-shadow 0.15s ease-in-out,\n        opacity 0.15s ease-in-out;\n    overflow-y: auto;\n    overflow-x: hidden;\n    scroll-behavior: smooth;\n    -ms-overflow-style: none;\n    -webkit-overflow-scrolling: touch;\n    -webkit-tap-highlight-color: transparent;\n\n    &::-webkit-scrollbar {\n        display: none;\n    }\n\n    &::placeholder {\n        color: ",
                ";\n        opacity: 0.5;\n        transition: color 0.15s ease-in-out opacity 0.15s ease-in-out;\n    }\n\n    &:not(:disabled):not([readonly]) {\n        opacity: 1;\n\n        &:hover {\n            box-shadow: ",
                ";\n        }\n\n        &:focus {\n            background-color: ",
                ";\n            background-image: ",
                ";\n            border-color: ",
                ";\n            color: ",
                ";\n            box-shadow: ",
                ";\n            &::placeholder {\n                color: ",
                ";\n                opacity: 0.3;\n            }\n        }\n    }\n",
            ]
        )),
    function (props) {
        return (0, color_1.color)(
            props.$error && props.$backgroundColor !== "transparent" && props.$borderColor === "transparent"
                ? props.$errorColor
                : props.$backgroundColor
        );
    },
    function (props) {
        return props.$error
            ? 'url("data:image/svg+xml;base64,'.concat(
                  (0, warning_1.warningIcon)(
                      (0, color_1.color)(props.$errorColor, function (o) {
                          return o.makeBlackOrWhite(props.$backgroundColor !== "transparent" && props.$borderColor === "transparent");
                      })
                  ),
                  '")'
              )
            : undefined;
    },
    8 / 7,
    function (props) {
        return ""
            .concat(props.$backgroundColor === "transparent" && props.$borderColor === "transparent" ? 0 : props.$borderSize, "px solid ")
            .concat(
                (0, color_1.color)(
                    props.$error
                        ? props.$errorColor
                        : props.$borderColor && props.$borderColor !== "transparent"
                        ? props.$borderColor
                        : props.$backgroundColor
                )
            );
    },
    function (props) {
        return (0, color_1.color)(
            props.$error
                ? props.$backgroundColor !== "transparent" && props.$borderColor === "transparent"
                    ? (0, color_1.color)(props.$errorColor, function (o) {
                          return o.makeBlackOrWhite();
                      })
                    : props.$errorColor
                : props.$textColor
                ? props.$textColor
                : props.$borderColor && props.$borderColor !== "transparent"
                ? props.$borderColor
                : (0, color_1.color)(props.$backgroundColor, function (o) {
                      return o.makeBlackOrWhite();
                  })
        );
    },
    function (props) {
        return (0, runner_1.isNumberFinite)(props.$roundness) ? "".concat(props.$roundness, "px") : "0.5em";
    },
    function (props) {
        return props.$backgroundColor === "transparent" && props.$borderColor === "transparent"
            ? "0"
            : "".concat(0.375 * props.$scale, "em 0.75em");
    },
    function (props) {
        return (props.$error && "".concat(8 / 7 + 0.75, "em")) || undefined;
    },
    function (props) {
        return (0, color_1.color)(
            props.$error
                ? props.$backgroundColor !== "transparent" && props.$borderColor === "transparent"
                    ? (0, color_1.color)(props.$errorColor, function (o) {
                          return o.makeBlackOrWhite();
                      })
                    : props.$errorColor
                : props.$textColor
                ? props.$textColor
                : props.$borderColor && props.$borderColor !== "transparent"
                ? props.$borderColor
                : (0, color_1.color)(props.$backgroundColor, function (o) {
                      return o.makeBlackOrWhite();
                  })
        );
    },
    function (props) {
        return (
            ((props.$backgroundColor !== "transparent" || props.$borderColor !== "transparent") &&
                "0 0 0 0.2rem ".concat(
                    (0, color_1.color)(
                        props.$error
                            ? props.$errorColor
                            : props.$borderColor && props.$borderColor !== "transparent"
                            ? props.$borderColor
                            : props.$backgroundColor,
                        function (o) {
                            return o.manipulate(function (m) {
                                return m.alpha(0.2);
                            });
                        }
                    )
                )) ||
            undefined
        );
    },
    function (props) {
        return (0, color_1.color)(props.$backgroundColor);
    },
    function (props) {
        return (!props.$errorVisible && "none") || undefined;
    },
    function (props) {
        return (0, color_1.color)(props.$borderColor && props.$borderColor !== "transparent" ? props.$borderColor : props.$backgroundColor);
    },
    function (props) {
        return (0, color_1.color)(
            props.$textColor
                ? props.$textColor
                : props.$borderColor && props.$borderColor !== "transparent"
                ? props.$borderColor
                : (0, color_1.color)(props.$backgroundColor, function (o) {
                      return o.makeBlackOrWhite();
                  })
        );
    },
    function (props) {
        return (
            ((props.$backgroundColor !== "transparent" || props.$borderColor !== "transparent") &&
                "0 0 0 0.2rem ".concat(
                    (0, color_1.color)(
                        props.$borderColor && props.$borderColor !== "transparent" ? props.$borderColor : props.$backgroundColor,
                        function (o) {
                            return o.manipulate(function (m) {
                                return m.alpha(0.5);
                            });
                        }
                    )
                )) ||
            undefined
        );
    },
    function (props) {
        return (0, color_1.color)(
            props.$textColor
                ? props.$textColor
                : props.$borderColor && props.$borderColor !== "transparent"
                ? props.$borderColor
                : (0, color_1.color)(props.$backgroundColor, function (o) {
                      return o.makeBlackOrWhite();
                  })
        );
    }
);
var TextareaFabric = function (props) {
    var valueRef = props.value;
    var debounceRef = (0, react_1.useRef)({
        duration: 0,
        handle: 0,
    });
    var _a = (0, react_1.useState)(false),
        focus = _a[0],
        setFocus = _a[1];
    var _b = (0, react_1.useState)(typeof valueRef === "object" ? (0, runner_1.castToString)(valueRef.pristine) : valueRef || ""),
        focusValue = _b[0],
        setFocusValue = _b[1];
    var _c =
            typeof valueRef === "object"
                ? [
                      focus ? focusValue : valueRef.string,
                      function (val) {
                          (0, runner_1.cancelUITimeout)(debounceRef.current.handle);
                          setFocusValue(val);
                          var nTimeout = runner_1.Num.range(debounceRef.current.duration * 2, const_1.DEBOUNCE_MIN, const_1.DEBOUNCE_MAX);
                          debounceRef.current.handle = (0, runner_1.scheduleUITimeout)(function () {
                              var start = runner_1.DateTime.precise;
                              debounceRef.current.handle = 0;
                              debounceRef.current.update = function () {
                                  debounceRef.current.duration = runner_1.DateTime.elapsed(start, true);
                                  debounceRef.current.update = undefined;
                              };
                              valueRef.pristine = val || undefined;
                          }, nTimeout);
                      },
                  ]
                : [focusValue, setFocusValue],
        value = _c[0],
        setValue = _c[1];
    var _d = (0, react_1.useState)(value ? true : false),
        errorVisible = _d[0],
        makeErrorVisible = _d[1];
    var _e = (0, react_1.useState)("auto"),
        height = _e[0],
        setHeight = _e[1];
    var minHeight = (0, react_1.useRef)();
    var ref = (0, react_1.useRef)();
    var setRef = function (el) {
        if (props.onAutoFocus) {
            props.onAutoFocus(el);
        }
        ref.current = el;
    };
    (0, react_1.useEffect)(
        function () {
            if (ref.current) {
                if (!focus) {
                    ref.current.value = value;
                }
                if (props.autoSize) {
                    if (typeof minHeight.current !== "number") {
                        minHeight.current = ref.current.getBoundingClientRect().height;
                    }
                    var current = ref.current.style.height;
                    ref.current.style.height = "auto";
                    var n = Math.max(minHeight.current, ref.current.scrollHeight);
                    setHeight(n > 10 ? n + "px" : "auto");
                    ref.current.style.height = current;
                }
            }
        },
        [value]
    );
    (0, react_1.useEffect)(function () {
        return function () {
            (0, runner_1.cancelUITimeout)(debounceRef.current.handle);
        };
    }, []);
    if (debounceRef.current.update) {
        debounceRef.current.update();
    }
    return (0, jsx_runtime_1.jsx)(TextareaElement, {
        id: props.id,
        ref: setRef,
        tabIndex: props.tabIndex,
        placeholder: props.placeholder,
        required: props.required || false,
        disabled: props.disabled || false,
        readOnly: props.readOnly || (typeof valueRef === "object" && (valueRef.isFrozen || valueRef.isLocked)) || false,
        rows: props.rows || 2,
        maxLength: props.maxLength || undefined,
        defaultValue: value,
        autoComplete: "off",
        inputMode: "text",
        "aria-describedby": props.ariaDescribedBy,
        style: {
            height: height,
            overflowY: (props.autoSize && "hidden") || undefined,
        },
        onChange: function (e) {
            setValue(e.target.value);
            makeErrorVisible(true);
            if (props.onChange) {
                (0, helpers_1.setReturnValue)(setValue, props.onChange(e.target.value));
            }
        },
        onFocus: (0, helpers_1.handleFocus)(setFocus, setValue, props.onFocus),
        onBlur: (0, helpers_1.handleBlur)(setFocus, setValue, props.onBlur),
        onKeyDown: function (e) {
            if (e.shiftKey && e.key === "Enter" && props.onSubmit) {
                e.preventDefault();
                props.onSubmit();
            } else if (e.key === "Escape") {
                e.currentTarget.blur();
            } else if (e.key === "Tab") {
                if (e.shiftKey) {
                    if (props.onCancel) {
                        e.preventDefault();
                        props.onCancel();
                    }
                } else if (props.onSubmit) {
                    e.preventDefault();
                    props.onSubmit();
                }
            }
        },
        $backgroundColor: props.styles.backgroundColor || "transparent",
        $borderColor: props.styles.borderColor || "transparent",
        $borderSize: props.styles.borderSize || 1,
        $roundness: props.styles.roundness,
        $textColor: props.styles.textColor,
        $errorColor: props.styles.errorColor,
        $errorVisible: errorVisible,
        $error: props.error || false,
        $scale: props.styles.scale || 1,
    });
};
exports.TextareaFabric = TextareaFabric;
var templateObject_1;
