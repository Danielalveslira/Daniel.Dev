"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CheckboxFabric = exports.CheckboxElement = void 0;
var tslib_1 = require("tslib");
var jsx_runtime_1 = require("react/jsx-runtime");
var styled_components_1 = require("styled-components");
var react_1 = require("react");
var runner_1 = require("@tripetto/runner");
var color_1 = require("../../color");
var required_indicator_1 = require("../required-indicator");
var const_1 = require("../const");
exports.CheckboxElement = styled_components_1.styled.div(
    templateObject_1 ||
        (templateObject_1 = tslib_1.__makeTemplateObject(
            ["\n    display: block;\n    width: 100%;\n    margin: 0;\n    padding: 0;\n"],
            ["\n    display: block;\n    width: 100%;\n    margin: 0;\n    padding: 0;\n"]
        ))
);
var CheckboxLabelElement = styled_components_1.styled.label(
    templateObject_2 ||
        (templateObject_2 = tslib_1.__makeTemplateObject(
            [
                "\n    box-sizing: border-box;\n    appearance: none;\n    outline: none;\n    font-size: 1em;\n    line-height: 1.6em;\n    padding-left: calc(",
                "em + ",
                "px);\n    margin: 0;\n    position: relative;\n    display: inline-flex;\n    min-height: ",
                "em;\n    user-select: none;\n    opacity: ",
                ";\n    transition: opacity 0.15s ease-in-out;\n\n    > input {\n        position: absolute;\n        opacity: 0;\n        cursor: pointer;\n        height: 0;\n        width: 0;\n    }\n\n    > span {\n        box-sizing: content-box;\n        color: ",
                ";\n    }\n\n    > span:last-child {\n        position: absolute;\n        width: ",
                "em;\n        height: ",
                "em;\n        top: 0.095em;\n        left: 0;\n        background-color: ",
                ";\n        border: ",
                ";\n        border-radius: ",
                ";\n        transition:\n            background-color 0.15s ease-in-out,\n            border-color 0.15s ease-in-out,\n            box-shadow 0.15s ease-in-out,\n            opacity 0.15s ease-in-out;\n\n        &:after {\n            width: ",
                "em;\n            height: ",
                "em;\n            left: ",
                "em;\n            top: ",
                "em;\n            border-style: solid;\n            border-width: 0 ",
                "em ",
                "em 0;\n            border-color: ",
                ';\n            transform: rotate(45deg) scale(0.1);\n            transition:\n                transform 0.15s linear,\n                opacity 0s linear 0.15s;\n            content: "";\n            position: absolute;\n            opacity: 0;\n        }\n    }\n\n    &:hover {\n        > input:not(:disabled) + span + span {\n            box-shadow: ',
                ";\n        }\n    }\n\n    > input {\n        &:not(:disabled) {\n            &:active + span {\n                color: ",
                ";\n            }\n\n            &:active + span + span {\n                background-color: ",
                ";\n                border: ",
                "px solid\n                    ",
                ";\n                box-shadow: ",
                ";\n\n                &:after {\n                    border-color: ",
                ";\n                }\n            }\n\n            &:focus + span {\n                color: ",
                ";\n            }\n\n            &:focus + span + span {\n                background-color: ",
                ";\n                border: ",
                "px solid\n                    ",
                ";\n                box-shadow: ",
                ";\n\n                &:after {\n                    border-color: ",
                ";\n                }\n            }\n        }\n\n        &:checked + span + span {\n            &:after {\n                transform: rotate(45deg);\n                opacity: 1;\n                transition:\n                    transform 0.15s linear,\n                    opacity 0s linear;\n            }\n        }\n    }\n",
            ],
            [
                "\n    box-sizing: border-box;\n    appearance: none;\n    outline: none;\n    font-size: 1em;\n    line-height: 1.6em;\n    padding-left: calc(",
                "em + ",
                "px);\n    margin: 0;\n    position: relative;\n    display: inline-flex;\n    min-height: ",
                "em;\n    user-select: none;\n    opacity: ",
                ";\n    transition: opacity 0.15s ease-in-out;\n\n    > input {\n        position: absolute;\n        opacity: 0;\n        cursor: pointer;\n        height: 0;\n        width: 0;\n    }\n\n    > span {\n        box-sizing: content-box;\n        color: ",
                ";\n    }\n\n    > span:last-child {\n        position: absolute;\n        width: ",
                "em;\n        height: ",
                "em;\n        top: 0.095em;\n        left: 0;\n        background-color: ",
                ";\n        border: ",
                ";\n        border-radius: ",
                ";\n        transition:\n            background-color 0.15s ease-in-out,\n            border-color 0.15s ease-in-out,\n            box-shadow 0.15s ease-in-out,\n            opacity 0.15s ease-in-out;\n\n        &:after {\n            width: ",
                "em;\n            height: ",
                "em;\n            left: ",
                "em;\n            top: ",
                "em;\n            border-style: solid;\n            border-width: 0 ",
                "em ",
                "em 0;\n            border-color: ",
                ';\n            transform: rotate(45deg) scale(0.1);\n            transition:\n                transform 0.15s linear,\n                opacity 0s linear 0.15s;\n            content: "";\n            position: absolute;\n            opacity: 0;\n        }\n    }\n\n    &:hover {\n        > input:not(:disabled) + span + span {\n            box-shadow: ',
                ";\n        }\n    }\n\n    > input {\n        &:not(:disabled) {\n            &:active + span {\n                color: ",
                ";\n            }\n\n            &:active + span + span {\n                background-color: ",
                ";\n                border: ",
                "px solid\n                    ",
                ";\n                box-shadow: ",
                ";\n\n                &:after {\n                    border-color: ",
                ";\n                }\n            }\n\n            &:focus + span {\n                color: ",
                ";\n            }\n\n            &:focus + span + span {\n                background-color: ",
                ";\n                border: ",
                "px solid\n                    ",
                ";\n                box-shadow: ",
                ";\n\n                &:after {\n                    border-color: ",
                ";\n                }\n            }\n        }\n\n        &:checked + span + span {\n            &:after {\n                transform: rotate(45deg);\n                opacity: 1;\n                transition:\n                    transform 0.15s linear,\n                    opacity 0s linear;\n            }\n        }\n    }\n",
            ]
        )),
    function (props) {
        return (8 / 7) * props.$scale + 0.375;
    },
    function (props) {
        return props.$borderSize * 2;
    },
    function (props) {
        return (8 / 7 + 2 * 0.095) * props.$scale;
    },
    function (props) {
        return (props.$disabled && ".4") || undefined;
    },
    function (props) {
        return (0, color_1.color)(
            props.$error
                ? props.$errorColor
                : props.$textColor
                ? props.$textColor
                : props.$borderColor && props.$borderColor !== "transparent"
                ? props.$borderColor
                : props.$backgroundColor,
            function (o) {
                return o.makeUnclear("#000");
            }
        );
    },
    function (props) {
        return (8 / 7) * props.$scale;
    },
    function (props) {
        return (8 / 7) * props.$scale;
    },
    function (props) {
        return (0, color_1.color)(
            props.$error && props.$backgroundColor !== "transparent" && props.$borderColor === "transparent"
                ? props.$errorColor
                : props.$backgroundColor
        );
    },
    function (props) {
        return ""
            .concat(props.$borderSize, "px solid ")
            .concat(
                (0, color_1.color)(
                    props.$error
                        ? props.$errorColor
                        : props.$borderColor && props.$borderColor !== "transparent"
                        ? props.$borderColor
                        : props.$backgroundColor
                )
            );
    },
    function (props) {
        return (0, runner_1.isNumberFinite)(props.$roundness)
            ? "".concat(runner_1.Num.min(props.$roundness, 4), "px")
            : "".concat((4 / 14) * props.$scale, "em");
    },
    function (props) {
        return (3 / 14) * props.$scale;
    },
    function (props) {
        return (7 / 14) * props.$scale;
    },
    function (props) {
        return (6 / 14) * props.$scale;
    },
    function (props) {
        return (2 / 14) * props.$scale;
    },
    function (props) {
        return (2 / 14) * props.$scale;
    },
    function (props) {
        return (2 / 14) * props.$scale;
    },
    function (props) {
        return (0, color_1.color)(
            props.$error
                ? props.$errorColor
                : props.$borderColor && props.$borderColor !== "transparent"
                ? props.$borderColor
                : props.$backgroundColor,
            function (o) {
                return o.makeBlackOrWhite(
                    props.$backgroundColor !== "transparent" && (props.$error || props.$borderColor === "transparent")
                );
            }
        );
    },
    function (props) {
        return (
            ((props.$backgroundColor !== "transparent" || props.$borderColor !== "transparent") &&
                "0 0 0 0.2rem ".concat(
                    (0, color_1.color)(
                        props.$error
                            ? props.$errorColor
                            : props.$borderColor && props.$borderColor !== "transparent"
                            ? props.$borderColor
                            : props.$backgroundColor,
                        function (o) {
                            return o.manipulate(function (m) {
                                return m.alpha(0.2);
                            });
                        }
                    )
                )) ||
            undefined
        );
    },
    function (props) {
        return (0, color_1.color)(
            props.$textColor
                ? props.$textColor
                : props.$borderColor && props.$borderColor !== "transparent"
                ? props.$borderColor
                : props.$backgroundColor,
            function (o) {
                return o.makeUnclear("#000");
            }
        );
    },
    function (props) {
        return (0, color_1.color)(props.$backgroundColor);
    },
    function (props) {
        return props.$borderSize;
    },
    function (props) {
        return (0, color_1.color)(props.$borderColor && props.$borderColor !== "transparent" ? props.$borderColor : props.$backgroundColor);
    },
    function (props) {
        return (
            ((props.$backgroundColor !== "transparent" || props.$borderColor !== "transparent") &&
                "0 0 0 0.1rem ".concat(
                    (0, color_1.color)(
                        props.$borderColor && props.$borderColor !== "transparent" ? props.$borderColor : props.$backgroundColor,
                        function (o) {
                            return o.manipulate(function (m) {
                                return m.alpha(0.2);
                            });
                        }
                    )
                )) ||
            undefined
        );
    },
    function (props) {
        return (0, color_1.color)(
            props.$borderColor && props.$borderColor !== "transparent" ? props.$borderColor : props.$backgroundColor,
            function (o) {
                return o.makeBlackOrWhite(props.$backgroundColor !== "transparent" && props.$borderColor === "transparent");
            }
        );
    },
    function (props) {
        return (0, color_1.color)(
            props.$textColor
                ? props.$textColor
                : props.$borderColor && props.$borderColor !== "transparent"
                ? props.$borderColor
                : props.$backgroundColor,
            function (o) {
                return o.makeUnclear("#000");
            }
        );
    },
    function (props) {
        return (0, color_1.color)(props.$backgroundColor);
    },
    function (props) {
        return props.$borderSize;
    },
    function (props) {
        return (0, color_1.color)(props.$borderColor && props.$borderColor !== "transparent" ? props.$borderColor : props.$backgroundColor);
    },
    function (props) {
        return (
            ((props.$backgroundColor !== "transparent" || props.$borderColor !== "transparent") &&
                "0 0 0 0.2rem ".concat(
                    (0, color_1.color)(
                        props.$borderColor && props.$borderColor !== "transparent" ? props.$borderColor : props.$backgroundColor,
                        function (o) {
                            return o.manipulate(function (m) {
                                return m.alpha(0.5);
                            });
                        }
                    )
                )) ||
            undefined
        );
    },
    function (props) {
        return (0, color_1.color)(
            props.$borderColor && props.$borderColor !== "transparent" ? props.$borderColor : props.$backgroundColor,
            function (o) {
                return o.makeBlackOrWhite(props.$backgroundColor !== "transparent" && props.$borderColor === "transparent");
            }
        );
    }
);
var CheckboxFabric = function (props) {
    var valueRef = props.value;
    var debounceRef = (0, react_1.useRef)(0);
    var _a = (0, react_1.useState)((typeof valueRef !== "object" && valueRef) || false),
        proxy = _a[0],
        setProxy = _a[1];
    var _b =
            typeof valueRef === "object"
                ? [
                      debounceRef.current !== 0 ? proxy : valueRef.value,
                      function (val) {
                          (0, runner_1.cancelUITimeout)(debounceRef.current);
                          setProxy(val);
                          debounceRef.current = (0, runner_1.scheduleUITimeout)(function () {
                              debounceRef.current = 0;
                              valueRef.value = val;
                          }, const_1.DEBOUNCE_NORMAL);
                      },
                  ]
                : [proxy, setProxy],
        value = _b[0],
        setValue = _b[1];
    var changeValue = function (val) {
        setValue(val);
        if (props.onChange) {
            props.onChange(val);
        }
    };
    var disabled = props.disabled || props.readOnly || (typeof valueRef === "object" && (valueRef.isFrozen || valueRef.isLocked)) || false;
    (0, react_1.useEffect)(function () {
        return function () {
            (0, runner_1.cancelUITimeout)(debounceRef.current);
        };
    }, []);
    if (typeof valueRef === "object") {
        valueRef.confirm();
    }
    return (0, jsx_runtime_1.jsx)(exports.CheckboxElement, {
        children: (0, jsx_runtime_1.jsxs)(CheckboxLabelElement, {
            $disabled: disabled,
            $backgroundColor: props.styles.backgroundColor || "transparent",
            $borderColor:
                (props.styles.borderColor === "transparent" &&
                    props.styles.backgroundColor === "transparent" &&
                    (0, color_1.color)(props.styles.textColor, function (o) {
                        return o.makeUnclear("#000");
                    })) ||
                ((0, color_1.color)(props.styles.borderColor) !== (0, color_1.color)(props.styles.backgroundColor) &&
                    props.styles.borderColor) ||
                "transparent",
            $borderSize: props.styles.borderSize || 1,
            $roundness: props.styles.roundness,
            $textColor: props.styles.textColor,
            $errorColor: props.styles.errorColor,
            $error: props.error || false,
            $scale: props.styles.scale || 1,
            children: [
                (0, jsx_runtime_1.jsx)("input", {
                    ref: props.onAutoFocus,
                    type: "checkbox",
                    checked: value,
                    tabIndex: props.tabIndex,
                    "aria-describedby": props.ariaDescribedBy,
                    disabled: disabled,
                    onChange: function (e) {
                        return changeValue(e.target.checked);
                    },
                    onFocus: props.onFocus,
                    onBlur: props.onBlur,
                    onKeyDown: function (e) {
                        if (e.key === "Enter") {
                            e.preventDefault();
                            if (e.shiftKey && props.onSubmit) {
                                props.onSubmit();
                            } else {
                                changeValue(!value);
                            }
                        } else if (e.key === "Escape") {
                            e.currentTarget.blur();
                        } else if (e.key === "Tab") {
                            if (e.shiftKey) {
                                if (props.onCancel) {
                                    e.preventDefault();
                                    props.onCancel();
                                }
                            } else if ((props.tabSubmit || typeof props.tabSubmit !== "boolean") && props.onSubmit) {
                                e.preventDefault();
                                props.onSubmit();
                            }
                        }
                    },
                }),
                (0, jsx_runtime_1.jsxs)("span", {
                    children: [
                        props.label || "...",
                        props.required &&
                            !props.styles.hideRequiredIndicator &&
                            (0, jsx_runtime_1.jsx)(required_indicator_1.RequiredIndicatorFabric, { $errorColor: props.styles.errorColor }),
                        props.description &&
                            (0, jsx_runtime_1.jsxs)("small", { children: [(0, jsx_runtime_1.jsx)("br", {}), props.description] }),
                    ],
                }),
                (0, jsx_runtime_1.jsx)("span", {}),
            ],
        }),
    });
};
exports.CheckboxFabric = CheckboxFabric;
var templateObject_1, templateObject_2;
