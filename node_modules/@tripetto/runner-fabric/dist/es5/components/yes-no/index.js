"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.YesNoFabric = void 0;
var tslib_1 = require("tslib");
var jsx_runtime_1 = require("react/jsx-runtime");
var styled_components_1 = require("styled-components");
var react_1 = require("react");
var runner_1 = require("@tripetto/runner");
var helpers_1 = require("../helpers");
var button_1 = require("../button");
var yes_1 = require("../../icons/yes");
var no_1 = require("../../icons/no");
var const_1 = require("../const");
var YesNoElement = styled_components_1.styled.div(
    templateObject_1 ||
        (templateObject_1 = tslib_1.__makeTemplateObject(
            [
                "\n    display: block;\n    width: 100%;\n\n    > * {\n        display: ",
                ";\n    }\n\n    > * + * {\n        margin-top: ",
                ";\n    }\n",
            ],
            [
                "\n    display: block;\n    width: 100%;\n\n    > * {\n        display: ",
                ";\n    }\n\n    > * + * {\n        margin-top: ",
                ";\n    }\n",
            ]
        )),
    function (props) {
        return (props.$alignment === "vertical" && "block") || undefined;
    },
    function (props) {
        return (props.$alignment === "vertical" && "".concat(props.$margin || 8, "px")) || undefined;
    }
);
var getIcon = function (icon) {
    switch (icon) {
        case "yes":
            return yes_1.yesIcon;
        case "no":
            return no_1.noIcon;
    }
};
var assertValue = function (valueRef, reference, labels) {
    if (reference === "yes" || reference === "no") {
        if (valueRef.reference !== reference) {
            var value = reference === "yes" ? labels.yes.label : labels.no.label;
            valueRef.set(value, reference, value);
        }
        return reference;
    }
    valueRef.clear();
    return "";
};
var YesNoFabric = function (props) {
    var valueRef = props.value;
    var debounceRef = (0, react_1.useRef)(0);
    var _a = (0, react_1.useState)((typeof valueRef !== "object" && valueRef) || ""),
        proxy = _a[0],
        setProxy = _a[1];
    var _b =
            typeof valueRef === "object"
                ? [
                      debounceRef.current !== 0 ? proxy : assertValue(valueRef, valueRef.reference, props),
                      function (val) {
                          (0, runner_1.cancelUITimeout)(debounceRef.current);
                          setProxy(val);
                          debounceRef.current = (0, runner_1.scheduleUITimeout)(function () {
                              debounceRef.current = 0;
                              assertValue(valueRef, val, props);
                              if (props.autoSubmit && val) {
                                  (0, helpers_1.handleAutoSubmit)(autoSubmit);
                              }
                          }, const_1.DEBOUNCE_NORMAL);
                      },
                  ]
                : [proxy, setProxy],
        value = _b[0],
        setValue = _b[1];
    var autoSubmit = (0, react_1.useRef)({
        id: 0,
        cb: props.onSubmit,
    });
    var changeValue = function (val) {
        if (autoSubmit.current.id) {
            clearTimeout(autoSubmit.current.id);
            autoSubmit.current.id = 0;
        }
        setValue(val || "");
        if (props.onChange) {
            props.onChange(val || "");
        }
        if (typeof valueRef !== "object" && props.autoSubmit && val) {
            (0, helpers_1.handleAutoSubmit)(autoSubmit);
        }
    };
    var handleKeyDown = function (e, b) {
        if (
            e.key === "y" ||
            e.key === "Y" ||
            e.key === props.yes.label.charAt(0).toLowerCase() ||
            e.key === props.yes.label.charAt(0).toUpperCase()
        ) {
            e.preventDefault();
            changeValue("yes");
        } else if (
            e.key === "n" ||
            e.key === "N" ||
            e.key === props.no.label.charAt(0).toLowerCase() ||
            e.key === props.no.label.charAt(0).toUpperCase()
        ) {
            e.preventDefault();
            changeValue("no");
        } else if (e.shiftKey && e.key === "Enter" && props.onSubmit) {
            e.preventDefault();
            props.onSubmit();
        } else if (e.key === "Escape") {
            e.currentTarget.blur();
        } else if (e.key === "Tab") {
            if (e.shiftKey) {
                if (b === "yes" && props.onCancel) {
                    e.preventDefault();
                    props.onCancel();
                }
            } else if (b === "no" && props.onSubmit) {
                e.preventDefault();
                props.onSubmit();
            }
        }
    };
    (0, react_1.useEffect)(function () {
        return function () {
            (0, runner_1.cancelUITimeout)(debounceRef.current);
        };
    }, []);
    autoSubmit.current.cb = props.onSubmit;
    return (0, jsx_runtime_1.jsxs)(YesNoElement, {
        $alignment: props.styles.alignment,
        $margin: props.styles.margin,
        children: [
            (0, jsx_runtime_1.jsx)(button_1.ButtonFabric, {
                styles: {
                    baseColor: props.yes.color || props.styles.yesColor,
                    mode: value === "yes" ? "fill" : "outline",
                    hover: "outline",
                    outlineSize: props.styles.outlineSize,
                    roundness: props.styles.roundness,
                    scale: props.styles.scale,
                    group: (props.styles.alignment !== "vertical" && "start") || undefined,
                },
                label: props.yes.label,
                icon: props.yes.icon && getIcon(props.yes.icon),
                iconPosition: "left",
                tabIndex: props.tabIndex,
                ariaDescribedBy: props.ariaDescribedBy,
                disabled:
                    props.disabled || props.readOnly || (typeof valueRef === "object" && (valueRef.isFrozen || valueRef.isLocked)) || false,
                onAutoFocus: ((!value || value === "yes") && props.onAutoFocus) || undefined,
                onFocus: props.onFocus,
                onBlur: props.onBlur,
                onKeyDown: function (e) {
                    return handleKeyDown(e, "yes");
                },
                onClick: function () {
                    return changeValue((props.required || value !== "yes") && "yes");
                },
            }),
            (0, jsx_runtime_1.jsx)(button_1.ButtonFabric, {
                styles: {
                    baseColor: props.no.color || props.styles.noColor,
                    mode: value === "no" ? "fill" : "outline",
                    hover: "outline",
                    outlineSize: props.styles.outlineSize,
                    roundness: props.styles.roundness,
                    scale: props.styles.scale,
                    group: (props.styles.alignment !== "vertical" && "end") || undefined,
                },
                label: props.no.label,
                icon: props.no.icon && getIcon(props.no.icon),
                iconPosition: "right",
                tabIndex: props.tabIndex,
                ariaDescribedBy: props.ariaDescribedBy,
                disabled:
                    props.disabled || props.readOnly || (typeof valueRef === "object" && (valueRef.isFrozen || valueRef.isLocked)) || false,
                onAutoFocus: (value === "no" && props.onAutoFocus) || undefined,
                onFocus: props.onFocus,
                onBlur: props.onBlur,
                onKeyDown: function (e) {
                    return handleKeyDown(e, "no");
                },
                onClick: function () {
                    return changeValue((props.required || value !== "no") && "no");
                },
            }),
        ],
    });
};
exports.YesNoFabric = YesNoFabric;
var templateObject_1;
