"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DateTimeFabric = exports.DateInputElement = void 0;
var tslib_1 = require("tslib");
var jsx_runtime_1 = require("react/jsx-runtime");
var styled_components_1 = require("styled-components");
var react_1 = require("react");
var runner_1 = require("@tripetto/runner");
var helpers_1 = require("../helpers");
var color_1 = require("../../color");
var warning_1 = require("../../icons/warning");
var const_1 = require("../const");
exports.DateInputElement = styled_components_1.styled.input(
    templateObject_2 ||
        (templateObject_2 = tslib_1.__makeTemplateObject(
            [
                "\n    appearance: none;\n    outline: none;\n    box-sizing: border-box;\n    display: block;\n    width: 100%;\n    height: ",
                ";\n    font-size: 1em;\n    line-height: 1.5em;\n    background-color: ",
                ";\n    background-image: ",
                ";\n    background-repeat: no-repeat;\n    background-size: ",
                "em;\n    background-position: right 0.6em center;\n    border: ",
                ";\n    color: ",
                ";\n    border-radius: ",
                ";\n    padding: ",
                ";\n    padding-right: ",
                ";\n    margin: 0;\n    opacity: 0.65;\n    transition:\n        color 0.15s ease-in-out,\n        background-color 0.15s ease-in-out,\n        border-color 0.15s ease-in-out,\n        box-shadow 0.15s ease-in-out,\n        opacity 0.15s ease-in-out;\n\n    &::placeholder {\n        color: ",
                ";\n        opacity: 0.5;\n        transition: color 0.15s ease-in-out opacity 0.15s ease-in-out;\n    }\n\n    &:not(:disabled):not([readonly]) {\n        opacity: 1;\n\n        &:hover {\n            box-shadow: ",
                ";\n        }\n\n        ",
                "\n    }\n\n    &::-webkit-clear-button,\n    &::-webkit-inner-spin-button {\n        -webkit-appearance: none;\n        margin: 0;\n        height: 1px;\n        display: none;\n    }\n",
            ],
            [
                "\n    appearance: none;\n    outline: none;\n    box-sizing: border-box;\n    display: block;\n    width: 100%;\n    height: ",
                ";\n    font-size: 1em;\n    line-height: 1.5em;\n    background-color: ",
                ";\n    background-image: ",
                ";\n    background-repeat: no-repeat;\n    background-size: ",
                "em;\n    background-position: right 0.6em center;\n    border: ",
                ";\n    color: ",
                ";\n    border-radius: ",
                ";\n    padding: ",
                ";\n    padding-right: ",
                ";\n    margin: 0;\n    opacity: 0.65;\n    transition:\n        color 0.15s ease-in-out,\n        background-color 0.15s ease-in-out,\n        border-color 0.15s ease-in-out,\n        box-shadow 0.15s ease-in-out,\n        opacity 0.15s ease-in-out;\n\n    &::placeholder {\n        color: ",
                ";\n        opacity: 0.5;\n        transition: color 0.15s ease-in-out opacity 0.15s ease-in-out;\n    }\n\n    &:not(:disabled):not([readonly]) {\n        opacity: 1;\n\n        &:hover {\n            box-shadow: ",
                ";\n        }\n\n        ",
                "\n    }\n\n    &::-webkit-clear-button,\n    &::-webkit-inner-spin-button {\n        -webkit-appearance: none;\n        margin: 0;\n        height: 1px;\n        display: none;\n    }\n",
            ]
        )),
    function (props) {
        return props.$height ? "".concat(props.$height, "px") : undefined;
    },
    function (props) {
        return (0, color_1.color)(
            props.$error && props.$backgroundColor !== "transparent" && props.$borderColor === "transparent"
                ? props.$errorColor
                : props.$backgroundColor
        );
    },
    function (props) {
        return props.$error
            ? 'url("data:image/svg+xml;base64,'.concat(
                  (0, warning_1.warningIcon)(
                      (0, color_1.color)(props.$errorColor, function (o) {
                          return o.makeBlackOrWhite(props.$backgroundColor !== "transparent" && props.$borderColor === "transparent");
                      })
                  ),
                  '")'
              )
            : "";
    },
    8 / 7,
    function (props) {
        return ""
            .concat(props.$backgroundColor === "transparent" && props.$borderColor === "transparent" ? 0 : props.$borderSize, "px solid ")
            .concat(
                (0, color_1.color)(
                    props.$error
                        ? props.$errorColor
                        : props.$borderColor && props.$borderColor !== "transparent"
                        ? props.$borderColor
                        : props.$backgroundColor
                )
            );
    },
    function (props) {
        return (0, color_1.color)(
            props.$error
                ? props.$backgroundColor !== "transparent" && props.$borderColor === "transparent"
                    ? (0, color_1.color)(props.$errorColor, function (o) {
                          return o.makeBlackOrWhite();
                      })
                    : props.$errorColor
                : props.$textColor
                ? props.$textColor
                : props.$borderColor && props.$borderColor !== "transparent"
                ? props.$borderColor
                : (0, color_1.color)(props.$backgroundColor, function (o) {
                      return o.makeBlackOrWhite();
                  })
        );
    },
    function (props) {
        return (0, runner_1.isNumberFinite)(props.$roundness) ? "".concat(props.$roundness, "px") : "0.5em";
    },
    function (props) {
        return props.$backgroundColor === "transparent" && props.$borderColor === "transparent"
            ? "0"
            : "".concat(0.375 * props.$scale, "em 0.75em");
    },
    function (props) {
        return (props.$error && "".concat(8 / 7 + 0.75, "em")) || undefined;
    },
    function (props) {
        return (0, color_1.color)(
            props.$error
                ? props.$backgroundColor !== "transparent" && props.$borderColor === "transparent"
                    ? (0, color_1.color)(props.$errorColor, function (o) {
                          return o.makeBlackOrWhite();
                      })
                    : props.$errorColor
                : props.$textColor
                ? props.$textColor
                : props.$borderColor && props.$borderColor !== "transparent"
                ? props.$borderColor
                : (0, color_1.color)(props.$backgroundColor, function (o) {
                      return o.makeBlackOrWhite();
                  })
        );
    },
    function (props) {
        return (
            (props.$placeholder &&
                (props.$backgroundColor !== "transparent" || props.$borderColor !== "transparent") &&
                "0 0 0 0.2rem ".concat(
                    (0, color_1.color)(
                        props.$error
                            ? props.$errorColor
                            : props.$borderColor && props.$borderColor !== "transparent"
                            ? props.$borderColor
                            : props.$backgroundColor,
                        function (o) {
                            return o.manipulate(function (m) {
                                return m.alpha(0.2);
                            });
                        }
                    )
                )) ||
            undefined
        );
    },
    function (props) {
        return (
            !props.$placeholder &&
            (0, styled_components_1.css)(
                templateObject_1 ||
                    (templateObject_1 = tslib_1.__makeTemplateObject(
                        [
                            "\n                background-color: ",
                            ";\n                background-image: none;\n                border-color: ",
                            ";\n                color: ",
                            ";\n                box-shadow: ",
                            ";\n                &::placeholder {\n                    color: ",
                            ";\n                    opacity: 0.3;\n                }\n            ",
                        ],
                        [
                            "\n                background-color: ",
                            ";\n                background-image: none;\n                border-color: ",
                            ";\n                color: ",
                            ";\n                box-shadow: ",
                            ";\n                &::placeholder {\n                    color: ",
                            ";\n                    opacity: 0.3;\n                }\n            ",
                        ]
                    )),
                (0, color_1.color)(props.$backgroundColor),
                (0, color_1.color)(
                    props.$borderColor && props.$borderColor !== "transparent" ? props.$borderColor : props.$backgroundColor
                ),
                (0, color_1.color)(
                    props.$textColor
                        ? props.$textColor
                        : props.$borderColor && props.$borderColor !== "transparent"
                        ? props.$borderColor
                        : (0, color_1.color)(props.$backgroundColor, function (o) {
                              return o.makeBlackOrWhite();
                          })
                ),
                ((props.$backgroundColor !== "transparent" || props.$borderColor !== "transparent") &&
                    "0 0 0 0.2rem ".concat(
                        (0, color_1.color)(
                            props.$borderColor && props.$borderColor !== "transparent" ? props.$borderColor : props.$backgroundColor,
                            function (o) {
                                return o.manipulate(function (m) {
                                    return m.alpha(0.5);
                                });
                            }
                        )
                    )) ||
                    undefined,
                (0, color_1.color)(
                    props.$textColor
                        ? props.$textColor
                        : props.$borderColor && props.$borderColor !== "transparent"
                        ? props.$borderColor
                        : (0, color_1.color)(props.$backgroundColor, function (o) {
                              return o.makeBlackOrWhite();
                          })
                )
            )
        );
    }
);
function parseValue(value, mode) {
    if (mode === void 0) {
        mode = "datetime";
    }
    if (!value) {
        return "";
    }
    if (value instanceof Date) {
        value = value.getTime();
    }
    if (value !== 0) {
        var date = value === true ? new Date() : new Date(value);
        return (
            ""
                .concat(date.getUTCFullYear(), "-")
                .concat(runner_1.Str.padLeft(date.getUTCMonth() + 1, "0", 2), "-")
                .concat(runner_1.Str.padLeft(date.getUTCDate(), "0", 2)) +
            (mode === "datetime"
                ? "T"
                      .concat(runner_1.Str.padLeft(date.getUTCHours(), "0", 2), ":")
                      .concat(runner_1.Str.padLeft(date.getUTCMinutes(), "0", 2))
                : "")
        );
    }
    return "";
}
function parseInput(value) {
    if (value) {
        var src = runner_1.Str.uppercase(runner_1.Str.sanitize(value)).replace(" ", "T").split("T");
        if (src.length > 0) {
            var date = runner_1.Str.replaceMultiple(src[0], ["/", "\\"], "-").split("-");
            var time = src.length > 1 ? runner_1.Str.replace(src[1], ".", ":").split(":") : ["0", "0"];
            if (date.length === 3 && time.length >= 2) {
                return new Date(
                    ""
                        .concat(runner_1.Str.padLeft((0, runner_1.castToNumber)(date[0]), "0", 4), "-")
                        .concat(runner_1.Str.padLeft((0, runner_1.castToNumber)(date[1]), "0", 2), "-")
                        .concat(runner_1.Str.padLeft((0, runner_1.castToNumber)(date[2]), "0", 2), "T")
                        .concat(runner_1.Str.padLeft((0, runner_1.castToNumber)(time[0]), "0", 2), ":")
                        .concat(runner_1.Str.padLeft((0, runner_1.castToNumber)(time[1]), "0", 2), ":00.000Z")
                );
            }
        }
    }
    return new Date(0);
}
var DateTimeFabric = function (props) {
    var _a, _b;
    var valueRef = props.value instanceof Date ? props.value.getTime() : props.value;
    var debounceRef = (0, react_1.useRef)({
        duration: 0,
        handle: 0,
    });
    var _c = (0, react_1.useState)("text"),
        type = _c[0],
        setType = _c[1];
    var _d = (0, react_1.useState)(0),
        height = _d[0],
        setHeight = _d[1];
    var _e = (0, react_1.useState)(false),
        focus = _e[0],
        setFocus = _e[1];
    var _f = (0, react_1.useState)(
            typeof valueRef === "object"
                ? parseValue(valueRef.slot.toValue(valueRef.pristine), props.mode || "date")
                : typeof valueRef === "number"
                ? parseValue(valueRef, props.mode || "date")
                : ""
        ),
        focusValue = _f[0],
        setFocusValue = _f[1];
    var _g =
            typeof valueRef === "object" && !(valueRef instanceof Date)
                ? [
                      focus
                          ? focusValue
                          : valueRef.hasValue
                          ? parseValue(valueRef.slot.toValue(valueRef.pristine), props.mode || "date")
                          : "",
                      function (val) {
                          (0, runner_1.cancelUITimeout)(debounceRef.current.handle);
                          setFocusValue(val);
                          var nTimeout = runner_1.Num.range(debounceRef.current.duration * 2, const_1.DEBOUNCE_MIN, const_1.DEBOUNCE_MAX);
                          debounceRef.current.handle = (0, runner_1.scheduleUITimeout)(function () {
                              var start = runner_1.DateTime.precise;
                              debounceRef.current.handle = 0;
                              debounceRef.current.update = function () {
                                  debounceRef.current.duration = runner_1.DateTime.elapsed(start, true);
                                  debounceRef.current.update = undefined;
                              };
                              valueRef.pristine = val !== "" ? parseInput(val).getTime() : undefined;
                          }, nTimeout);
                      },
                  ]
                : [focusValue, setFocusValue],
        value = _g[0],
        setValue = _g[1];
    var _h = (0, react_1.useState)(value ? true : false),
        errorVisible = _h[0],
        makeErrorVisible = _h[1];
    var focusRef = (0, react_1.useRef)(false);
    var isReadOnly = function () {
        return props.readOnly || (typeof valueRef === "object" && (valueRef.isFrozen || valueRef.isLocked)) || false;
    };
    var styles = {
        $backgroundColor: props.styles.backgroundColor || "transparent",
        $borderColor: props.styles.borderColor || "transparent",
        $borderSize: props.styles.borderSize || 1,
        $roundness: props.styles.roundness,
        $textColor: props.styles.textColor,
        $errorColor: props.styles.errorColor,
        $errorVisible: errorVisible,
        $error: props.error || false,
        $scale: props.styles.scale || 1,
        $placeholder: true,
        $height: height,
    };
    (0, react_1.useEffect)(function () {
        return function () {
            (0, runner_1.cancelUITimeout)(debounceRef.current.handle);
        };
    }, []);
    if (debounceRef.current.update) {
        debounceRef.current.update();
    }
    return (0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, {
        children: [
            (type === "text" || isReadOnly()) &&
                (0, jsx_runtime_1.jsx)(
                    exports.DateInputElement,
                    tslib_1.__assign(
                        {
                            id: props.id,
                            ref: props.onAutoFocus,
                            type: "text",
                            tabIndex: props.tabIndex,
                            placeholder: props.placeholder,
                            required: props.required || false,
                            disabled: props.disabled || false,
                            readOnly: isReadOnly(),
                            value:
                                (value &&
                                    (props.mode === "datetime"
                                        ? (
                                              ((_a = props.l10n) === null || _a === void 0 ? void 0 : _a.locale) || runner_1.L10n.Locales
                                          ).dateTimeFull(parseInput(value).getTime(), true)
                                        : (
                                              ((_b = props.l10n) === null || _b === void 0 ? void 0 : _b.locale) || runner_1.L10n.Locales
                                          ).dateFull(parseInput(value).getTime(), true))) ||
                                "",
                            autoComplete: "off",
                            inputMode: "none",
                            "aria-describedby": props.ariaDescribedBy,
                            onChange: function () {
                                return undefined;
                            },
                            onFocus: function (e) {
                                if (!isReadOnly()) {
                                    focusRef.current = true;
                                    setHeight(e.target.getBoundingClientRect().height);
                                    setType(props.mode === "datetime" ? "datetime-local" : "date");
                                }
                                (0, helpers_1.handleFocus)(setFocus, setValue, props.onFocus)(e);
                            },
                            onBlur: function (e) {
                                if (!isReadOnly()) {
                                    (0, helpers_1.handleBlur)(setFocus, setValue, props.onBlur)(e);
                                }
                            },
                        },
                        styles
                    )
                ),
            type !== "text" &&
                !isReadOnly() &&
                (0, jsx_runtime_1.jsx)(
                    exports.DateInputElement,
                    tslib_1.__assign(
                        {
                            id: props.id,
                            ref: function (el) {
                                if (focusRef.current && el) {
                                    focusRef.current = false;
                                    el.focus();
                                }
                            },
                            type: type,
                            placeholder: "yyyy-MM-ddThh:mm",
                            tabIndex: props.tabIndex,
                            required: true,
                            disabled: props.disabled || false,
                            defaultValue: value,
                            autoComplete: "off",
                            "aria-describedby": props.ariaDescribedBy,
                            min: parseValue((typeof valueRef === "object" && valueRef.slot.minimum) || undefined) || undefined,
                            max: parseValue((typeof valueRef === "object" && valueRef.slot.maximum) || undefined) || undefined,
                            onChange: function (e) {
                                setValue(e.target.value);
                                makeErrorVisible(true);
                                if (props.onChange) {
                                    var returnValue = props.onChange(parseInput(e.target.value));
                                    if (returnValue instanceof Date) {
                                        (0, helpers_1.setReturnValue)(setValue, parseValue(returnValue, props.mode || "date"));
                                    }
                                }
                            },
                            onFocus: function (e) {
                                (0, helpers_1.handleFocus)(setFocus, setValue, props.onFocus)(e);
                            },
                            onBlur: function (e) {
                                setType("text");
                                if (typeof valueRef === "object" && valueRef.hasValue) {
                                    setFocusValue(parseValue(valueRef.slot.toValue(valueRef.pristine), props.mode || "date"));
                                }
                                (0, helpers_1.handleBlur)(setFocus, setValue, props.onBlur)(e);
                            },
                            onKeyDown: function (e) {
                                if (e.key === "Enter" && props.onSubmit) {
                                    e.preventDefault();
                                    props.onSubmit();
                                } else if (e.key === "Escape") {
                                    e.currentTarget.blur();
                                } else if (e.key === "Tab") {
                                    if (e.shiftKey) {
                                        if (props.onCancel) {
                                            e.preventDefault();
                                            props.onCancel();
                                        }
                                    } else if (props.onSubmit) {
                                        e.preventDefault();
                                        props.onSubmit();
                                    }
                                }
                            },
                        },
                        styles
                    )
                ),
        ],
    });
};
exports.DateTimeFabric = DateTimeFabric;
var templateObject_1, templateObject_2;
