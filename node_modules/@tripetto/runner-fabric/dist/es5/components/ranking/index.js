"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RankingFabric = void 0;
var tslib_1 = require("tslib");
var jsx_runtime_1 = require("react/jsx-runtime");
var styled_components_1 = require("styled-components");
var react_1 = require("react");
var runner_1 = require("@tripetto/runner");
var color_1 = require("../../color");
var position_1 = require("../../icons/position");
var RankingElement = styled_components_1.styled.div(
    templateObject_1 ||
        (templateObject_1 = tslib_1.__makeTemplateObject(
            [
                "\n    display: table;\n    width: auto;\n\n    > * {\n        display: block;\n        width: 100%;\n        margin-top: 8px !important;\n\n        > span {\n            overflow: hidden;\n        }\n    }\n",
            ],
            [
                "\n    display: table;\n    width: auto;\n\n    > * {\n        display: block;\n        width: 100%;\n        margin-top: 8px !important;\n\n        > span {\n            overflow: hidden;\n        }\n    }\n",
            ]
        ))
);
var RankingOptionElement = styled_components_1.styled.button(
    templateObject_2 ||
        (templateObject_2 = tslib_1.__makeTemplateObject(
            [
                "\n    appearance: none;\n    position: relative;\n    display: flex;\n    flex-direction: row;\n    flex-wrap: nowrap;\n    align-items: flex-start;\n    justify-content: space-between;\n    font-size: 1em;\n    line-height: 1.5em;\n    outline: none;\n    user-select: none;\n    box-sizing: border-box;\n    background-color: ",
                ";\n    border: ",
                ";\n    color: ",
                ";\n    text-align: left;\n    border-radius: ",
                ";\n    padding: ",
                ";\n    margin: 0;\n    opacity: ",
                ";\n    transition:\n        color 0.15s ease-in-out,\n        background-color 0.15s ease-in-out,\n        border-color 0.15s ease-in-out,\n        box-shadow 0.15s ease-in-out,\n        opacity 0.15s ease-in-out,\n        transform 0.15s ease-out;\n\n    > select {\n        display: block;\n        flex-shrink: 0;\n        font-size: 0.8em;\n        background-color: ",
                ";\n        color: ",
                ";\n        border: ",
                ";\n        border-radius: ",
                ";\n        margin-right: 0.75em;\n    }\n\n    > span {\n        display: table-cell;\n        flex-grow: 1;\n\n        > small {\n            display: block;\n            font-size: 0.8em;\n            opacity: 0.8;\n        }\n    }\n\n    > div {\n        position: absolute;\n        top: 0;\n        right: 0;\n        width: 3em;\n        bottom: 0;\n        display: flex;\n        align-items: center;\n        justify-content: flex-end;\n        touch-action: none;\n        padding-right: 0.75em;\n\n        > svg {\n            width: 1.3em;\n            height: 1.3em;\n            pointer-events: none;\n\n            path {\n                fill: ",
                ";\n                transition: fill 0.15s ease-in-out;\n            }\n        }\n    }\n\n    &:not(:disabled) {\n        cursor: grab;\n        opacity: 1;\n\n        &:hover {\n            background-color: ",
                ";\n            border-color: ",
                ";\n            color: ",
                ";\n            box-shadow: 0 0 0 0.2rem ",
                ";\n\n            svg {\n                path {\n                    fill: ",
                ";\n                }\n            }\n        }\n\n        &:focus {\n            box-shadow: 0 0 0 0.2rem ",
                ";\n        }\n\n        &:active {\n            box-shadow: 0 0 0 0.2rem ",
                ";\n            background-color: ",
                ";\n        }\n    }\n",
            ],
            [
                "\n    appearance: none;\n    position: relative;\n    display: flex;\n    flex-direction: row;\n    flex-wrap: nowrap;\n    align-items: flex-start;\n    justify-content: space-between;\n    font-size: 1em;\n    line-height: 1.5em;\n    outline: none;\n    user-select: none;\n    box-sizing: border-box;\n    background-color: ",
                ";\n    border: ",
                ";\n    color: ",
                ";\n    text-align: left;\n    border-radius: ",
                ";\n    padding: ",
                ";\n    margin: 0;\n    opacity: ",
                ";\n    transition:\n        color 0.15s ease-in-out,\n        background-color 0.15s ease-in-out,\n        border-color 0.15s ease-in-out,\n        box-shadow 0.15s ease-in-out,\n        opacity 0.15s ease-in-out,\n        transform 0.15s ease-out;\n\n    > select {\n        display: block;\n        flex-shrink: 0;\n        font-size: 0.8em;\n        background-color: ",
                ";\n        color: ",
                ";\n        border: ",
                ";\n        border-radius: ",
                ";\n        margin-right: 0.75em;\n    }\n\n    > span {\n        display: table-cell;\n        flex-grow: 1;\n\n        > small {\n            display: block;\n            font-size: 0.8em;\n            opacity: 0.8;\n        }\n    }\n\n    > div {\n        position: absolute;\n        top: 0;\n        right: 0;\n        width: 3em;\n        bottom: 0;\n        display: flex;\n        align-items: center;\n        justify-content: flex-end;\n        touch-action: none;\n        padding-right: 0.75em;\n\n        > svg {\n            width: 1.3em;\n            height: 1.3em;\n            pointer-events: none;\n\n            path {\n                fill: ",
                ";\n                transition: fill 0.15s ease-in-out;\n            }\n        }\n    }\n\n    &:not(:disabled) {\n        cursor: grab;\n        opacity: 1;\n\n        &:hover {\n            background-color: ",
                ";\n            border-color: ",
                ";\n            color: ",
                ";\n            box-shadow: 0 0 0 0.2rem ",
                ";\n\n            svg {\n                path {\n                    fill: ",
                ";\n                }\n            }\n        }\n\n        &:focus {\n            box-shadow: 0 0 0 0.2rem ",
                ";\n        }\n\n        &:active {\n            box-shadow: 0 0 0 0.2rem ",
                ";\n            background-color: ",
                ";\n        }\n    }\n",
            ]
        )),
    function (props) {
        return (props.$mode === "fill" && (0, color_1.color)(props.$baseColor)) || "transparent";
    },
    function (props) {
        return "".concat(props.$outlineSize, "px solid ").concat(
            (0, color_1.color)(props.$baseColor, function (o) {
                return o.manipulate(function (m) {
                    return m.darken(0.1);
                }, props.$mode === "fill");
            })
        );
    },
    function (props) {
        return (0, color_1.color)(props.$baseColor, function (o) {
            return o.makeBlackOrWhite(props.$mode === "fill");
        });
    },
    function (props) {
        return (0, runner_1.isNumberFinite)(props.$roundness) ? "".concat(props.$roundness, "px") : "0.5em";
    },
    function (props) {
        return ""
            .concat(0.375 * props.$scale, "em 2.75em ")
            .concat(0.375 * props.$scale, "em ")
            .concat(0.375 * props.$scale, "em");
    },
    function (props) {
        return props.$mode === "outline" ? 0.2 : 0.4;
    },
    function (props) {
        return props.$mode === "fill"
            ? (0, color_1.color)(props.$baseColor, function (o) {
                  return o.makeBlackOrWhite(true);
              })
            : props.$baseColor;
    },
    function (props) {
        return props.$mode === "fill"
            ? props.$baseColor
            : (0, color_1.color)(props.$baseColor, function (o) {
                  return o.makeBlackOrWhite(true);
              });
    },
    function (props) {
        return "0.3em solid ".concat(
            props.$mode === "fill"
                ? (0, color_1.color)(props.$baseColor, function (o) {
                      return o.makeBlackOrWhite(true);
                  })
                : props.$baseColor
        );
    },
    function (props) {
        return props.$roundness !== 0 ? "".concat(props.$roundness || 5, "px") : "0px";
    },
    function (props) {
        return (0, color_1.color)(props.$baseColor, function (o) {
            return o.makeBlackOrWhite(props.$mode === "fill");
        });
    },
    function (props) {
        return (
            (props.$hover === "fill" &&
                (0, color_1.color)(props.$baseColor, function (o) {
                    return o.manipulate(function (m) {
                        return m.darken(0.05);
                    }, props.$mode === "fill");
                })) ||
            undefined
        );
    },
    function (props) {
        return (
            (props.$hover === "fill" &&
                (0, color_1.color)(props.$baseColor, function (o) {
                    return o.manipulate(function (m) {
                        return m.darken(0.1);
                    }, props.$mode === "fill");
                })) ||
            undefined
        );
    },
    function (props) {
        return (
            (props.$mode === "outline" &&
                props.$hover === "fill" &&
                (0, color_1.color)(props.$baseColor, function (o) {
                    return o.makeBlackOrWhite();
                })) ||
            undefined
        );
    },
    function (props) {
        return (0, color_1.color)(props.$baseColor, function (o) {
            return o.manipulate(function (m) {
                return m.alpha(0.2);
            });
        });
    },
    function (props) {
        return (
            (props.$mode === "outline" &&
                props.$hover === "fill" &&
                (0, color_1.color)(props.$baseColor, function (o) {
                    return o.makeBlackOrWhite();
                })) ||
            undefined
        );
    },
    function (props) {
        return (0, color_1.color)(props.$baseColor, function (o) {
            return o.manipulate(function (m) {
                return m.alpha(0.5);
            });
        });
    },
    function (props) {
        return (0, color_1.color)(props.$baseColor, function (o) {
            return o.manipulate(function (m) {
                return m.alpha(0.5);
            });
        });
    },
    function (props) {
        return (
            props.$hover === "fill" &&
            (0, color_1.color)(props.$baseColor, function (o) {
                return o.manipulate(function (m) {
                    return m.darken(0.15);
                });
            })
        );
    }
);
var RankingFabric = function (props) {
    var _a;
    var rankingRef = (0, react_1.useRef)([]);
    var slotsRef = (0, react_1.useRef)({});
    var _b = (0, react_1.useState)({}),
        animations = _b[0],
        update = _b[1];
    var onPointerDown = function (index) {
        return function (e) {
            var item = rankingRef.current[index];
            if (
                item.ref &&
                typeof item.moveId !== "number" &&
                e.isPrimary &&
                e.target.tagName !== "SELECT" &&
                e.target.tagName !== "A" &&
                (e.pointerType === "mouse" || e.target.tagName === "DIV")
            ) {
                item.moveHeight = item.ref.nextElementSibling
                    ? item.ref.nextElementSibling.getBoundingClientRect().top - item.ref.getBoundingClientRect().top
                    : item.ref.previousElementSibling
                    ? item.ref.getBoundingClientRect().bottom - item.ref.previousElementSibling.getBoundingClientRect().bottom
                    : 0;
                if (item.moveHeight > 0) {
                    e.preventDefault();
                    e.stopPropagation();
                    item.moveId = e.pointerId;
                    item.moveX = e.clientX;
                    item.moveY = item.moveDirection = e.clientY;
                    item.ref.setPointerCapture(item.moveId);
                    item.ref.focus();
                    update({});
                }
            }
        };
    };
    var onPointerMove = function (index) {
        return function (e) {
            var item = rankingRef.current[index];
            if (e.isPrimary && typeof item.moveId === "number" && item.ref) {
                var rect = item.ref.getBoundingClientRect();
                var movementY = e.clientY - (item.moveDirection || 0);
                e.preventDefault();
                e.stopPropagation();
                item.moveDirection = e.clientY;
                item.ref.style.transform = item.moveTransform = "translate3d("
                    .concat(e.clientX - (item.moveX || 0), "px,")
                    .concat(e.clientY - (item.moveY || 0), "px,0)");
                for (var i = 0; i < rankingRef.current.length; i++) {
                    if (i !== index) {
                        var sibling = rankingRef.current[i];
                        if (sibling.ref) {
                            var siblingRect = sibling.ref.getBoundingClientRect();
                            if (movementY > 0 && rect.bottom > siblingRect.top + siblingRect.height / 2) {
                                sibling.moveTransform = i > index ? "translateY(-".concat(item.moveHeight || 0, "px)") : "";
                            } else if (movementY < 0 && rect.top < siblingRect.top + siblingRect.height / 2) {
                                sibling.moveTransform = i < index ? "translateY(".concat(item.moveHeight || 0, "px)") : "";
                            }
                        }
                    }
                }
                update({});
            }
        };
    };
    var onPointerUp = function (index) {
        return function (e) {
            var _a, _b;
            var item = rankingRef.current[index];
            if (e.isPrimary && typeof item.moveId === "number") {
                var rect = (_a = item.ref) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect();
                var to = -1;
                e.preventDefault();
                e.stopPropagation();
                (_b = item.ref) === null || _b === void 0 ? void 0 : _b.releasePointerCapture(item.moveId);
                item.moveId = undefined;
                for (var i = 0; i < rankingRef.current.length; i++) {
                    var sibling = rankingRef.current[i];
                    sibling.moveTransform = undefined;
                    if ((to === -1 || i > index) && i !== index && sibling.ref && rect) {
                        var siblingRect = sibling.ref.getBoundingClientRect();
                        if (
                            (i < index && rect.top < siblingRect.top + siblingRect.height / 2) ||
                            (i > index && rect.bottom > siblingRect.top + siblingRect.height / 2)
                        ) {
                            to = i;
                        }
                    }
                }
                if (to !== -1) {
                    moveTo(index, to);
                } else {
                    update({
                        disable: true,
                    });
                }
            }
        };
    };
    var onKeyDown = function (index) {
        return function (e) {
            if (e.target.tagName !== "SELECT") {
                if (e.key === "Escape") {
                    e.currentTarget.blur();
                } else if (e.key === "Tab") {
                    e.currentTarget.blur();
                    if (e.shiftKey) {
                        if (props.onCancel && index === 0) {
                            e.preventDefault();
                            props.onCancel();
                        }
                    } else if (props.onSubmit && !e.shiftKey && index === rankingRef.current.length - 1) {
                        e.preventDefault();
                        props.onSubmit();
                    }
                } else if (e.key === "ArrowDown" || e.key === "ArrowUp") {
                    e.preventDefault();
                    e.stopPropagation();
                    if ((e.key === "ArrowDown" && index < rankingRef.current.length - 1) || (e.key === "ArrowUp" && index > 0)) {
                        moveTo(index, e.key === "ArrowDown" ? index + 1 : index - 1);
                    }
                } else if (e.keyCode >= 49 && e.keyCode <= 57) {
                    moveTo(index, e.keyCode - 49);
                }
            }
        };
    };
    var moveTo = function (src, dest) {
        if (dest === -1 && props.slots) {
            dest = runner_1.Num.min(props.slots.length, rankingRef.current.length);
        }
        if (src >= 0 && src < rankingRef.current.length && dest >= 0 && src !== dest) {
            rankingRef.current.splice(dest, 0, rankingRef.current.splice(src, 1)[0]);
            if (props.slots) {
                var free = 0;
                while (free < props.slots.length && props.slots[free].reference) {
                    free++;
                }
                if (dest < props.slots.length && dest - 1 === free) {
                    free++;
                }
                for (var i = 0; i < free; i++) {
                    var item = (0, runner_1.arrayItem)(rankingRef.current, i);
                    props.slots[i].set(
                        (item === null || item === void 0 ? void 0 : item.value) || (item === null || item === void 0 ? void 0 : item.name),
                        item === null || item === void 0 ? void 0 : item.id,
                        item === null || item === void 0 ? void 0 : item.name
                    );
                }
            }
        }
        update({
            disable: true,
        });
    };
    if (
        rankingRef.current.length !== props.options.length ||
        (0, runner_1.findFirst)(props.slots, function (slot) {
            return slotsRef.current[slot.key] !== slot.reference;
        })
    ) {
        var assigned_1 = [];
        var options_1 = (0, runner_1.filter)(rankingRef.current.splice(0, rankingRef.current.length), function (option) {
            return (0, runner_1.findFirst)(props.options, function (ref) {
                return ref.id === option.id;
            })
                ? true
                : false;
        });
        (0, runner_1.each)(props.slots, function (slot) {
            if (
                slot.reference &&
                !(0, runner_1.findFirst)(assigned_1, function (ref) {
                    return ref === slot.reference;
                })
            ) {
                var option = (0, runner_1.findFirst)(props.options, function (opt) {
                    return opt.id === slot.reference;
                });
                if (option) {
                    slotsRef.current[slot.key] = slot.reference;
                    assigned_1.push(slot.reference);
                    rankingRef.current.push(option);
                    for (var i = 0; i < options_1.length; i++) {
                        if (options_1[i].id === option.id) {
                            options_1.splice(i, 1);
                            break;
                        }
                    }
                } else {
                    slotsRef.current[slot.key] = undefined;
                    slot.set(undefined, undefined, undefined);
                }
            } else {
                slotsRef.current[slot.key] = undefined;
                if (slot.reference) {
                    slot.set(undefined, undefined, undefined);
                }
            }
        });
        (_a = rankingRef.current).push.apply(_a, options_1);
        (0, runner_1.each)(props.options, function (option) {
            if (
                !(0, runner_1.findFirst)(rankingRef.current, function (ref) {
                    return ref.id === option.id;
                })
            ) {
                rankingRef.current.push(option);
            }
        });
    }
    if (
        props.slots &&
        (0, runner_1.findFirst)(props.slots, function (slot) {
            return !slot.reference;
        })
    ) {
        for (var i = 0; i < props.slots.length; i++) {
            var item = (0, runner_1.arrayItem)(rankingRef.current, i);
            props.slots[i].set(
                (item === null || item === void 0 ? void 0 : item.value) || (item === null || item === void 0 ? void 0 : item.name),
                item === null || item === void 0 ? void 0 : item.id,
                item === null || item === void 0 ? void 0 : item.name
            );
        }
    }
    var allowDeselect = (props.slots && props.slots.length < rankingRef.current.length) || false;
    return (0, jsx_runtime_1.jsx)(RankingElement, {
        $margin: props.styles.margin,
        children: rankingRef.current.map(function (option, index) {
            var _a;
            var slot = (0, runner_1.arrayItem)(props.slots, index);
            var selected = (slot === null || slot === void 0 ? void 0 : slot.reference) === option.id;
            var disabled =
                (slot === null || slot === void 0 ? void 0 : slot.isFrozen) ||
                (slot === null || slot === void 0 ? void 0 : slot.isLocked) ||
                props.disabled;
            return (0, jsx_runtime_1.jsxs)(
                RankingOptionElement,
                {
                    ref: function (ref) {
                        if (ref) {
                            option.ref = ref;
                        }
                        if (!index && props.onAutoFocus) {
                            props.onAutoFocus(ref);
                        }
                    },
                    type: "button",
                    style:
                        (option.moveTransform && {
                            zIndex: (typeof option.moveId === "number" && 214748364) || undefined,
                            transition: (typeof option.moveId === "number" && "none") || undefined,
                            transform: option.moveTransform,
                            cursor: "grabbing",
                        }) ||
                        (animations.disable && {
                            transition: "none",
                        }) ||
                        undefined,
                    disabled: disabled,
                    tabIndex: props.tabIndex,
                    "aria-describedby": props.ariaDescribedBy,
                    onFocus: props.onFocus,
                    onBlur: props.onBlur,
                    onPointerDown: onPointerDown(index),
                    onPointerMove: onPointerMove(index),
                    onPointerUp: onPointerUp(index),
                    onPointerCancel: onPointerUp(index),
                    onKeyDown: onKeyDown(index),
                    $baseColor: props.styles.color,
                    $mode:
                        selected && (((_a = props.slots) === null || _a === void 0 ? void 0 : _a.length) || 0) < rankingRef.current.length
                            ? "fill"
                            : "outline",
                    $hover: "outline",
                    $outlineSize: props.styles.outlineSize || 1,
                    $roundness: props.styles.roundness,
                    $scale: props.styles.scale || 1,
                    children: [
                        (0, jsx_runtime_1.jsxs)("select", {
                            tabIndex: -1,
                            value: !allowDeselect || selected ? index : -1,
                            onChange: function (e) {
                                return moveTo(index, (0, runner_1.castToNumber)(e.currentTarget.value, -1));
                            },
                            title: option.name,
                            children: [
                                (props.slots || rankingRef.current).map(function (_, i) {
                                    return (0, jsx_runtime_1.jsx)("option", { value: i, children: i + 1 }, i);
                                }),
                                (allowDeselect && (0, jsx_runtime_1.jsx)("option", { value: -1, children: "-" })) || undefined,
                            ],
                        }),
                        (0, jsx_runtime_1.jsxs)("span", {
                            children: [
                                option.label || option.name || "...",
                                option.description && (0, jsx_runtime_1.jsx)("small", { children: option.description }),
                            ],
                        }),
                        (0, jsx_runtime_1.jsx)("div", { children: position_1.positionIcon }),
                    ],
                },
                option.id
            );
        }),
    });
};
exports.RankingFabric = RankingFabric;
var templateObject_1, templateObject_2;
