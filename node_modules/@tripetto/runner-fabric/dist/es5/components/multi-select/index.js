"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MultiSelectFabric = void 0;
var tslib_1 = require("tslib");
var jsx_runtime_1 = require("react/jsx-runtime");
var styled_components_1 = require("styled-components");
var react_1 = require("react");
var runner_1 = require("@tripetto/runner");
var helpers_1 = require("../helpers");
var color_1 = require("../../color");
var dropdown_1 = require("../../icons/dropdown");
var close_1 = require("../../icons/close");
var warning_1 = require("../../icons/warning");
var MultiSelectElement = styled_components_1.styled.div(
    templateObject_1 ||
        (templateObject_1 = tslib_1.__makeTemplateObject(
            [
                "\n    box-sizing: border-box;\n    display: block;\n    width: 100%;\n    font-size: 1em;\n    line-height: 1.5em;\n    background-color: ",
                ";\n    background-image: ",
                ";\n    background-repeat: no-repeat;\n    background-size: 1em, ",
                "em;\n    background-position:\n        right 0.375em center,\n        right 1.75em center;\n    border: ",
                ";\n    border-radius: ",
                ";\n    padding: ",
                ";\n    margin: 0;\n    opacity: 0.65;\n    transition:\n        background-color 0.15s ease-in-out,\n        border-color 0.15s ease-in-out,\n        box-shadow 0.15s ease-in-out,\n        opacity 0.15s ease-in-out;\n    cursor: default;\n\n    > div:first-child {\n        display: flex;\n        align-items: center;\n        flex-wrap: wrap;\n        flex-direction: row;\n    }\n\n    &:not(:disabled) {\n        opacity: 1;\n\n        ",
                "\n    }\n",
            ],
            [
                "\n    box-sizing: border-box;\n    display: block;\n    width: 100%;\n    font-size: 1em;\n    line-height: 1.5em;\n    background-color: ",
                ";\n    background-image: ",
                ";\n    background-repeat: no-repeat;\n    background-size: 1em, ",
                "em;\n    background-position:\n        right 0.375em center,\n        right 1.75em center;\n    border: ",
                ";\n    border-radius: ",
                ";\n    padding: ",
                ";\n    margin: 0;\n    opacity: 0.65;\n    transition:\n        background-color 0.15s ease-in-out,\n        border-color 0.15s ease-in-out,\n        box-shadow 0.15s ease-in-out,\n        opacity 0.15s ease-in-out;\n    cursor: default;\n\n    > div:first-child {\n        display: flex;\n        align-items: center;\n        flex-wrap: wrap;\n        flex-direction: row;\n    }\n\n    &:not(:disabled) {\n        opacity: 1;\n\n        ",
                "\n    }\n",
            ]
        )),
    function (props) {
        return (0, color_1.color)(
            props.$error && props.$backgroundColor !== "transparent" && props.$borderColor === "transparent"
                ? props.$errorColor
                : props.$backgroundColor
        );
    },
    function (props) {
        return (
            'url("data:image/svg+xml;base64,'.concat(
                (0, dropdown_1.dropdownIcon)(
                    (0, color_1.color)(
                        props.$textColor
                            ? props.$textColor
                            : props.$borderColor && props.$borderColor !== "transparent"
                            ? props.$borderColor
                            : (0, color_1.color)(props.$backgroundColor, function (o) {
                                  return o.makeBlackOrWhite();
                              })
                    )
                ),
                '")'
            ) +
            (props.$error
                ? ',url("data:image/svg+xml;base64,'.concat(
                      (0, warning_1.warningIcon)(
                          (0, color_1.color)(props.$errorColor, function (o) {
                              return o.makeBlackOrWhite(props.$backgroundColor !== "transparent" && props.$borderColor === "transparent");
                          })
                      ),
                      '")'
                  )
                : "")
        );
    },
    8 / 7,
    function (props) {
        return ""
            .concat(props.$backgroundColor === "transparent" && props.$borderColor === "transparent" ? 0 : props.$borderSize, "px solid ")
            .concat(
                (0, color_1.color)(
                    props.$error
                        ? props.$errorColor
                        : props.$borderColor && props.$borderColor !== "transparent"
                        ? props.$borderColor
                        : props.$backgroundColor
                )
            );
    },
    function (props) {
        return (0, runner_1.isNumberFinite)(props.$roundness) ? "".concat(props.$roundness, "px") : "0.5em";
    },
    function (props) {
        return props.$backgroundColor === "transparent" && props.$borderColor === "transparent"
            ? "0 1.75em 0 0"
            : ""
                  .concat((0.375 * props.$scale) / 2, "em ")
                  .concat(props.$error ? 1.75 + 8 / 7 + 0.375 : 1.75, "em ")
                  .concat((0.375 * props.$scale) / 2, "em ")
                  .concat((5 / 14) * props.$scale, "em");
    },
    function (props) {
        return props.$focus
            ? "\n            background-color: "
                  .concat((0, color_1.color)(props.$backgroundColor), ";\n            background-image: ")
                  .concat(
                      (!props.$errorVisible &&
                          'url("data:image/svg+xml;base64,'.concat(
                              (0, dropdown_1.dropdownIcon)(
                                  (0, color_1.color)(
                                      props.$textColor
                                          ? props.$textColor
                                          : props.$borderColor && props.$borderColor !== "transparent"
                                          ? props.$borderColor
                                          : (0, color_1.color)(props.$backgroundColor, function (o) {
                                                return o.makeBlackOrWhite();
                                            })
                                  )
                              ),
                              '")'
                          )) ||
                          undefined,
                      ";\n            border-color: "
                  )
                  .concat(
                      (0, color_1.color)(
                          props.$borderColor && props.$borderColor !== "transparent" ? props.$borderColor : props.$backgroundColor
                      ),
                      ";\n            box-shadow: "
                  )
                  .concat(
                      ((props.$backgroundColor !== "transparent" || props.$borderColor !== "transparent") &&
                          "0 0 0 0.2rem ".concat(
                              (0, color_1.color)(
                                  props.$borderColor && props.$borderColor !== "transparent" ? props.$borderColor : props.$backgroundColor,
                                  function (o) {
                                      return o.manipulate(function (m) {
                                          return m.alpha(0.5);
                                      });
                                  }
                              )
                          )) ||
                          undefined,
                      ";\n        "
                  )
            : "\n            &:hover {\n                box-shadow: ".concat(
                  ((props.$backgroundColor !== "transparent" || props.$borderColor !== "transparent") &&
                      "0 0 0 0.2rem ".concat(
                          (0, color_1.color)(
                              props.$error
                                  ? props.$errorColor
                                  : props.$borderColor && props.$borderColor !== "transparent"
                                  ? props.$borderColor
                                  : props.$backgroundColor,
                              function (o) {
                                  return o.manipulate(function (m) {
                                      return m.alpha(0.2);
                                  });
                              }
                          )
                      )) ||
                      undefined,
                  ";\n            }\n        "
              );
    }
);
var MultiSelectInputElement = styled_components_1.styled.input(
    templateObject_2 ||
        (templateObject_2 = tslib_1.__makeTemplateObject(
            [
                "\n    flex: 1 1 0%;\n    min-width: 60px;\n    background-color: transparent;\n    border: 0;\n    outline: 0;\n    padding: 0;\n    font-size: 1em;\n    line-height: 1.5em;\n    color: ",
                ";\n    appearance: none;\n    overflow: hidden;\n    padding: 0;\n    margin: ",
                ";\n    opacity: ",
                ";\n\n    &:first-child {\n        margin-left: 0.375em;\n    }\n\n    &::placeholder {\n        color: ",
                ";\n        opacity: 0.5;\n        transition: color 0.15s ease-in-out opacity 0.15s ease-in-out;\n    }\n\n    &:focus {\n        &::placeholder {\n            color: ",
                ";\n            opacity: 0.3;\n        }\n    }\n\n    &::-webkit-search-cancel-button {\n        display: none;\n    }\n",
            ],
            [
                "\n    flex: 1 1 0%;\n    min-width: 60px;\n    background-color: transparent;\n    border: 0;\n    outline: 0;\n    padding: 0;\n    font-size: 1em;\n    line-height: 1.5em;\n    color: ",
                ";\n    appearance: none;\n    overflow: hidden;\n    padding: 0;\n    margin: ",
                ";\n    opacity: ",
                ";\n\n    &:first-child {\n        margin-left: 0.375em;\n    }\n\n    &::placeholder {\n        color: ",
                ";\n        opacity: 0.5;\n        transition: color 0.15s ease-in-out opacity 0.15s ease-in-out;\n    }\n\n    &:focus {\n        &::placeholder {\n            color: ",
                ";\n            opacity: 0.3;\n        }\n    }\n\n    &::-webkit-search-cancel-button {\n        display: none;\n    }\n",
            ]
        )),
    function (props) {
        return (0, color_1.color)(
            props.$error
                ? props.$backgroundColor !== "transparent" && props.$borderColor === "transparent"
                    ? (0, color_1.color)(props.$errorColor, function (o) {
                          return o.makeBlackOrWhite();
                      })
                    : props.$errorColor
                : props.$textColor
                ? props.$textColor
                : props.$borderColor && props.$borderColor !== "transparent"
                ? props.$borderColor
                : (0, color_1.color)(props.$backgroundColor, function (o) {
                      return o.makeBlackOrWhite();
                  })
        );
    },
    function (props) {
        return "".concat((0.375 * props.$scale) / 2, "em 0");
    },
    function (props) {
        return props.$visible ? "1" : "0";
    },
    function (props) {
        return (0, color_1.color)(
            props.$error
                ? props.$backgroundColor !== "transparent" && props.$borderColor === "transparent"
                    ? (0, color_1.color)(props.$errorColor, function (o) {
                          return o.makeBlackOrWhite();
                      })
                    : props.$errorColor
                : props.$textColor
                ? props.$textColor
                : props.$borderColor && props.$borderColor !== "transparent"
                ? props.$borderColor
                : (0, color_1.color)(props.$backgroundColor, function (o) {
                      return o.makeBlackOrWhite();
                  })
        );
    },
    function (props) {
        return (0, color_1.color)(
            props.$textColor
                ? props.$textColor
                : props.$borderColor && props.$borderColor !== "transparent"
                ? props.$borderColor
                : (0, color_1.color)(props.$backgroundColor, function (o) {
                      return o.makeBlackOrWhite();
                  })
        );
    }
);
var MultiSelectValueElement = styled_components_1.styled.div(
    templateObject_3 ||
        (templateObject_3 = tslib_1.__makeTemplateObject(
            [
                "\n    margin: ",
                ";\n    padding-left: 0.5em;\n    cursor: default;\n    background-color: ",
                ";\n    border: ",
                ";\n    border-radius: ",
                ";\n    color: ",
                ";\n    display: flex;\n    align-items: stretch;\n    max-width: 50%;\n\n    > div {\n        font-size: 0.8em;\n        overflow: hidden;\n        white-space: nowrap;\n        text-overflow: ellipsis;\n    }\n\n    > button {\n        appearance: none;\n        background-color: transparent;\n        border: none;\n        outline: 0;\n        width: 1.6em;\n        min-width: 1.6em;\n        background-image: ",
                ";\n        background-repeat: no-repeat;\n        background-size: 1em;\n        background-position: center;\n        opacity: ",
                ";\n\n        &:hover {\n            opacity: ",
                ";\n        }\n    }\n",
            ],
            [
                "\n    margin: ",
                ";\n    padding-left: 0.5em;\n    cursor: default;\n    background-color: ",
                ";\n    border: ",
                ";\n    border-radius: ",
                ";\n    color: ",
                ";\n    display: flex;\n    align-items: stretch;\n    max-width: 50%;\n\n    > div {\n        font-size: 0.8em;\n        overflow: hidden;\n        white-space: nowrap;\n        text-overflow: ellipsis;\n    }\n\n    > button {\n        appearance: none;\n        background-color: transparent;\n        border: none;\n        outline: 0;\n        width: 1.6em;\n        min-width: 1.6em;\n        background-image: ",
                ";\n        background-repeat: no-repeat;\n        background-size: 1em;\n        background-position: center;\n        opacity: ",
                ";\n\n        &:hover {\n            opacity: ",
                ";\n        }\n    }\n",
            ]
        )),
    function (props) {
        return "".concat((0.375 * props.$scale) / 2, "em 0.375em ").concat((0.375 * props.$scale) / 2, "em 0");
    },
    function (props) {
        return props.$filled
            ? (0, color_1.color)(
                  props.$textColor
                      ? props.$textColor
                      : props.$borderColor && props.$borderColor !== "transparent"
                      ? props.$borderColor
                      : (0, color_1.color)(props.$backgroundColor, function (o) {
                            return o.makeBlackOrWhite();
                        })
              )
            : undefined;
    },
    function (props) {
        return !props.$filled
            ? "1px solid ".concat(
                  (0, color_1.color)(
                      props.$textColor
                          ? props.$textColor
                          : props.$borderColor && props.$borderColor !== "transparent"
                          ? props.$borderColor
                          : (0, color_1.color)(props.$backgroundColor, function (o) {
                                return o.makeBlackOrWhite();
                            })
                  )
              )
            : undefined;
    },
    function (props) {
        return props.$roundness !== 0 ? "".concat(props.$roundness || 5, "px") : "0px";
    },
    function (props) {
        return (0, color_1.color)(
            props.$textColor
                ? props.$textColor
                : props.$borderColor && props.$borderColor !== "transparent"
                ? props.$borderColor
                : (0, color_1.color)(props.$backgroundColor, function (o) {
                      return o.makeBlackOrWhite();
                  }),
            function (o) {
                return props.$filled ? o.makeBlackOrWhite() : o;
            }
        );
    },
    function (props) {
        return 'url("data:image/svg+xml;base64,'.concat(
            (0, close_1.closeIcon)(
                (0, color_1.color)(
                    props.$textColor
                        ? props.$textColor
                        : props.$borderColor && props.$borderColor !== "transparent"
                        ? props.$borderColor
                        : (0, color_1.color)(props.$backgroundColor, function (o) {
                              return o.makeBlackOrWhite();
                          }),
                    function (o) {
                        return props.$filled ? o.makeBlackOrWhite() : o;
                    }
                )
            ),
            '")'
        );
    },
    function (props) {
        return props.$readOnly ? "0.4" : "0.7";
    },
    function (props) {
        return props.$readOnly ? "0.4" : "1";
    }
);
var MultiSelectOptionsElement = styled_components_1.styled.div(
    templateObject_4 ||
        (templateObject_4 = tslib_1.__makeTemplateObject(
            [
                "\n    position: fixed;\n    display: block;\n    top: 0;\n    left: 0;\n    z-index: 2147483638;\n    cursor: default;\n    box-sizing: border-box;\n    padding: ",
                ";\n\n    > div {\n        background-color: ",
                ";\n        border-radius: ",
                ";\n        border: ",
                ";\n        overflow: auto;\n        scroll-behavior: auto;\n        scrollbar-width: none;\n        -webkit-overflow-scrolling: touch;\n        -webkit-tap-highlight-color: transparent;\n        -ms-overflow-style: none;\n\n        &::-webkit-scrollbar {\n            display: none;\n        }\n    }\n",
            ],
            [
                "\n    position: fixed;\n    display: block;\n    top: 0;\n    left: 0;\n    z-index: 2147483638;\n    cursor: default;\n    box-sizing: border-box;\n    padding: ",
                ";\n\n    > div {\n        background-color: ",
                ";\n        border-radius: ",
                ";\n        border: ",
                ";\n        overflow: auto;\n        scroll-behavior: auto;\n        scrollbar-width: none;\n        -webkit-overflow-scrolling: touch;\n        -webkit-tap-highlight-color: transparent;\n        -ms-overflow-style: none;\n\n        &::-webkit-scrollbar {\n            display: none;\n        }\n    }\n",
            ]
        )),
    function (props) {
        return "calc(0.2rem + ".concat(
            props.$backgroundColor === "transparent" && props.$borderColor === "transparent" ? 0 : props.$borderSize,
            "px) 0"
        );
    },
    function (props) {
        return (0, color_1.color)(props.$backgroundColor !== "transparent" ? props.$backgroundColor : "#fff");
    },
    function (props) {
        return (0, runner_1.isNumberFinite)(props.$roundness) ? "".concat(props.$roundness, "px") : "0.5em";
    },
    function (props) {
        return ""
            .concat(
                (props.$backgroundColor === "transparent" && props.$borderColor === "transparent" ? 0 : props.$borderSize) || 1,
                "px solid "
            )
            .concat(
                (0, color_1.color)(
                    props.$borderColor && props.$borderColor !== "transparent" ? props.$borderColor : props.$backgroundColor,
                    function (o) {
                        return o.makeUnclear(props.$textColor || "#000");
                    }
                )
            );
    }
);
var MultiSelectOptionElement = styled_components_1.styled.div(
    templateObject_5 ||
        (templateObject_5 = tslib_1.__makeTemplateObject(
            [
                "\n    display: flex;\n    flex-direction: column;\n    font-size: 1em;\n    line-height: 1.5em;\n    width: 100%;\n    padding: 0.375em 0.75em;\n    padding-right: 4em;\n    opacity: ",
                ";\n    background-color: ",
                ";\n    color: ",
                ";\n\n    > div:nth-child(2) {\n        font-size: 0.8em;\n        line-height: 1.3em;\n    }\n",
            ],
            [
                "\n    display: flex;\n    flex-direction: column;\n    font-size: 1em;\n    line-height: 1.5em;\n    width: 100%;\n    padding: 0.375em 0.75em;\n    padding-right: 4em;\n    opacity: ",
                ";\n    background-color: ",
                ";\n    color: ",
                ";\n\n    > div:nth-child(2) {\n        font-size: 0.8em;\n        line-height: 1.3em;\n    }\n",
            ]
        )),
    function (props) {
        return props.$disabled ? "0.5" : "1";
    },
    function (props) {
        return props.$selected && !props.$disabled
            ? (0, color_1.color)(
                  props.$textColor
                      ? props.$textColor
                      : props.$borderColor && props.$borderColor !== "transparent"
                      ? props.$borderColor
                      : (0, color_1.color)(props.$backgroundColor, function (o) {
                            return o.makeBlackOrWhite();
                        })
              )
            : "transparent";
    },
    function (props) {
        return (0, color_1.color)(
            props.$textColor
                ? props.$textColor
                : props.$borderColor && props.$borderColor !== "transparent"
                ? props.$borderColor
                : (0, color_1.color)(props.$backgroundColor, function (o) {
                      return o.makeBlackOrWhite();
                  }),
            function (o) {
                return props.$selected && !props.$disabled ? o.makeBlackOrWhite() : o;
            }
        );
    }
);
var MultiSelectFabric = function (props) {
    var selected = (0, runner_1.filter)(props.options, function (option) {
        var _a;
        return ((_a = option.value) === null || _a === void 0 ? void 0 : _a.value) === true && option.name ? true : false;
    });
    var _a = (0, react_1.useState)(false),
        focus = _a[0],
        setFocus = _a[1];
    var _b = (0, react_1.useState)(""),
        query = _b[0],
        setQuery = _b[1];
    var _c = (0, react_1.useState)(""),
        cursor = _c[0],
        setCursor = _c[1];
    var _d = (0, react_1.useState)(),
        position = _d[0],
        setPosition = _d[1];
    var _e = (0, react_1.useState)(selected.length > 0 ? true : false),
        errorVisible = _e[0],
        makeErrorVisible = _e[1];
    var scrollPosition = (0, react_1.useRef)({
        position: 0,
        time: 0,
    });
    var scrollIntoView = (0, react_1.useRef)(false);
    var ref = (0, react_1.useRef)();
    var componentRef = (0, react_1.useRef)(null);
    var optionsRef = (0, react_1.useRef)(null);
    var scrollToRef = (0, react_1.useRef)(null);
    var setRef = function (el) {
        if (props.onAutoFocus && selected.length === 0) {
            props.onAutoFocus(el);
        }
        ref.current = el;
    };
    var options =
        (focus &&
            (0, runner_1.filter)(props.options, function (option) {
                var _a;
                return (
                    (((_a = option.value) === null || _a === void 0 ? void 0 : _a.value) !== true &&
                        option.name &&
                        !option.disabled &&
                        (!query || option.name.toLowerCase().indexOf(query.toLowerCase()) !== -1)) ||
                    false
                );
            })) ||
        [];
    var styles = {
        $backgroundColor: props.styles.backgroundColor || "transparent",
        $borderColor: props.styles.borderColor || "transparent",
        $borderSize: props.styles.borderSize || 1,
        $roundness: props.styles.roundness,
        $textColor: props.styles.textColor,
        $errorColor: props.styles.errorColor,
        $errorVisible: errorVisible,
        $error: props.error || false,
        $scale: props.styles.scale || 1,
        $placeholder: (props.placeholder && selected.length === 0 && (!focus || !query)) || false,
        $focus: focus,
    };
    var updateScrollPosition = function () {
        var _a, _b;
        scrollPosition.current = {
            position:
                ((_b = (_a = optionsRef.current) === null || _a === void 0 ? void 0 : _a.firstElementChild) === null || _b === void 0
                    ? void 0
                    : _b.scrollTop) || 0,
            time: runner_1.DateTime.now,
        };
    };
    if (!focus && cursor) {
        setCursor("");
        scrollIntoView.current = false;
    }
    if (!focus && position) {
        setPosition(undefined);
    }
    return (0, jsx_runtime_1.jsxs)(
        MultiSelectElement,
        tslib_1.__assign(
            {
                ref: componentRef,
                onMouseDown: function (e) {
                    var tagName = e.target.tagName.toLowerCase();
                    if (focus && tagName !== "button" && (tagName !== "input" || !query)) {
                        e.preventDefault();
                        e.stopPropagation();
                        if (ref.current) {
                            ref.current.blur();
                        }
                    } else if (tagName !== "input") {
                        e.preventDefault();
                        e.stopPropagation();
                        if (ref.current) {
                            ref.current.focus();
                        }
                    }
                },
                role: "combobox",
                "aria-haspopup": "listbox",
                "aria-owns": (focus && "".concat(props.id, "-options")) || undefined,
                "aria-controls": props.id,
                "aria-expanded": focus,
                "aria-describedby": props.ariaDescribedBy,
            },
            styles,
            {
                children: [
                    (0, jsx_runtime_1.jsxs)("div", {
                        children: [
                            selected.map(function (option, index) {
                                var _a, _b;
                                return (0, jsx_runtime_1.jsxs)(
                                    MultiSelectValueElement,
                                    tslib_1.__assign(
                                        {
                                            $filled: props.styles.pills !== "outline",
                                            $readOnly:
                                                option.disabled ||
                                                ((_a = option.value) === null || _a === void 0 ? void 0 : _a.isFrozen) ||
                                                ((_b = option.value) === null || _b === void 0 ? void 0 : _b.isLocked) ||
                                                false,
                                        },
                                        styles,
                                        {
                                            children: [
                                                (0, jsx_runtime_1.jsx)("div", { children: option.label || option.name }),
                                                (0, jsx_runtime_1.jsx)("button", {
                                                    onClick: function () {
                                                        var _a, _b;
                                                        if (
                                                            option.value &&
                                                            !option.disabled &&
                                                            !((_a = option.value) === null || _a === void 0 ? void 0 : _a.isFrozen) &&
                                                            !((_b = option.value) === null || _b === void 0 ? void 0 : _b.isLocked)
                                                        ) {
                                                            option.value.value = false;
                                                            updateScrollPosition();
                                                            makeErrorVisible(true);
                                                        }
                                                    },
                                                }),
                                            ],
                                        }
                                    ),
                                    option.id || index
                                );
                            }),
                            (0, jsx_runtime_1.jsx)(
                                MultiSelectInputElement,
                                tslib_1.__assign(
                                    {
                                        ref: setRef,
                                        id: props.id,
                                        type: "search",
                                        autoComplete: "off",
                                        spellCheck: "false",
                                        inputMode: "text",
                                        value: (focus && query) || "",
                                        placeholder: (!selected.length && props.placeholder) || "",
                                        onChange: function (e) {
                                            return setQuery(e.target.value || "");
                                        },
                                        onFocus: (0, helpers_1.handleFocus)(setFocus, setQuery, props.onFocus),
                                        onBlur: (0, helpers_1.handleBlur)(setFocus, setQuery, props.onBlur),
                                        onKeyDown: function (e) {
                                            var _a, _b;
                                            if (e.key === "Enter" && cursor) {
                                                e.preventDefault();
                                                var index_1 = 0;
                                                var option = (0, runner_1.findFirst)(options, function (o) {
                                                    index_1++;
                                                    return o.id === cursor;
                                                });
                                                if (
                                                    option &&
                                                    !option.disabled &&
                                                    option.value &&
                                                    !option.value.isFrozen &&
                                                    !option.value.isLocked &&
                                                    (!props.maxSelected || selected.length < props.maxSelected)
                                                ) {
                                                    option.value.value = true;
                                                    updateScrollPosition();
                                                    setCursor(
                                                        ((_a = (0, runner_1.arrayItem)(options, index_1)) === null || _a === void 0
                                                            ? void 0
                                                            : _a.id) || ""
                                                    );
                                                    makeErrorVisible(true);
                                                }
                                            } else if (e.key === "Escape") {
                                                e.currentTarget.blur();
                                            } else if (e.key === "Tab") {
                                                e.currentTarget.blur();
                                                if (e.shiftKey) {
                                                    if (props.onCancel) {
                                                        e.preventDefault();
                                                        props.onCancel();
                                                    }
                                                } else if (props.onSubmit) {
                                                    e.preventDefault();
                                                    props.onSubmit();
                                                }
                                            } else if (
                                                e.key === "ArrowDown" ||
                                                e.key === "ArrowUp" ||
                                                e.key === "ArrowLeft" ||
                                                e.key === "ArrowRight"
                                            ) {
                                                scrollIntoView.current = true;
                                                if (cursor) {
                                                    var found_1 = false;
                                                    var next_1 = "";
                                                    (e.key === "ArrowDown" || e.key === "ArrowRight"
                                                        ? runner_1.eachReverse
                                                        : runner_1.each)(options, function (option) {
                                                        if (option.id === cursor) {
                                                            found_1 = true;
                                                        } else if (!found_1) {
                                                            next_1 = option.id;
                                                        }
                                                    });
                                                    if (found_1 && next_1) {
                                                        setCursor(next_1);
                                                        return;
                                                    }
                                                }
                                                setCursor(
                                                    ((_b = (0, runner_1.arrayItem)(
                                                        options,
                                                        e.key === "ArrowUp" || e.key === "ArrowLeft" ? options.length - 1 : 0
                                                    )) === null || _b === void 0
                                                        ? void 0
                                                        : _b.id) || ""
                                                );
                                            } else if (e.key === "Backspace" && !query && selected.length > 0) {
                                                var lastOption = selected[selected.length - 1];
                                                if (lastOption.value) {
                                                    lastOption.value.value = false;
                                                    updateScrollPosition();
                                                    makeErrorVisible(true);
                                                }
                                            }
                                        },
                                        $visible: focus || (!selected.length && props.placeholder) ? true : false,
                                    },
                                    styles
                                )
                            ),
                        ],
                    }),
                    focus &&
                        options.length > 0 &&
                        (0, jsx_runtime_1.jsx)(props.overlay, {
                            onEffect: function () {
                                var _a;
                                var updatePosition = function () {
                                    var _a, _b;
                                    if (componentRef.current && optionsRef.current) {
                                        var componentRect = componentRef.current.getBoundingClientRect();
                                        var optionsRect = optionsRef.current.getBoundingClientRect();
                                        var scrollRect =
                                            ((_a = optionsRef.current.firstElementChild) === null || _a === void 0
                                                ? void 0
                                                : _a.getBoundingClientRect()) || optionsRect;
                                        var viewportHeight =
                                            componentRef.current.ownerDocument.documentElement.clientHeight || window.innerHeight;
                                        var availableHeight = viewportHeight - componentRect.bottom;
                                        var positionAbove =
                                            (((_b = optionsRef.current.firstElementChild) === null || _b === void 0
                                                ? void 0
                                                : _b.scrollHeight) || 0) > availableHeight && componentRect.top > availableHeight;
                                        var newPosition = {
                                            left: optionsRect.left + (componentRect.left - optionsRect.left),
                                            top:
                                                optionsRect.top +
                                                (positionAbove
                                                    ? componentRect.top - optionsRect.height - optionsRect.top + styles.$borderSize - 1
                                                    : componentRect.bottom - optionsRect.top - styles.$borderSize + 1),
                                            width: componentRect.width,
                                            height: runner_1.Num.max(
                                                (positionAbove ? componentRect.top : availableHeight) -
                                                    runner_1.Num.max(optionsRect.height - scrollRect.height, 0),
                                                120
                                            ),
                                        };
                                        if (!(0, runner_1.compare)(position, newPosition, true)) {
                                            setPosition(newPosition);
                                        }
                                    }
                                };
                                if (!position) {
                                    updatePosition();
                                }
                                if (
                                    runner_1.DateTime.elapsed(scrollPosition.current.time) < 300 &&
                                    ((_a = optionsRef.current) === null || _a === void 0 ? void 0 : _a.firstElementChild)
                                ) {
                                    optionsRef.current.firstElementChild.scrollTo(0, scrollPosition.current.position);
                                }
                                if (scrollToRef.current) {
                                    scrollToRef.current.scrollIntoView({ behavior: "auto", block: "nearest" });
                                    scrollIntoView.current = false;
                                }
                                if (componentRef.current) {
                                    var resizeObserver_1 =
                                        "ResizeObserver" in window &&
                                        new ResizeObserver(function () {
                                            return updatePosition();
                                        });
                                    var componentRect = componentRef.current.getBoundingClientRect();
                                    var currentPosition_1 = componentRect.top;
                                    var currentWidth_1 = componentRect.width;
                                    var scrollObserverFunc_1 = function () {
                                        if (componentRef.current) {
                                            var rect = componentRef.current.getBoundingClientRect();
                                            if (rect.top !== currentPosition_1 || rect.width !== currentWidth_1) {
                                                updatePosition();
                                            } else {
                                                scrollObserver_1 = requestAnimationFrame(scrollObserverFunc_1);
                                            }
                                        }
                                    };
                                    var scrollObserver_1 = requestAnimationFrame(scrollObserverFunc_1);
                                    if (resizeObserver_1) {
                                        resizeObserver_1.observe(componentRef.current);
                                    }
                                    return function () {
                                        if (resizeObserver_1) {
                                            resizeObserver_1.disconnect();
                                        }
                                        cancelAnimationFrame(scrollObserver_1);
                                    };
                                }
                                return undefined;
                            },
                            children: (0, jsx_runtime_1.jsx)(
                                MultiSelectOptionsElement,
                                tslib_1.__assign(
                                    {
                                        ref: optionsRef,
                                        id: "".concat(props.id, "-options"),
                                        style: {
                                            transform: "translate("
                                                .concat((position === null || position === void 0 ? void 0 : position.left) || 0, "px,")
                                                .concat((position === null || position === void 0 ? void 0 : position.top) || 0, "px)"),
                                            maxWidth:
                                                props.styles.overlayWidth !== "full"
                                                    ? position === null || position === void 0
                                                        ? void 0
                                                        : position.width
                                                    : undefined,
                                            width:
                                                props.styles.overlayWidth === "full"
                                                    ? position === null || position === void 0
                                                        ? void 0
                                                        : position.width
                                                    : undefined,
                                            opacity: position ? 1 : 0,
                                        },
                                    },
                                    styles,
                                    {
                                        children: (0, jsx_runtime_1.jsx)(
                                            "div",
                                            {
                                                style: {
                                                    maxHeight: position === null || position === void 0 ? void 0 : position.height,
                                                },
                                                children: options.map(function (option, index) {
                                                    var _a, _b;
                                                    return (0, jsx_runtime_1.jsxs)(
                                                        MultiSelectOptionElement,
                                                        tslib_1.__assign(
                                                            {
                                                                ref:
                                                                    (scrollIntoView.current && cursor === option.id && scrollToRef) ||
                                                                    undefined,
                                                                "data-id": option.id,
                                                                role: "option",
                                                                "aria-selected": cursor === option.id,
                                                                onMouseMove: function () {
                                                                    return setCursor(option.id);
                                                                },
                                                                onMouseDown: function (e) {
                                                                    e.preventDefault();
                                                                    e.stopPropagation();
                                                                },
                                                                onClick: function () {
                                                                    var _a;
                                                                    if (
                                                                        option.value &&
                                                                        !option.disabled &&
                                                                        !option.value.isFrozen &&
                                                                        !option.value.isLocked &&
                                                                        (!props.maxSelected || selected.length < props.maxSelected)
                                                                    ) {
                                                                        option.value.value = true;
                                                                        updateScrollPosition();
                                                                        setCursor(
                                                                            ((_a = (0, runner_1.arrayItem)(options, index + 1)) === null ||
                                                                            _a === void 0
                                                                                ? void 0
                                                                                : _a.id) || ""
                                                                        );
                                                                        makeErrorVisible(true);
                                                                    }
                                                                },
                                                                $disabled:
                                                                    option.disabled ||
                                                                    ((_a = option.value) === null || _a === void 0
                                                                        ? void 0
                                                                        : _a.isFrozen) ||
                                                                    ((_b = option.value) === null || _b === void 0
                                                                        ? void 0
                                                                        : _b.isLocked) ||
                                                                    (props.maxSelected && selected.length >= props.maxSelected) ||
                                                                    false,
                                                                $selected: cursor === option.id,
                                                            },
                                                            styles,
                                                            {
                                                                children: [
                                                                    (0, jsx_runtime_1.jsx)("div", {
                                                                        children: option.label || option.name,
                                                                    }),
                                                                    option.description &&
                                                                        (0, jsx_runtime_1.jsx)("div", { children: option.description }),
                                                                ],
                                                            }
                                                        ),
                                                        option.id || index
                                                    );
                                                }),
                                            },
                                            "".concat(props.id, "-list")
                                        ),
                                    }
                                ),
                                "".concat(props.id, "-options")
                            ),
                        }),
                ],
            }
        )
    );
};
exports.MultiSelectFabric = MultiSelectFabric;
var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5;
