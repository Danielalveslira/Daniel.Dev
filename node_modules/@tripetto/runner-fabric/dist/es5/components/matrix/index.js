"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MatrixFabric = void 0;
var tslib_1 = require("tslib");
var jsx_runtime_1 = require("react/jsx-runtime");
var styled_components_1 = require("styled-components");
var react_1 = require("react");
var runner_1 = require("@tripetto/runner");
var color_1 = require("../../color");
var radiobuttons_1 = require("../radiobuttons");
var required_indicator_1 = require("../required-indicator");
var const_1 = require("../const");
var MatrixContainerElement = styled_components_1.styled.div(
    templateObject_1 ||
        (templateObject_1 = tslib_1.__makeTemplateObject(
            [
                "\n    overflow-x: auto;\n    scroll-behavior: smooth;\n    scrollbar-width: none;\n    -ms-overflow-style: none;\n    -webkit-overflow-scrolling: touch;\n    -webkit-tap-highlight-color: transparent;\n\n    &::-webkit-scrollbar {\n        display: none;\n    }\n",
            ],
            [
                "\n    overflow-x: auto;\n    scroll-behavior: smooth;\n    scrollbar-width: none;\n    -ms-overflow-style: none;\n    -webkit-overflow-scrolling: touch;\n    -webkit-tap-highlight-color: transparent;\n\n    &::-webkit-scrollbar {\n        display: none;\n    }\n",
            ]
        ))
);
var MatrixElement = styled_components_1.styled.table(
    templateObject_2 ||
        (templateObject_2 = tslib_1.__makeTemplateObject(
            [
                "\n    display: table;\n    width: 100%;\n    border-collapse: collapse;\n    font-size: 1em;\n    line-height: 1.5em;\n\n    > thead > tr {\n        > th {\n            text-align: center;\n            vertical-align: bottom;\n            font-weight: normal;\n            color: ",
                ";\n            background-color: ",
                ";\n            border-bottom: 1px solid ",
                ";\n            cursor: default;\n            padding-top: 0.5em;\n            padding-bottom: 0.5em;\n\n            &:first-child {\n                background-color: transparent;\n            }\n        }\n\n        > th + th {\n            padding-left: 8px;\n            padding-right: 8px;\n        }\n    }\n\n    > tbody {\n        > tr {\n            > th {\n                text-align: left;\n                font-weight: normal;\n                padding-right: 8px;\n                padding-top: 0.5em;\n                padding-bottom: 0.5em;\n                color: ",
                ";\n                border-bottom: 1px solid ",
                ";\n                cursor: default;\n                min-width: 50%;\n\n                > small {\n                    opacity: 0.8;\n                }\n            }\n\n            > td {\n                position: relative;\n                border-bottom: 1px solid ",
                ";\n\n                > label {\n                    display: flex;\n                    justify-content: center;\n                    position: absolute;\n                    left: 0;\n                    top: 0;\n                    right: 0;\n                    bottom: 0;\n                    padding-left: 0;\n\n                    > span:nth-child(2) {\n                        position: absolute;\n                    }\n\n                    > span:last-child {\n                        position: relative;\n                        align-self: center;\n                    }\n                }\n            }\n        }\n\n        > tr:last-child {\n            > th,\n            > td {\n                border-bottom: none;\n            }\n        }\n    }\n",
            ],
            [
                "\n    display: table;\n    width: 100%;\n    border-collapse: collapse;\n    font-size: 1em;\n    line-height: 1.5em;\n\n    > thead > tr {\n        > th {\n            text-align: center;\n            vertical-align: bottom;\n            font-weight: normal;\n            color: ",
                ";\n            background-color: ",
                ";\n            border-bottom: 1px solid ",
                ";\n            cursor: default;\n            padding-top: 0.5em;\n            padding-bottom: 0.5em;\n\n            &:first-child {\n                background-color: transparent;\n            }\n        }\n\n        > th + th {\n            padding-left: 8px;\n            padding-right: 8px;\n        }\n    }\n\n    > tbody {\n        > tr {\n            > th {\n                text-align: left;\n                font-weight: normal;\n                padding-right: 8px;\n                padding-top: 0.5em;\n                padding-bottom: 0.5em;\n                color: ",
                ";\n                border-bottom: 1px solid ",
                ";\n                cursor: default;\n                min-width: 50%;\n\n                > small {\n                    opacity: 0.8;\n                }\n            }\n\n            > td {\n                position: relative;\n                border-bottom: 1px solid ",
                ";\n\n                > label {\n                    display: flex;\n                    justify-content: center;\n                    position: absolute;\n                    left: 0;\n                    top: 0;\n                    right: 0;\n                    bottom: 0;\n                    padding-left: 0;\n\n                    > span:nth-child(2) {\n                        position: absolute;\n                    }\n\n                    > span:last-child {\n                        position: relative;\n                        align-self: center;\n                    }\n                }\n            }\n        }\n\n        > tr:last-child {\n            > th,\n            > td {\n                border-bottom: none;\n            }\n        }\n    }\n",
            ]
        )),
    function (props) {
        return props.$textColor;
    },
    function (props) {
        return (0, color_1.color)(props.$textColor, function (o) {
            return o.manipulate(function (m) {
                return m.alpha(0.2);
            });
        });
    },
    function (props) {
        return (0, color_1.color)(props.$textColor, function (o) {
            return o.manipulate(function (m) {
                return m.alpha(0.2);
            });
        });
    },
    function (props) {
        return props.$textColor;
    },
    function (props) {
        return (0, color_1.color)(props.$textColor, function (o) {
            return o.manipulate(function (m) {
                return m.alpha(0.2);
            });
        });
    },
    function (props) {
        return (0, color_1.color)(props.$textColor, function (o) {
            return o.manipulate(function (m) {
                return m.alpha(0.15);
            });
        });
    }
);
var MatrixCount = 0;
var MatrixFabric = function (props) {
    var name = (0, react_1.useState)(function () {
        return runner_1.SHA2.SHA2_256("Matrix" + MatrixCount++);
    })[0];
    var debounceRef = (0, react_1.useRef)(0);
    var rowsRef = (0, react_1.useRef)({});
    var _a = (0, react_1.useState)({}),
        update = _a[1];
    var styles = {
        $disabled: props.disabled || props.readOnly || false,
        $color: props.styles.backgroundColor,
        $backgroundColor: (props.styles.backgroundColor !== props.styles.borderColor && props.styles.backgroundColor) || "transparent",
        $borderColor:
            (props.styles.borderColor === "transparent" &&
                props.styles.backgroundColor === "transparent" &&
                (0, color_1.color)(props.styles.textColor, function (o) {
                    return o.makeUnclear("#000");
                })) ||
            ((0, color_1.color)(props.styles.borderColor) !== (0, color_1.color)(props.styles.backgroundColor) &&
                props.styles.borderColor) ||
            "transparent",
        $borderSize: props.styles.borderSize || 1,
        $textColor: props.styles.textColor,
        $errorColor: props.styles.errorColor,
        $scale: props.styles.scale || 1,
        $label: false,
    };
    var changeValue = function (row, column) {
        if (typeof row.value === "object") {
            (0, runner_1.cancelUITimeout)(debounceRef.current);
            rowsRef.current[row.id] = column ? column.id : "";
            update({});
            debounceRef.current = (0, runner_1.scheduleUITimeout)(function () {
                debounceRef.current = 0;
                (0, runner_1.each)(
                    rowsRef.current,
                    function (columnId, rowId) {
                        var changedRow = (0, runner_1.findFirst)(props.rows, function (ref) {
                            return ref.id === rowId;
                        });
                        delete rowsRef.current[rowId];
                        if (changedRow && typeof changedRow.value === "object") {
                            var selectedColumn =
                                (columnId &&
                                    (0, runner_1.findFirst)(props.columns, function (ref) {
                                        return ref.id === columnId;
                                    })) ||
                                undefined;
                            changedRow.value.set(
                                selectedColumn && (selectedColumn.value || selectedColumn.name),
                                selectedColumn === null || selectedColumn === void 0 ? void 0 : selectedColumn.id,
                                selectedColumn === null || selectedColumn === void 0 ? void 0 : selectedColumn.name
                            );
                        }
                    },
                    {
                        keys: true,
                    }
                );
            }, const_1.DEBOUNCE_NORMAL);
        }
        if (row.onChange) {
            row.onChange((column && column.id) || "");
        }
    };
    (0, react_1.useEffect)(function () {
        return function () {
            (0, runner_1.cancelUITimeout)(debounceRef.current);
        };
    }, []);
    return (0, jsx_runtime_1.jsx)(MatrixContainerElement, {
        children: (0, jsx_runtime_1.jsxs)(
            MatrixElement,
            tslib_1.__assign({}, styles, {
                children: [
                    (0, jsx_runtime_1.jsx)("thead", {
                        children: (0, jsx_runtime_1.jsxs)("tr", {
                            children: [
                                (0, jsx_runtime_1.jsx)("th", { scope: "col" }),
                                props.columns.map(function (column, index) {
                                    return (0, jsx_runtime_1.jsx)(
                                        "th",
                                        { scope: "col", children: column.label || column.name || "..." },
                                        index
                                    );
                                }),
                            ],
                        }),
                    }),
                    (0, jsx_runtime_1.jsx)("tbody", {
                        children: props.rows.map(function (row, rowIndex) {
                            return (0, jsx_runtime_1.jsxs)(
                                "tr",
                                {
                                    children: [
                                        (0, jsx_runtime_1.jsxs)("th", {
                                            scope: "row",
                                            children: [
                                                row.label || "...",
                                                (row.required || props.required) &&
                                                    !props.styles.hideRequiredIndicator &&
                                                    (0, jsx_runtime_1.jsx)(required_indicator_1.RequiredIndicatorFabric, {
                                                        $errorColor: props.styles.errorColor,
                                                    }),
                                                row.explanation &&
                                                    (0, jsx_runtime_1.jsxs)("small", {
                                                        children: [(0, jsx_runtime_1.jsx)("br", {}), row.explanation],
                                                    }),
                                            ],
                                        }),
                                        props.columns.map(function (column, columnIndex) {
                                            var checked =
                                                (typeof row.value === "object"
                                                    ? (0, runner_1.castToString)(rowsRef.current[row.id], row.value.reference || "")
                                                    : row.value) === column.id;
                                            return (0, jsx_runtime_1.jsx)(
                                                "td",
                                                {
                                                    children: (0, jsx_runtime_1.jsxs)(
                                                        radiobuttons_1.RadiobuttonLabelElement,
                                                        tslib_1.__assign({}, styles, {
                                                            children: [
                                                                (0, jsx_runtime_1.jsx)("input", {
                                                                    ref:
                                                                        (rowIndex === 0 && columnIndex === 0 && props.onAutoFocus) ||
                                                                        undefined,
                                                                    type: "radio",
                                                                    name: name + rowIndex,
                                                                    checked: checked,
                                                                    tabIndex: row.tabIndex || props.tabIndex,
                                                                    "aria-describedby": props.ariaDescribedBy,
                                                                    disabled:
                                                                        props.disabled ||
                                                                        props.readOnly ||
                                                                        (typeof row.value === "object" &&
                                                                            (row.value.isFrozen || row.value.isLocked)) ||
                                                                        false,
                                                                    onChange: function () {
                                                                        return changeValue(row, column);
                                                                    },
                                                                    onClick: function () {
                                                                        if (props.allowUnselect && checked) {
                                                                            changeValue(row, undefined);
                                                                        }
                                                                    },
                                                                    onFocus: props.onFocus,
                                                                    onBlur: props.onBlur,
                                                                    onKeyDown: function (e) {
                                                                        if (
                                                                            (props.allowUnselect || !checked) &&
                                                                            (e.key === "Enter" || e.key === " ") &&
                                                                            !e.shiftKey
                                                                        ) {
                                                                            e.preventDefault();
                                                                            changeValue(row, (!checked && column) || undefined);
                                                                            return;
                                                                        }
                                                                        if (e.key === "Enter" && e.shiftKey && props.onSubmit) {
                                                                            props.onSubmit();
                                                                        } else if (e.key === "Escape") {
                                                                            e.currentTarget.blur();
                                                                        } else if (e.key === "Tab") {
                                                                            if (e.shiftKey) {
                                                                                if (props.onCancel && rowIndex === 0) {
                                                                                    e.preventDefault();
                                                                                    props.onCancel();
                                                                                }
                                                                            } else if (
                                                                                props.onSubmit &&
                                                                                rowIndex + 1 === props.rows.length
                                                                            ) {
                                                                                e.preventDefault();
                                                                                props.onSubmit();
                                                                            }
                                                                        }
                                                                    },
                                                                }),
                                                                (0, jsx_runtime_1.jsx)("span", {}),
                                                                (0, jsx_runtime_1.jsx)("span", {}),
                                                            ],
                                                        })
                                                    ),
                                                },
                                                rowIndex + "-" + columnIndex
                                            );
                                        }),
                                    ],
                                },
                                rowIndex
                            );
                        }),
                    }),
                ],
            })
        ),
    });
};
exports.MatrixFabric = MatrixFabric;
var templateObject_1, templateObject_2;
