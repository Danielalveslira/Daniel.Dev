"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FontLoader = void 0;
var tslib_1 = require("tslib");
var runner_1 = require("@tripetto/runner");
var FontLoader = (function () {
    function FontLoader() {}
    Object.defineProperty(FontLoader, "id", {
        get: function () {
            return "".concat(++this.counter);
        },
        enumerable: false,
        configurable: true,
    });
    FontLoader.init = function () {
        var _this = this;
        if (!this.initialized) {
            this.initialized = true;
            if (navigator.userAgent.toLowerCase().indexOf("firefox") > -1) {
                (0, runner_1.scheduleAnimation)(function () {
                    _this.ready = true;
                    _this.load();
                });
            } else {
                this.ready = true;
            }
        }
        return !this.ready;
    };
    FontLoader.load = function () {
        var _this = this;
        var _a;
        if (this.init()) {
            return;
        }
        if ((0, runner_1.arraySize)(this.requests) > 0) {
            var nextRequest_1 = (0, runner_1.findFirst)(this.requests, function (request) {
                return !request.context || request.context.current ? true : false;
            });
            if (nextRequest_1) {
                var loading = (0, runner_1.findFirst)(this.requests, function (request) {
                    return request.loading || false;
                });
                if (loading && loading.id !== nextRequest_1.id) {
                    return;
                }
                var font_1 = nextRequest_1.ref.current;
                var config = nextRequest_1.url
                    ? {
                          custom: {
                              families: [nextRequest_1.font],
                              urls: [nextRequest_1.url],
                          },
                      }
                    : {
                          google: {
                              families: [nextRequest_1.font],
                          },
                      };
                nextRequest_1.loading = true;
                require("webfontloader").load(
                    tslib_1.__assign(tslib_1.__assign({}, config), {
                        classes: false,
                        fontactive: function (familyName) {
                            return _this.done(nextRequest_1, font_1, familyName);
                        },
                        inactive: function () {
                            return _this.done(nextRequest_1, font_1, nextRequest_1.fallback || "");
                        },
                        context: (_a = nextRequest_1.context) === null || _a === void 0 ? void 0 : _a.current.contentWindow,
                    })
                );
            } else {
                (0, runner_1.scheduleFrame)(function () {
                    return _this.load();
                });
            }
        }
    };
    FontLoader.done = function (request, font, familyName) {
        if (request.ref.current === font) {
            delete this.requests[request.id];
            request.set.current(familyName);
        } else {
            request.loading = false;
        }
        this.load();
    };
    FontLoader.request = function (id, ref, context, set, fallback) {
        if (!ref.current || this.isStandardFont(ref.current)) {
            delete this.requests[id.current];
            set.current(ref.current);
            return;
        }
        var font = ref.current;
        var url = "";
        if (font.indexOf("https://") === 0 || font.indexOf("/") === 0) {
            var hashSign = font.lastIndexOf("#");
            if (hashSign !== -1) {
                var family = font.substr(hashSign + 1);
                url = font.substr(0, hashSign);
                if (family.indexOf("&") !== -1) {
                    family = family.substr(0, family.indexOf("&"));
                }
                if (family.indexOf("|") !== -1) {
                    family = family.substr(0, family.indexOf("|"));
                }
                try {
                    font = decodeURIComponent(family.replace(/\+/g, " "));
                } catch (_a) {
                    font = "";
                    url = "";
                }
            } else {
                font = "";
            }
        }
        if (font) {
            var instance = this.requests[id.current];
            if (instance) {
                instance.font = font;
                instance.url = url;
                instance.set = set;
            } else {
                this.requests[id.current] = {
                    id: id.current,
                    ref: ref,
                    font: font,
                    url: url,
                    context: context,
                    set: set,
                    fallback: fallback,
                };
            }
            this.load();
        } else {
            delete this.requests[id.current];
            set.current(fallback || "");
        }
    };
    FontLoader.isStandardFont = function (font) {
        switch (font.toLowerCase()) {
            case "arial":
                return true;
            case "helvetica":
                return true;
            case "times new roman":
                return true;
            case "times":
                return true;
            case "courier new":
                return true;
            case "courier":
                return true;
            case "sans-serif":
                return true;
        }
        return false;
    };
    FontLoader.counter = 0;
    FontLoader.initialized = false;
    FontLoader.ready = false;
    FontLoader.requests = {};
    return FontLoader;
})();
exports.FontLoader = FontLoader;
