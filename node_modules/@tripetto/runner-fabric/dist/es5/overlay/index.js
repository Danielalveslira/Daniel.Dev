"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useOverlay = void 0;
var tslib_1 = require("tslib");
var jsx_runtime_1 = require("react/jsx-runtime");
var react_1 = require("react");
var useOverlay = function () {
    var contentRef = (0, react_1.useRef)();
    var updateRef = (0, react_1.useRef)();
    var idRef = (0, react_1.useRef)(0);
    return [
        function (props) {
            var _a, _b, _c;
            var _d = (0, react_1.useState)(),
                doUpdate = _d[1];
            (0, react_1.useEffect)(function () {
                var _a;
                return ((_a = contentRef.current) === null || _a === void 0 ? void 0 : _a.onEffect) && contentRef.current.onEffect();
            });
            updateRef.current = function () {
                return doUpdate({});
            };
            if (contentRef.current) {
                contentRef.current.rendered = true;
            }
            return props.element && ((_a = contentRef.current) === null || _a === void 0 ? void 0 : _a.children)
                ? (0, jsx_runtime_1.jsx)(
                      props.element,
                      tslib_1.__assign({}, props.props, {
                          children: (_b = contentRef.current) === null || _b === void 0 ? void 0 : _b.children,
                      })
                  )
                : (0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, {
                      children: (_c = contentRef.current) === null || _c === void 0 ? void 0 : _c.children,
                  });
        },
        function (props) {
            var id = ++idRef.current;
            contentRef.current = tslib_1.__assign(tslib_1.__assign({}, props), { id: id, rendered: false });
            (0, react_1.useEffect)(function () {
                if (contentRef.current && !contentRef.current.rendered && updateRef.current) {
                    updateRef.current();
                }
                return function () {
                    var _a, _b;
                    if (((_a = contentRef.current) === null || _a === void 0 ? void 0 : _a.id) === id) {
                        if (((_b = contentRef.current) === null || _b === void 0 ? void 0 : _b.rendered) && updateRef.current) {
                            updateRef.current();
                        }
                        contentRef.current = undefined;
                    }
                };
            });
            return (0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, {});
        },
    ];
};
exports.useOverlay = useOverlay;
