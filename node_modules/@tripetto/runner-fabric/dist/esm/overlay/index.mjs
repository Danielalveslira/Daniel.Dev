import { jsx, Fragment } from "react/jsx-runtime";
import { useRef, useState, useEffect } from "react";

const useOverlay = () => {
    const contentRef = useRef();
    const updateRef = useRef();
    const idRef = useRef(0);
    return [
        (props) => {
            var _a, _b, _c;
            const [, doUpdate] = useState();
            useEffect(() => {
                var _a;
                return ((_a = contentRef.current) === null || _a === void 0 ? void 0 : _a.onEffect) && contentRef.current.onEffect();
            });
            updateRef.current = () => doUpdate({});
            if (contentRef.current) {
                contentRef.current.rendered = true;
            }
            return props.element && ((_a = contentRef.current) === null || _a === void 0 ? void 0 : _a.children)
                ? jsx(
                      props.element,
                      Object.assign({}, props.props, {
                          children: (_b = contentRef.current) === null || _b === void 0 ? void 0 : _b.children,
                      })
                  )
                : jsx(Fragment, { children: (_c = contentRef.current) === null || _c === void 0 ? void 0 : _c.children });
        },
        (props) => {
            const id = ++idRef.current;
            contentRef.current = Object.assign(Object.assign({}, props), { id, rendered: false });
            useEffect(() => {
                if (contentRef.current && !contentRef.current.rendered && updateRef.current) {
                    updateRef.current();
                }
                return () => {
                    var _a, _b;
                    if (((_a = contentRef.current) === null || _a === void 0 ? void 0 : _a.id) === id) {
                        if (((_b = contentRef.current) === null || _b === void 0 ? void 0 : _b.rendered) && updateRef.current) {
                            updateRef.current();
                        }
                        contentRef.current = undefined;
                    }
                };
            });
            return jsx(Fragment, {});
        },
    ];
};

export { useOverlay };
