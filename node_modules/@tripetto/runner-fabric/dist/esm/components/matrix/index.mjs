import { jsx, jsxs } from "react/jsx-runtime";
import { styled } from "styled-components";
import { useState, useRef, useEffect } from "react";
import { SHA2, cancelUITimeout, castToString, scheduleUITimeout, each, findFirst } from "@tripetto/runner";
import { color } from "../../color/index.mjs";
import { RadiobuttonLabelElement } from "../radiobuttons/index.mjs";
import { RequiredIndicatorFabric } from "../required-indicator/index.mjs";
import { DEBOUNCE_NORMAL } from "../const.mjs";

const MatrixContainerElement = styled.div`
    overflow-x: auto;
    scroll-behavior: smooth;
    scrollbar-width: none;
    -ms-overflow-style: none;
    -webkit-overflow-scrolling: touch;
    -webkit-tap-highlight-color: transparent;

    &::-webkit-scrollbar {
        display: none;
    }
`;
const MatrixElement = styled.table`
    display: table;
    width: 100%;
    border-collapse: collapse;
    font-size: 1em;
    line-height: 1.5em;

    > thead > tr {
        > th {
            text-align: center;
            vertical-align: bottom;
            font-weight: normal;
            color: ${(props) => props.$textColor};
            background-color: ${(props) => color(props.$textColor, (o) => o.manipulate((m) => m.alpha(0.2)))};
            border-bottom: 1px solid ${(props) => color(props.$textColor, (o) => o.manipulate((m) => m.alpha(0.2)))};
            cursor: default;
            padding-top: 0.5em;
            padding-bottom: 0.5em;

            &:first-child {
                background-color: transparent;
            }
        }

        > th + th {
            padding-left: 8px;
            padding-right: 8px;
        }
    }

    > tbody {
        > tr {
            > th {
                text-align: left;
                font-weight: normal;
                padding-right: 8px;
                padding-top: 0.5em;
                padding-bottom: 0.5em;
                color: ${(props) => props.$textColor};
                border-bottom: 1px solid ${(props) => color(props.$textColor, (o) => o.manipulate((m) => m.alpha(0.2)))};
                cursor: default;
                min-width: 50%;

                > small {
                    opacity: 0.8;
                }
            }

            > td {
                position: relative;
                border-bottom: 1px solid ${(props) => color(props.$textColor, (o) => o.manipulate((m) => m.alpha(0.15)))};

                > label {
                    display: flex;
                    justify-content: center;
                    position: absolute;
                    left: 0;
                    top: 0;
                    right: 0;
                    bottom: 0;
                    padding-left: 0;

                    > span:nth-child(2) {
                        position: absolute;
                    }

                    > span:last-child {
                        position: relative;
                        align-self: center;
                    }
                }
            }
        }

        > tr:last-child {
            > th,
            > td {
                border-bottom: none;
            }
        }
    }
`;
let MatrixCount = 0;
const MatrixFabric = (props) => {
    const [name] = useState(() => SHA2.SHA2_256("Matrix" + MatrixCount++));
    const debounceRef = useRef(0);
    const rowsRef = useRef({});
    const [, update] = useState({});
    const styles = {
        $disabled: props.disabled || props.readOnly || false,
        $color: props.styles.backgroundColor,
        $backgroundColor: (props.styles.backgroundColor !== props.styles.borderColor && props.styles.backgroundColor) || "transparent",
        $borderColor:
            (props.styles.borderColor === "transparent" &&
                props.styles.backgroundColor === "transparent" &&
                color(props.styles.textColor, (o) => o.makeUnclear("#000"))) ||
            (color(props.styles.borderColor) !== color(props.styles.backgroundColor) && props.styles.borderColor) ||
            "transparent",
        $borderSize: props.styles.borderSize || 1,
        $textColor: props.styles.textColor,
        $errorColor: props.styles.errorColor,
        $scale: props.styles.scale || 1,
        $label: false,
    };
    const changeValue = (row, column) => {
        if (typeof row.value === "object") {
            cancelUITimeout(debounceRef.current);
            rowsRef.current[row.id] = column ? column.id : "";
            update({});
            debounceRef.current = scheduleUITimeout(() => {
                debounceRef.current = 0;
                each(
                    rowsRef.current,
                    (columnId, rowId) => {
                        const changedRow = findFirst(props.rows, (ref) => ref.id === rowId);
                        delete rowsRef.current[rowId];
                        if (changedRow && typeof changedRow.value === "object") {
                            const selectedColumn = (columnId && findFirst(props.columns, (ref) => ref.id === columnId)) || undefined;
                            changedRow.value.set(
                                selectedColumn && (selectedColumn.value || selectedColumn.name),
                                selectedColumn === null || selectedColumn === void 0 ? void 0 : selectedColumn.id,
                                selectedColumn === null || selectedColumn === void 0 ? void 0 : selectedColumn.name
                            );
                        }
                    },
                    {
                        keys: true,
                    }
                );
            }, DEBOUNCE_NORMAL);
        }
        if (row.onChange) {
            row.onChange((column && column.id) || "");
        }
    };
    useEffect(() => {
        return () => {
            cancelUITimeout(debounceRef.current);
        };
    }, []);
    return jsx(MatrixContainerElement, {
        children: jsxs(
            MatrixElement,
            Object.assign({}, styles, {
                children: [
                    jsx("thead", {
                        children: jsxs("tr", {
                            children: [
                                jsx("th", { scope: "col" }),
                                props.columns.map((column, index) =>
                                    jsx("th", { scope: "col", children: column.label || column.name || "..." }, index)
                                ),
                            ],
                        }),
                    }),
                    jsx("tbody", {
                        children: props.rows.map((row, rowIndex) =>
                            jsxs(
                                "tr",
                                {
                                    children: [
                                        jsxs("th", {
                                            scope: "row",
                                            children: [
                                                row.label || "...",
                                                (row.required || props.required) &&
                                                    !props.styles.hideRequiredIndicator &&
                                                    jsx(RequiredIndicatorFabric, { $errorColor: props.styles.errorColor }),
                                                row.explanation && jsxs("small", { children: [jsx("br", {}), row.explanation] }),
                                            ],
                                        }),
                                        props.columns.map((column, columnIndex) => {
                                            const checked =
                                                (typeof row.value === "object"
                                                    ? castToString(rowsRef.current[row.id], row.value.reference || "")
                                                    : row.value) === column.id;
                                            return jsx(
                                                "td",
                                                {
                                                    children: jsxs(
                                                        RadiobuttonLabelElement,
                                                        Object.assign({}, styles, {
                                                            children: [
                                                                jsx("input", {
                                                                    ref:
                                                                        (rowIndex === 0 && columnIndex === 0 && props.onAutoFocus) ||
                                                                        undefined,
                                                                    type: "radio",
                                                                    name: name + rowIndex,
                                                                    checked: checked,
                                                                    tabIndex: row.tabIndex || props.tabIndex,
                                                                    "aria-describedby": props.ariaDescribedBy,
                                                                    disabled:
                                                                        props.disabled ||
                                                                        props.readOnly ||
                                                                        (typeof row.value === "object" &&
                                                                            (row.value.isFrozen || row.value.isLocked)) ||
                                                                        false,
                                                                    onChange: () => changeValue(row, column),
                                                                    onClick: () => {
                                                                        if (props.allowUnselect && checked) {
                                                                            changeValue(row, undefined);
                                                                        }
                                                                    },
                                                                    onFocus: props.onFocus,
                                                                    onBlur: props.onBlur,
                                                                    onKeyDown: (e) => {
                                                                        if (
                                                                            (props.allowUnselect || !checked) &&
                                                                            (e.key === "Enter" || e.key === " ") &&
                                                                            !e.shiftKey
                                                                        ) {
                                                                            e.preventDefault();
                                                                            changeValue(row, (!checked && column) || undefined);
                                                                            return;
                                                                        }
                                                                        if (e.key === "Enter" && e.shiftKey && props.onSubmit) {
                                                                            props.onSubmit();
                                                                        } else if (e.key === "Escape") {
                                                                            e.currentTarget.blur();
                                                                        } else if (e.key === "Tab") {
                                                                            if (e.shiftKey) {
                                                                                if (props.onCancel && rowIndex === 0) {
                                                                                    e.preventDefault();
                                                                                    props.onCancel();
                                                                                }
                                                                            } else if (
                                                                                props.onSubmit &&
                                                                                rowIndex + 1 === props.rows.length
                                                                            ) {
                                                                                e.preventDefault();
                                                                                props.onSubmit();
                                                                            }
                                                                        }
                                                                    },
                                                                }),
                                                                jsx("span", {}),
                                                                jsx("span", {}),
                                                            ],
                                                        })
                                                    ),
                                                },
                                                rowIndex + "-" + columnIndex
                                            );
                                        }),
                                    ],
                                },
                                rowIndex
                            )
                        ),
                    }),
                ],
            })
        ),
    });
};

export { MatrixFabric };
