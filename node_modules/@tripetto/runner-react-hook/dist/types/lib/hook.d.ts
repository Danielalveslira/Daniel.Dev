import { NodeBlock, Storyline, TModes } from "@tripetto/runner";
import { IRunnerProps } from "./props";
import { IRunner } from "./interface";
import { ISequenceRules } from "./sequence/rules";
import { IRunnerSequenceItem } from "./sequence/item";
export declare function useRunner<T extends NodeBlock>(
    props: IRunnerProps,
    options?: {
        readonly namespace?: string;
        readonly mode?: TModes;
        readonly bookmarks?: "default" | "group";
        readonly prologue?: "block" | "blend";
        readonly autoStart?: boolean;
        readonly onInteraction?: () => void;
        readonly onPreview?: (
            action: "start" | "end",
            type: "prologue" | "block" | "epilogue",
            blockId?: string
        ) => void;
        readonly onRestart?: () => void;
        readonly onDestroy?: () => void;
    }
): IRunner<T, Storyline<T> | undefined>;
export declare function useRunner<T extends NodeBlock>(
    props: IRunnerProps,
    options: {
        readonly namespace?: string;
        readonly mode: "sequence";
        readonly prologue?: "block" | "blend";
        readonly autoStart?: boolean;
        readonly restore?: {
            readonly key?: string;
            readonly timeStamp?: number;
        };
        readonly onInteraction?: () => void;
        readonly onPreview?: (
            action: "start" | "end",
            type: "prologue" | "block" | "epilogue",
            blockId?: string
        ) => void;
        readonly onRestart?: () => void;
        readonly onDestroy?: () => void;
    } & ISequenceRules<T>
): IRunner<T, IRunnerSequenceItem<T>[]>;
