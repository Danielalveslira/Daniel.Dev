import {
    IEpilogue,
    IObservableNode,
    IPrologue,
    NodeBlock,
} from "@tripetto/runner";
import { IRunnerSequenceItem } from "./item";
import { IRef } from "./reference";
/**
 * Finds the active item.
 * @param sequence Reference to the item sequence.
 * @return Returns a reference to the item or `undefined` if there is no active item.
 */
export declare function findActiveItem<T extends NodeBlock>(
    sequence: IRunnerSequenceItem<T>[]
): IRunnerSequenceItem<T> | undefined;
export declare function addItemToSequence<T extends NodeBlock>(
    refs: IRef<T>,
    state: "past" | "active" | "upcoming",
    type: "node",
    node: IObservableNode<T>,
    doAction?: (
        type: "stage" | "unstage" | "focus" | "blur",
        node?: IObservableNode<NodeBlock>
    ) => void
): IRunnerSequenceItem<T>;
export declare function addItemToSequence<T extends NodeBlock>(
    refs: IRef<T>,
    state: "history",
    type: "prologue",
    prologue: IPrologue
): IRunnerSequenceItem<T>;
export declare function addItemToSequence<T extends NodeBlock>(
    refs: IRef<T>,
    state: "upcoming",
    type: "epilogue",
    epilogue: IEpilogue
): IRunnerSequenceItem<T>;
export declare function addItemToSequence<T extends NodeBlock>(
    refs: IRef<T>,
    state: "upcoming",
    type: "finishing" | "pausing",
    cancel?: () => void
): IRunnerSequenceItem<T>;
