"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.markdownifyToJSX = void 0;
var tslib_1 = require("tslib");
var react_1 = require("react");
var runner_1 = require("@tripetto/runner");
var KEY = new runner_1.Enumerator();
function markdownifyToJSX(md, context, lineBreaks, features, variables) {
    if (lineBreaks === void 0) {
        lineBreaks = true;
    }
    return (0, runner_1.markdownifyTo)(md, context, {
        lineBreaks: lineBreaks,
        features: features,
        reduce: function (type, content, value) {
            var children = (0, runner_1.isString)(content)
                ? [content]
                : content;
            switch (type) {
                case "bold":
                    return react_1.createElement.apply(
                        void 0,
                        tslib_1.__spreadArray(["b", undefined], children, false)
                    );
                case "italic":
                    return react_1.createElement.apply(
                        void 0,
                        tslib_1.__spreadArray(["i", undefined], children, false)
                    );
                case "bold+italic":
                    return (0, react_1.createElement)(
                        "b",
                        undefined,
                        react_1.createElement.apply(
                            void 0,
                            tslib_1.__spreadArray(
                                ["i", undefined],
                                children,
                                false
                            )
                        )
                    );
                case "underline":
                    return react_1.createElement.apply(
                        void 0,
                        tslib_1.__spreadArray(["u", undefined], children, false)
                    );
                case "strikethrough":
                    return react_1.createElement.apply(
                        void 0,
                        tslib_1.__spreadArray(["s", undefined], children, false)
                    );
                case "break":
                    return (0, react_1.createElement)("br");
                case "hyperlink":
                    return react_1.createElement.apply(
                        void 0,
                        tslib_1.__spreadArray(
                            [
                                "a",
                                {
                                    href: (0, runner_1.castToString)(value),
                                    target: "_blank",
                                    rel: "noopener",
                                },
                            ],
                            children,
                            false
                        )
                    );
                case "mention":
                    var variable_1 = (value && value) || undefined;
                    if (variable_1 && variable_1.content.length > 0) {
                        var elements_1 = [];
                        (0, runner_1.each)(
                            variable_1.content,
                            function (element) {
                                var elementValue = element.value;
                                if (elementValue) {
                                    if (
                                        elements_1.length > 0 &&
                                        element.separator
                                    ) {
                                        elements_1.push(
                                            (0, react_1.createElement)(
                                                "span",
                                                undefined,
                                                element.separator
                                            )
                                        );
                                    }
                                    if (element.type === "string") {
                                        elements_1.push(
                                            lineBreaks &&
                                                elementValue &&
                                                elementValue.indexOf("\n") !==
                                                    -1
                                                ? markdownifyToJSX(
                                                      elementValue.replace(
                                                          /[@\\]/g,
                                                          "\\$&"
                                                      ),
                                                      context,
                                                      true,
                                                      runner_1.MarkdownFeatures
                                                          .None
                                                  )
                                                : (0, react_1.createElement)(
                                                      elementValue
                                                          ? "span"
                                                          : "u",
                                                      undefined,
                                                      elementValue ||
                                                          "\u00A0\u00A0\u00A0"
                                                  )
                                        );
                                    } else if (
                                        !variables ||
                                        variables.indexOf(
                                            "@" + variable_1.id
                                        ) === -1
                                    ) {
                                        elements_1.push(
                                            markdownifyToJSX(
                                                elementValue,
                                                context,
                                                lineBreaks,
                                                element.type === "text"
                                                    ? runner_1.MarkdownFeatures
                                                          .None
                                                    : runner_1.MarkdownFeatures
                                                          .Formatting |
                                                          runner_1
                                                              .MarkdownFeatures
                                                              .Hyperlinks,
                                                (variables || "") +
                                                    "@" +
                                                    variable_1.id
                                            )
                                        );
                                    }
                                }
                            }
                        );
                        if (elements_1.length > 0) {
                            return react_1.createElement.apply(
                                void 0,
                                tslib_1.__spreadArray(
                                    ["span", undefined],
                                    elements_1,
                                    false
                                )
                            );
                        } else {
                            return (0, react_1.createElement)(
                                "u",
                                undefined,
                                "\u00A0\u00A0\u00A0"
                            );
                        }
                    } else {
                        return (0, react_1.createElement)(
                            "u",
                            undefined,
                            "\u00A0\u00A0\u00A0"
                        );
                    }
            }
            return react_1.createElement.apply(
                void 0,
                tslib_1.__spreadArray(["span", { key: KEY.n }], children, false)
            );
        },
    });
}
exports.markdownifyToJSX = markdownifyToJSX;
