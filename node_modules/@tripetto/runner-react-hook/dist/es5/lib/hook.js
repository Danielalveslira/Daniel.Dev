"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useRunner = void 0;
var tslib_1 = require("tslib");
var runner_1 = require("@tripetto/runner");
var react_1 = require("react");
var views_1 = require("./views");
var sequence_1 = require("./sequence");
function useRunner(props, options) {
    var rules = options || {};
    var runnerRef = (0, react_1.useRef)();
    var propsRef = (0, react_1.useRef)();
    var storylineRef = (0, react_1.useRef)();
    var sequenceRef = (0, react_1.useRef)([]);
    var l10nRef = (0, react_1.useRef)();
    var viewRef = (0, react_1.useRef)((0, views_1.verifyView)(props.view));
    var testRef = (0, react_1.useRef)(false);
    var promiseRef = (0, react_1.useRef)();
    var restoreRef = (0, react_1.useRef)(
        viewRef.current === "live" && props.snapshot && rules.restore
    );
    var _a = (0, react_1.useState)(),
        prologuePreview = _a[0],
        setProloguePreview = _a[1];
    var _b = (0, react_1.useState)(),
        epiloguePreview = _b[0],
        setEpiloguePreview = _b[1];
    var epilogueRef = (0, react_1.useRef)();
    var _c = (0, react_1.useState)({}),
        state = _c[0],
        setState = _c[1];
    var statusRef = (0, react_1.useRef)();
    var setStatus = function (status) {
        return statusRef.current && statusRef.current(status);
    };
    var refs = function (sequence) {
        return {
            runnerRef: runnerRef,
            storylineRef: storylineRef,
            viewRef: viewRef,
            promiseRef: promiseRef,
            sequence: sequence,
            rules: rules,
            reset: function () {
                return setStatus(undefined);
            },
            restart: restart,
            update: update,
        };
    };
    var isSynchonizing = false;
    var changeDelegateRef = (0, react_1.useRef)(
        new runner_1.Debounce(function () {
            if (
                runnerRef.current &&
                runnerRef.current.instance &&
                propsRef.current &&
                propsRef.current.onChange
            ) {
                propsRef.current.onChange(runnerRef.current.instance);
            }
        })
    );
    var dataDelegateRef = (0, react_1.useRef)(
        new runner_1.Debounce(function () {
            if (
                runnerRef.current &&
                runnerRef.current.instance &&
                propsRef.current &&
                propsRef.current.onData
            ) {
                propsRef.current.onData(runnerRef.current.instance);
            }
        })
    );
    var allowStart = function () {
        return (
            (runnerRef.current &&
                !runnerRef.current.isRunning &&
                !runnerRef.current.isFinishing &&
                !runnerRef.current.isPausing) ||
            false
        );
    };
    var allowRestart = function () {
        return (
            (viewRef.current !== "preview" &&
                runnerRef.current &&
                !runnerRef.current.isFinishing &&
                !runnerRef.current.isPausing) ||
            false
        );
    };
    var allowPause = function (snapshot) {
        if (
            viewRef.current === "live" &&
            runnerRef.current &&
            runnerRef.current.isRunning &&
            storylineRef.current &&
            !storylineRef.current.isEmpty &&
            !storylineRef.current.isEvaluating &&
            !runnerRef.current.isFinishing &&
            !runnerRef.current.isPausing
        ) {
            if (!snapshot && rules.mode === "sequence") {
                var canPauseHere = function (item) {
                    return (
                        (item &&
                            (rules.canInteract
                                ? rules.canInteract(item)
                                : item.type === "node") &&
                            item) ||
                        undefined
                    );
                };
                var pausableItem = canPauseHere(
                    (0, sequence_1.findActiveItem)(sequenceRef.current)
                );
                if (!pausableItem) {
                    return false;
                }
            }
            return true;
        }
        return false;
    };
    var allowStop = function () {
        return (
            (runnerRef.current &&
                runnerRef.current.isRunning &&
                !runnerRef.current.isFinishing &&
                !runnerRef.current.isPausing &&
                (!storylineRef.current || !storylineRef.current.isEmpty)) ||
            false
        );
    };
    var doAction = function (type, node) {
        if (
            props.onAction &&
            node &&
            runnerRef.current &&
            runnerRef.current.isRunning
        ) {
            props.onAction(
                type,
                {
                    fingerprint: runnerRef.current.fingerprint,
                    name: runnerRef.current.name,
                },
                node && {
                    id: node.key,
                    name: node.props.name || "",
                    get alias() {
                        var _a;
                        var alias = (0, runner_1.getString)(
                            (_a = node.block) === null || _a === void 0
                                ? void 0
                                : _a.props,
                            "alias"
                        );
                        if (alias) {
                            return alias;
                        }
                        if (node.node.slots) {
                            var slot = (0, runner_1.findFirst)(
                                node.node.slots.all,
                                function (slot) {
                                    return slot.kind === "static" && slot.alias
                                        ? true
                                        : false;
                                }
                            );
                            if (slot) {
                                return slot.alias;
                            }
                        }
                        return undefined;
                    },
                }
            );
        }
    };
    var synchronize = function (force) {
        isSynchonizing = true;
        if (runnerRef.current) {
            var storyline = runnerRef.current.storyline;
            storylineRef.current = storyline;
            if (rules.mode === "sequence") {
                var sequence = sequenceRef.current;
                if (
                    storyline &&
                    !storyline.isFinishing &&
                    !storyline.isPausing &&
                    (storyline.isChanged || force)
                ) {
                    var prologueItem =
                        sequence.length > 0 &&
                        sequence[0].type === "prologue" &&
                        sequence[0];
                    var prologue = storyline.prologue;
                    if (
                        (prologueItem && !prologue) ||
                        (!prologueItem && prologue)
                    ) {
                        initialize();
                    } else if (prologueItem && prologue) {
                        (0, runner_1.set)(prologueItem, "prologue", prologue);
                    }
                    var nodes = storyline.nodes;
                    var activeItem = (0, sequence_1.findActiveItem)(sequence);
                    var index = 0;
                    var active =
                        (activeItem &&
                            ((activeItem.node && activeItem.node.key) ||
                                activeItem.index)) ||
                        (restoreRef.current && restoreRef.current.key) ||
                        -1;
                    var offset = (
                        (0, runner_1.findFirst)(sequence, function (item) {
                            return viewRef.current === "preview"
                                ? item.type !== "prologue"
                                : !item.isHistory && item.type === "node";
                        }) || {
                            index: sequence.length,
                        }
                    ).index;
                    for (
                        ;
                        offset < sequence.length && index < nodes.length;
                        offset++, index++
                    ) {
                        var item = sequence[offset];
                        var node = nodes[index];
                        if (item.node && item.node.key === node.key) {
                            (0, runner_1.set)(item, "node", node);
                            if (
                                item.isPreActive ||
                                item.isBeforeActive ||
                                item.isActive ||
                                item.isAfterActive ||
                                item.isPostActive
                            ) {
                                active = offset;
                            }
                            if (
                                viewRef.current !== "preview" &&
                                node.isFailed
                            ) {
                                offset++;
                                index++;
                                break;
                            }
                        } else {
                            break;
                        }
                    }
                    if (offset < sequence.length) {
                        sequence.splice(offset, sequence.length - offset);
                    }
                    for (; index < nodes.length; index++, offset++) {
                        var node = nodes[index];
                        var item = (0, sequence_1.addItemToSequence)(
                            refs(sequence),
                            active === node.key ||
                                (active === -1 &&
                                    viewRef.current !== "preview") ||
                                (((0, runner_1.isFilledString)(active) ||
                                    active === -1) &&
                                    viewRef.current !== "preview" &&
                                    node.isFailed)
                                ? "active"
                                : (0, runner_1.isFilledString)(active) ||
                                  (active === -1 &&
                                      viewRef.current === "preview")
                                ? "past"
                                : "upcoming",
                            "node",
                            node,
                            doAction
                        );
                        if (item.state === "active") {
                            item.activate(
                                node.key !== restoreRef.current &&
                                    (sequence.length === 1 ||
                                        (item.index > 0 &&
                                            item.index < sequence.length &&
                                            sequence[item.index - 1].isHistory))
                            );
                            active = offset;
                        }
                    }
                    if (viewRef.current !== "preview") {
                        if (
                            storyline.isEmpty &&
                            sequence.length === 1 &&
                            sequence[0].type === "prologue"
                        ) {
                            (0, sequence_1.addItemToSequence)(
                                refs(sequence),
                                "upcoming",
                                "epilogue",
                                storyline.epilogue
                            );
                            if (
                                viewRef.current === "live" &&
                                rules.banner &&
                                l10nRef.current
                            ) {
                                var banner = rules.banner(l10nRef.current);
                                if (banner) {
                                    (0, sequence_1.addItemToSequence)(
                                        refs(sequence),
                                        "upcoming",
                                        "epilogue",
                                        banner
                                    );
                                }
                            }
                        }
                        if (
                            (0, runner_1.isFilledString)(active) ||
                            active === -1
                        ) {
                            var firstItem =
                                (0, runner_1.findFirst)(
                                    sequence,
                                    function (item) {
                                        return (
                                            !item.isHistory &&
                                            (!item.node || item.node.isFailed)
                                        );
                                    }
                                ) ||
                                (0, runner_1.findLast)(
                                    sequence,
                                    function (item) {
                                        return !item.isHistory;
                                    }
                                );
                            if (firstItem) {
                                firstItem.activate(true);
                            }
                        }
                    } else {
                        var epilogueItem =
                            sequence.length > 0 &&
                            sequence[sequence.length - 1].type === "epilogue" &&
                            sequence[sequence.length - 1];
                        if (!epilogueItem && sequence.length > 0) {
                            var item = (0, sequence_1.addItemToSequence)(
                                refs(sequence),
                                "upcoming",
                                "epilogue",
                                storyline.epilogue
                            );
                            if (activeItem && activeItem.type === "epilogue") {
                                item.activate(false);
                            }
                        } else if (epilogueItem) {
                            (0, runner_1.set)(
                                epilogueItem,
                                "epilogue",
                                storyline.epilogue
                            );
                        }
                    }
                } else if (
                    !storyline &&
                    runnerRef.current.status !== "finished" &&
                    runnerRef.current.status !== "paused"
                ) {
                    var offset = (
                        (0, runner_1.findFirst)(sequence, function (item) {
                            return viewRef.current === "test"
                                ? item.type !== "prologue"
                                : !item.isHistory && item.type !== "prologue";
                        }) || {
                            index: sequence.length,
                        }
                    ).index;
                    sequence.splice(offset, sequence.length - offset);
                }
                if (restoreRef.current) {
                    if (restoreRef.current.timeStamp) {
                        var activeItem = (0, sequence_1.findActiveItem)(
                            sequence
                        );
                        if (activeItem) {
                            (0, runner_1.set)(
                                activeItem,
                                "timeStamp",
                                restoreRef.current.timeStamp
                            );
                        }
                    }
                    restoreRef.current = undefined;
                }
            }
            if (!storyline && rules.onRestart) {
                rules.onRestart();
            }
        }
        isSynchonizing = false;
        update();
    };
    var update = function () {
        var _a;
        if (isSynchonizing) {
            return;
        }
        if (rules.mode === "sequence" && viewRef.current !== "preview") {
            var activeItem = (0, sequence_1.findActiveItem)(
                sequenceRef.current
            );
            if (
                activeItem &&
                activeItem.state === "active" &&
                ((activeItem.type === "node" &&
                    rules.canActivate &&
                    rules.canActivate(activeItem)) ||
                    activeItem.type === "epilogue" ||
                    activeItem.type === "paused")
            ) {
                activeItem.next();
            } else if (!activeItem && rules.prologue === "blend") {
                var prologueItem =
                    sequenceRef.current.length === 1 &&
                    sequenceRef.current[0].type === "prologue" &&
                    sequenceRef.current[0];
                if (
                    prologueItem &&
                    prologueItem.isHistory &&
                    prologueItem.prologue &&
                    !prologueItem.prologue.button
                ) {
                    (_a = runnerRef.current) === null || _a === void 0
                        ? void 0
                        : _a.start();
                }
            }
        }
        setState(function (prev) {
            return {
                current: prev.current,
            };
        });
        changeDelegateRef.current.invoke();
    };
    var initialize = function () {
        setStatus(undefined);
        epilogueRef.current = undefined;
        if (rules.mode === "sequence") {
            sequenceRef.current.splice(0, sequenceRef.current.length);
            if (runnerRef.current && runnerRef.current.prologue) {
                (0, sequence_1.addItemToSequence)(
                    refs(sequenceRef.current),
                    "history",
                    "prologue",
                    runnerRef.current.prologue
                );
            }
        }
    };
    var start = function () {
        if (allowStart() && runnerRef.current) {
            setStatus(undefined);
            return runnerRef.current.start();
        }
        return undefined;
    };
    var restart = function (preserveData) {
        if (preserveData === void 0) {
            preserveData = false;
        }
        if (allowRestart() && runnerRef.current) {
            initialize();
            if (
                (!preserveData || !runnerRef.current.isRunning) &&
                runnerRef.current.prologue
            ) {
                runnerRef.current.stop();
                if (rules.mode === "sequence") {
                    var prologueItem =
                        sequenceRef.current.length === 1 &&
                        sequenceRef.current[0].type === "prologue" &&
                        sequenceRef.current[0];
                    if (prologueItem) {
                        prologueItem.activate(!preserveData);
                    }
                } else {
                    update();
                }
            } else {
                runnerRef.current.restart(preserveData);
            }
            if (!preserveData && rules.onRestart) {
                rules.onRestart();
            }
        }
    };
    var reload = function (definition) {
        if (restoreRef.current) {
            restoreRef.current = undefined;
        }
        if (
            runnerRef.current &&
            !runnerRef.current.isFinishing &&
            !runnerRef.current.isPausing
        ) {
            isSynchonizing = runnerRef.current.reload(definition, false)
                ? true
                : false;
            update();
        }
    };
    var pause = function (data, on) {
        if (!runnerRef.current || !allowPause(false)) {
            return;
        }
        var sequence = rules.mode === "sequence" && sequenceRef.current;
        if (sequence) {
            var activeItem = (0, sequence_1.findActiveItem)(sequence);
            if (
                activeItem &&
                activeItem.type === "error" &&
                activeItem.error === "paused"
            ) {
                sequence.splice(
                    activeItem.index,
                    sequence.length - activeItem.index
                );
            } else {
                var canPauseHere = function (item) {
                    return (
                        (item &&
                            (rules.canInteract
                                ? rules.canInteract(item)
                                : item.type === "node") &&
                            item) ||
                        undefined
                    );
                };
                var pausableItem = canPauseHere(activeItem);
                if (pausableItem && pausableItem.index + 1 < sequence.length) {
                    sequence.splice(
                        pausableItem.index + 1,
                        sequence.length - pausableItem.index - 1
                    );
                }
            }
        }
        if (on) {
            return runnerRef.current.pause(data, function (snapshot, done) {
                var cancelPause = function () {
                    done(false);
                    setStatus(undefined);
                    if (pauseItem) {
                        pauseItem.undo();
                        synchronize(true);
                    }
                };
                var pauseItem =
                    sequence &&
                    (0, sequence_1.addItemToSequence)(
                        refs(sequence),
                        "upcoming",
                        "pausing",
                        cancelPause
                    );
                setStatus("pausing");
                if (pauseItem) {
                    pauseItem.activate(true);
                }
                on(
                    snapshot,
                    function (result, retry) {
                        done(result === "succeeded");
                        setStatus(
                            result === "succeeded"
                                ? "paused"
                                : result === "failed"
                                ? "error-paused"
                                : undefined
                        );
                        if (pauseItem && result !== "canceled") {
                            if (result === "succeeded") {
                                pauseItem.changeToPaused();
                                if (sequence) {
                                    (0, runner_1.each)(
                                        sequence,
                                        function (item) {
                                            if (item.type === "node") {
                                                item.changeState("history");
                                            }
                                        }
                                    );
                                }
                            } else {
                                pauseItem.changeToError(
                                    "paused",
                                    retry &&
                                        function () {
                                            pauseItem.changeToPausing(
                                                cancelPause
                                            );
                                            setStatus("pausing");
                                            retry();
                                        },
                                    cancelPause
                                );
                                if (retry) {
                                    return;
                                }
                            }
                        }
                        if (pauseItem && result === "canceled") {
                            pauseItem.undo();
                            synchronize(true);
                        }
                    },
                    pauseItem || undefined
                );
            });
        }
        return runnerRef.current.pause(data);
    };
    var autoStart = function () {
        if (runnerRef.current && allowStart()) {
            if (rules.mode === "sequence") {
                var prologueItem = (0, runner_1.arrayItem)(
                    sequenceRef.current,
                    0
                );
                if (prologueItem && prologueItem.type === "prologue") {
                    prologueItem.activate(true);
                    return;
                }
            }
            runnerRef.current.start();
        }
    };
    statusRef.current = function (current) {
        if (state.current !== current) {
            setState({
                current: current,
            });
            changeDelegateRef.current.invoke();
        }
    };
    if (!l10nRef.current) {
        l10nRef.current =
            props.l10nNamespace ||
            runner_1.L10n.Namespace.create(rules.namespace || "");
    }
    if (prologuePreview && rules.mode === "sequence") {
        var prologueItem =
            sequenceRef.current.length > 0 &&
            sequenceRef.current[0].type === "prologue" &&
            sequenceRef.current[0];
        if (prologueItem) {
            (0, runner_1.set)(
                prologueItem,
                "prologue",
                prologuePreview.prologue
            );
        }
    }
    if (epiloguePreview) {
        if (rules.mode === "sequence") {
            var sequence = sequenceRef.current;
            var epilogueItem =
                sequence.length > 0 &&
                sequence[sequence.length - 1].type === "epilogue" &&
                sequence[sequence.length - 1];
            if (
                !epilogueItem &&
                epiloguePreview.epilogue &&
                viewRef.current === "preview"
            ) {
                (0, sequence_1.addItemToSequence)(
                    refs(sequence),
                    "upcoming",
                    "epilogue",
                    epiloguePreview.epilogue
                );
            } else if (epilogueItem) {
                (0, runner_1.set)(
                    epilogueItem,
                    "epilogue",
                    epiloguePreview.epilogue
                );
            }
        }
        if (epilogueRef.current) {
            epilogueRef.current = tslib_1.__assign(
                tslib_1.__assign({}, epiloguePreview.epilogue),
                { context: epilogueRef.current.context }
            );
        }
    }
    if (!runnerRef.current) {
        runnerRef.current = new runner_1.Runner({
            namespace: rules.namespace,
            definition: props.definition,
            l10n: l10nRef.current,
            mode:
                rules.mode === "sequence"
                    ? "progressive"
                    : rules.mode || "progressive",
            bookmarks: rules.bookmarks || "default",
            preview: viewRef.current === "preview",
            test: viewRef.current === "test",
            snapshot:
                (viewRef.current === "live" && props.snapshot) || undefined,
            data: props.onImport,
        });
        restoreRef.current =
            (viewRef.current === "live" && rules.restore) || undefined;
        runnerRef.current.onChange = function () {
            return synchronize(false);
        };
        runnerRef.current.onData = function () {
            setStatus(undefined);
            dataDelegateRef.current.invoke();
            if (rules.onInteraction) {
                rules.onInteraction();
            }
        };
        runnerRef.current.onFinish = function (instance) {
            return (
                ((viewRef.current !== "live" ||
                    props.onSubmit ||
                    props.onComplete) &&
                    new Promise(function (resolve, reject) {
                        var storyline =
                            runnerRef.current && runnerRef.current.storyline;
                        var sequence =
                            rules.mode === "sequence" && sequenceRef.current;
                        var finishingItem =
                            sequence &&
                            (0, sequence_1.addItemToSequence)(
                                refs(sequence),
                                "upcoming",
                                "finishing"
                            );
                        var handleSucces = function (reference) {
                            if (sequence) {
                                (0, runner_1.each)(sequence, function (item) {
                                    if (item.type === "node") {
                                        item.changeState("history");
                                    }
                                });
                            }
                            resolve(reference);
                            if (props.onComplete) {
                                props.onComplete(instance, reference);
                            }
                            (0, runner_1.scheduleFrame)(function () {
                                epilogueRef.current =
                                    storyline && storyline.epilogue;
                                setStatus("finished");
                                if (
                                    viewRef.current === "live" &&
                                    storyline &&
                                    storyline.epilogue &&
                                    storyline.epilogue.getRedirect
                                ) {
                                    var redirectUrl =
                                        storyline.epilogue.getRedirect();
                                    if (redirectUrl) {
                                        window.location.replace(redirectUrl);
                                        return;
                                    }
                                }
                                if (sequence) {
                                    if (finishingItem) {
                                        finishingItem.changeToEpilogue(
                                            (storyline === null ||
                                            storyline === void 0
                                                ? void 0
                                                : storyline.epilogue) || {}
                                        );
                                    }
                                    if (
                                        viewRef.current === "live" &&
                                        rules.banner &&
                                        l10nRef.current
                                    ) {
                                        var banner = rules.banner(
                                            l10nRef.current
                                        );
                                        if (banner) {
                                            (0, sequence_1.addItemToSequence)(
                                                refs(sequence),
                                                "upcoming",
                                                "epilogue",
                                                banner
                                            );
                                        }
                                    }
                                }
                            });
                        };
                        var handleError = function (reason) {
                            if (finishingItem) {
                                finishingItem.changeToError(
                                    reason === "outdated" ||
                                        reason === "rejected"
                                        ? reason
                                        : "unknown",
                                    (storyline &&
                                        storyline.isFinishable &&
                                        function () {
                                            if (
                                                storyline &&
                                                storyline.isFinishable
                                            ) {
                                                if (sequence) {
                                                    sequence.splice(
                                                        finishingItem.index,
                                                        sequence.length -
                                                            finishingItem.index
                                                    );
                                                }
                                                storyline.finish();
                                            }
                                        }) ||
                                        undefined
                                );
                            }
                            setStatus(
                                reason === "outdated"
                                    ? "error-outdated"
                                    : reason === "rejected"
                                    ? "error-rejected"
                                    : "error"
                            );
                            if (
                                reason &&
                                reason !== "outdated" &&
                                reason !== "rejected"
                            ) {
                                console.log(reason);
                            }
                            reject(reason);
                        };
                        var result =
                            (viewRef.current === "live" &&
                                props.onSubmit &&
                                props.onSubmit(
                                    instance,
                                    (
                                        props.l10nNamespace ||
                                        runner_1.L10n.Namespace.global
                                    ).current,
                                    (
                                        props.l10nNamespace ||
                                        runner_1.L10n.Namespace.global
                                    ).locale.identifier,
                                    rules.namespace
                                )) ||
                            undefined;
                        if (!result || (0, runner_1.isBoolean)(result)) {
                            if (!(0, runner_1.isBoolean)(result) || result) {
                                handleSucces(
                                    (viewRef.current !== "live" && "TEST123") ||
                                        undefined
                                );
                            } else {
                                handleError();
                            }
                        } else {
                            setStatus("finishing");
                            if (finishingItem) {
                                finishingItem.activate(true);
                            }
                            result.then(handleSucces).catch(handleError);
                        }
                    })) ||
                false
            );
        };
        if (props.onAction) {
            var ref_1 = runnerRef.current;
            var onAction_1 = props.onAction;
            runnerRef.current.hook("OnStart", "synchronous", function () {
                onAction_1("start", {
                    fingerprint: ref_1.fingerprint,
                    name: ref_1.name,
                });
            });
            runnerRef.current.hook("OnFinish", "synchronous", function () {
                onAction_1("complete", {
                    fingerprint: ref_1.fingerprint,
                    name: ref_1.name,
                });
            });
            runnerRef.current.hook("OnPause", "synchronous", function () {
                onAction_1("pause", {
                    fingerprint: ref_1.fingerprint,
                    name: ref_1.name,
                });
            });
        }
        initialize();
        if (
            (typeof rules.autoStart !== "boolean" &&
                (rules.prologue === "blend" || !runnerRef.current.prologue)) ||
            rules.autoStart
        ) {
            autoStart();
        }
    }
    propsRef.current = props;
    (0, react_1.useEffect)(
        function () {
            var _a, _b;
            var runnerId =
                ((_a = runnerRef.current) === null || _a === void 0
                    ? void 0
                    : _a.uniqueId) || 0;
            if (propsRef.current && propsRef.current.onReady) {
                propsRef.current.onReady(
                    (_b = runnerRef.current) === null || _b === void 0
                        ? void 0
                        : _b.instance
                );
            }
            return function () {
                var _a;
                if (
                    ((_a = runnerRef.current) === null || _a === void 0
                        ? void 0
                        : _a.uniqueId) === runnerId
                ) {
                    if (rules.mode === "sequence") {
                        sequenceRef.current.splice(
                            0,
                            sequenceRef.current.length
                        );
                    }
                    runnerRef.current.destroy();
                    if (rules.onDestroy) {
                        rules.onDestroy();
                    }
                    if (propsRef.current && propsRef.current.onDestroy) {
                        propsRef.current.onDestroy();
                    }
                    runnerRef.current = undefined;
                }
            };
        },
        [props.definition, props.snapshot]
    );
    return {
        l10n: l10nRef.current,
        get definition() {
            return (
                (runnerRef.current && runnerRef.current.definition) ||
                props.definition
            );
        },
        set definition(definition) {
            if (restoreRef.current) {
                restoreRef.current = undefined;
            }
            if (
                runnerRef.current &&
                !runnerRef.current.isFinishing &&
                !runnerRef.current.isPausing
            ) {
                var reloadedInstance = runnerRef.current.reload(
                    definition,
                    viewRef.current !== "preview" && definition.prologue
                        ? true
                        : false
                );
                var instance = reloadedInstance || runnerRef.current.instance;
                isSynchonizing = reloadedInstance ? true : false;
                if (
                    viewRef.current !== "preview" &&
                    !prologuePreview &&
                    !epiloguePreview &&
                    (!instance ||
                        !instance.isRunning ||
                        (sequenceRef.current.length > 0 &&
                            sequenceRef.current[sequenceRef.current.length - 1]
                                .type === "epilogue"))
                ) {
                    isSynchonizing = false;
                    restart(viewRef.current === "test");
                }
            }
        },
        get instance() {
            return runnerRef.current && runnerRef.current.instance;
        },
        get fingerprint() {
            return (runnerRef.current && runnerRef.current.fingerprint) || "";
        },
        get stencil() {
            return (
                (runnerRef.current &&
                    runnerRef.current.stencil("exportables")) ||
                ""
            );
        },
        get actionables() {
            return (
                (runnerRef.current &&
                    runnerRef.current.stencil("actionables")) ||
                ""
            );
        },
        get view() {
            return viewRef.current;
        },
        set view(view) {
            if (view !== viewRef.current) {
                if (viewRef.current === "test") {
                    testRef.current =
                        (runnerRef.current && runnerRef.current.isRunning) ||
                        false;
                }
                var preview = view === "preview";
                var test = view === "test";
                viewRef.current = view;
                if (runnerRef.current) {
                    runnerRef.current.isTest = test;
                    if (runnerRef.current.isPreview !== preview) {
                        initialize();
                        runnerRef.current.isPreview = preview;
                        if (
                            view === "preview" ||
                            (view === "test" && testRef.current)
                        ) {
                            return;
                        }
                    }
                }
                restart();
            }
        },
        get mode() {
            var _a;
            return (
                (rules.mode !== "sequence" &&
                    (((_a = runnerRef.current) === null || _a === void 0
                        ? void 0
                        : _a.mode) ||
                        "progressive")) ||
                undefined
            );
        },
        set mode(mode) {
            if (rules.mode !== "sequence" && mode && runnerRef.current) {
                runnerRef.current.mode = mode;
            }
        },
        storyline:
            rules.mode === "sequence"
                ? sequenceRef.current
                : storylineRef.current,
        get prologue() {
            var _a, _b;
            return (viewRef.current === "preview" ||
                (viewRef.current === "test" &&
                    !((_a = runnerRef.current) === null || _a === void 0
                        ? void 0
                        : _a.isRunning) &&
                    state.current !== "finished")) &&
                prologuePreview
                ? prologuePreview.prologue
                : (_b = runnerRef.current) === null || _b === void 0
                ? void 0
                : _b.prologue;
        },
        get epilogue() {
            var _a;
            return (viewRef.current === "preview" ||
                (viewRef.current === "test" &&
                    !((_a = runnerRef.current) === null || _a === void 0
                        ? void 0
                        : _a.isRunning) &&
                    state.current === "finished")) &&
                epiloguePreview
                ? epiloguePreview.epilogue
                : epilogueRef.current;
        },
        get status() {
            return (
                (storylineRef.current &&
                    storylineRef.current.isEvaluating &&
                    "evaluating") ||
                state.current ||
                (runnerRef.current && runnerRef.current.status) ||
                "empty"
            );
        },
        get isRunning() {
            return (runnerRef.current && runnerRef.current.isRunning) || false;
        },
        get isFinishing() {
            return (
                (runnerRef.current && runnerRef.current.isFinishing) || false
            );
        },
        get isPausing() {
            return (runnerRef.current && runnerRef.current.isPausing) || false;
        },
        get isEvaluating() {
            return (
                (storylineRef.current && storylineRef.current.isEvaluating) ||
                false
            );
        },
        get allowStart() {
            return allowStart();
        },
        get allowRestart() {
            return allowRestart();
        },
        get allowPause() {
            return allowPause(false);
        },
        get allowStop() {
            return allowStop();
        },
        kickOff: autoStart,
        start: start,
        restart: restart,
        reload: reload,
        pause: pause,
        snapshot: function (data) {
            if (!runnerRef.current || !allowPause(true)) {
                return;
            }
            return runnerRef.current.snapshot(data);
        },
        stop: function () {
            return allowStop() && runnerRef.current && runnerRef.current.stop();
        },
        update: update,
        discard: function () {
            if (
                state.current === "error" ||
                state.current === "error-outdated" ||
                state.current === "error-rejected" ||
                state.current === "error-paused"
            ) {
                setStatus(undefined);
            }
        },
        get preview() {
            return viewRef.current === "preview"
                ? prologuePreview
                    ? "prologue"
                    : epiloguePreview
                    ? "epilogue"
                    : "blocks"
                : undefined;
        },
        doAction: doAction,
        doPreview: function (data) {
            if (data.type === "prologue") {
                setProloguePreview(
                    data.action === "start"
                        ? {
                              prologue: data.ref,
                          }
                        : undefined
                );
                if (data.action === "start" && data.subscribe) {
                    var updatePrologue_1 = new runner_1.Debounce(function (
                        prologue
                    ) {
                        return setProloguePreview({ prologue: prologue });
                    }, 100);
                    data.subscribe(function (prologue) {
                        return updatePrologue_1.invoke(prologue);
                    });
                }
            } else if (data.type === "epilogue") {
                setEpiloguePreview(
                    data.action === "start"
                        ? {
                              epilogue: data.ref,
                          }
                        : undefined
                );
                if (data.action === "start" && data.subscribe) {
                    var updateEpilogue_1 = new runner_1.Debounce(function (
                        epilogue
                    ) {
                        return setEpiloguePreview({ epilogue: epilogue });
                    }, 100);
                    data.subscribe(function (epilogue) {
                        return updateEpilogue_1.invoke(epilogue);
                    });
                }
            }
            if (viewRef.current === "preview" && rules.onPreview) {
                if (data.type === "prologue") {
                    rules.onPreview(data.action, "prologue", undefined);
                } else if (data.type === "epilogue") {
                    rules.onPreview(data.action, "epilogue", undefined);
                } else if (data.type === "node") {
                    rules.onPreview(data.action, "block", data.ref.id);
                }
            }
        },
        resetPreview: function () {
            if (prologuePreview) {
                setProloguePreview({
                    prologue: undefined,
                });
            }
            if (epiloguePreview) {
                setEpiloguePreview({
                    epilogue: undefined,
                });
            }
        },
    };
}
exports.useRunner = useRunner;
